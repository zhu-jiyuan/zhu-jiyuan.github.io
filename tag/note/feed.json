{
    "version": "https://jsonfeed.org/version/1",
    "title": "ohayo's blog • All posts by \"note\" tag",
    "description": null,
    "home_page_url": "https://blog.oover.dev",
    "items": [
        {
            "id": "https://blog.oover.dev/CS/dataStruct/tree/huffmanTreeCompress/",
            "url": "https://blog.oover.dev/CS/dataStruct/tree/huffmanTreeCompress/",
            "title": "哈夫曼树应用-压缩文件",
            "date_published": "2022-09-26T12:37:41.000Z",
            "content_html": "<p>大家好~时隔好几天，我来给大家讲哈夫曼树和它的应用了！<br />\n在此前，我们很少谈及c/cpp语言对字节或者bit的操作，或者说是二进制文件的操作。因为今天我内容涉及到bit以及字节的操作，所以我们不得不介绍一些c/cpp与字节的知识。<br />\n我们将从哈夫曼树开始，构造一棵哈夫曼树，补充一些c/cpp的操作，实现一个简陋的无损压缩&amp;&amp;解压的core。</p>\n<p>即使操作bit很吃力，请你坚持实现，不管用什么思路，这将会让你对计算机，有更清楚的认识。甚至有时，你在编码时，脑海里会是一小片内存。</p>\n<h1 id=\"哈夫曼树\"><a class=\"markdownIt-Anchor\" href=\"#哈夫曼树\"></a> 哈夫曼树</h1>\n<p>有关哈夫曼树，网上有太多的讲解。他们的讲解都十分的出色。为了节约时间，请移步如下学习。</p>\n<ul>\n<li>\n<p><a href=\"https://www.bilibili.com/video/BV1nJ411V7bd\">王卓老师-数据结构哈夫曼树</a></p>\n</li>\n<li>\n<p><a href=\"https://zhuanlan.zhihu.com/p/54714101\">哈夫曼树 深入剖析</a></p>\n</li>\n</ul>\n<p>哈夫曼树的理论，不难，希望大家能过一遍理论，再去实践。</p>\n<h1 id=\"构造哈夫曼树\"><a class=\"markdownIt-Anchor\" href=\"#构造哈夫曼树\"></a> 构造哈夫曼树</h1>\n<p>在这些讲解中，普遍存在一个致命的缺陷–避重就轻，屏蔽了代码实现的最难部分。</p>\n<p>根据身边同学的反馈。</p>\n<p>以下是本次构造的难点</p>\n<ul>\n<li>选择两个最小结点。</li>\n<li>获取哈夫曼编码。</li>\n</ul>\n<p>那么在构造这棵树之前，我们需要定义树结点的结构，以及哈夫曼树的一些操作。</p>\n<p>我想我们应该从实践出发，因为我们要做一个压缩文件的程序，首要的就是得到哈夫曼编码。</p>\n<p>假设我们有一棵哈夫曼树，我们应该怎么样去获取每个结点的编码呢？</p>\n<p>请回忆我们之前所学的前序遍历。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">\n <span class=\"token function\">getCode</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">HuffmanTree</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getCode</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">*</span>root<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>string s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>lChild<span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token operator\">&amp;&amp;</span>root<span class=\"token operator\">-></span>rChild<span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        root<span class=\"token operator\">-></span>code<span class=\"token operator\">=</span>s<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">getCode</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>lChild<span class=\"token punctuation\">,</span>s<span class=\"token operator\">+</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">getCode</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>rChild<span class=\"token punctuation\">,</span>s<span class=\"token operator\">+</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我们只需要一次前序遍历。在访问左节点时，s+“0”，右结点时s+“1”，当到叶子结点时，令该结点的code等于s。</p>\n<p>眼下，我们需要构造一棵哈夫曼树。</p>\n<p>我们很容易定义如下的结点结构。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">node</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> data<span class=\"token punctuation\">;</span>\n    node<span class=\"token operator\">*</span> lChild<span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    node<span class=\"token operator\">*</span> rChild<span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> wight<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> parent<span class=\"token punctuation\">&#123;</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token double-colon punctuation\">::</span>string code<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> t_data<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span>t_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我们还需要一个临时的数组，自下而上的构造哈夫曼树。</p>\n<p>但结点是n是，我们只需要一张长度位2xn-1的表就行了，因此我们采用一个指针，动态分配2xn-1空间。</p>\n<p>n个结点的构造，我们需要这些结点的权重，一张统计文件过各个字符的数目的哈希表来初始化这些结点，再好不过了。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">HuffmanTree</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    node<span class=\"token operator\">*</span> huffmanTable<span class=\"token punctuation\">;</span> <span class=\"token comment\">//哈夫曼树构造表</span>\n    node<span class=\"token operator\">*</span> root<span class=\"token punctuation\">;</span><span class=\"token comment\">//根节点</span>\n\n    <span class=\"token function\">HuffmanTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">~</span><span class=\"token function\">HuffmanTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">HuffmanTree</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>unordered_map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token punctuation\">,</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span>wightTable <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//初始化结点</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">forEachPre</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//树的前序遍历，可以检测是否成功构造</span>\n\n\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>首先是通过哈希表初始化结点</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token class-name\">HuffmanTree</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">HuffmanTree</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>unordered_map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span>wightTable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">create</span><span class=\"token punctuation\">(</span>wightTable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token class-name\">HuffmanTree</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>unordered_map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>wightTable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    huffmanTable <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> node<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>wightTable<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//insert wight node</span>\n    <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//this is a huffmanTable point.</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>w<span class=\"token operator\">:</span>wightTable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        huffmanTable<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> w<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">;</span>\n        huffmanTable<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>wight <span class=\"token operator\">=</span> w<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span>\n        index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n\n    <span class=\"token comment\">//important!</span>\n    <span class=\"token comment\">//find two min wight node.</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span>index<span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>wightTable<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">connectNode</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n\n    <span class=\"token comment\">//return root node;</span>\n    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>root <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>huffmanTable<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>wightTable<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">getCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//std::cout&lt;&lt;\"huffman tree create successful!\"&lt;&lt;std::endl;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>当初始完毕后，就可以构造哈夫曼树了，上述代码不难，但我们需要实现，选择两个最小结点，这点很重要。</p>\n<p>利用贪心算法，在排除存在父结点的结点中挑选，合成结点并插入在huffmanTable中的insert_index位置上。</p>\n<p>判断是否存在父结点，可以用parent是否等于-1来判断。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token class-name\">HuffmanTree</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">connectNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> insert_index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//find two min wight node in huffmanTable.</span>\n    <span class=\"token comment\">//lchild and rchild;</span>\n    node<span class=\"token operator\">*</span> l<span class=\"token punctuation\">;</span>\n    node<span class=\"token operator\">*</span> r<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> min_temp<span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//找到第一个没有父节点的结点</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>insert_index<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>huffmanTable<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>parent<span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            min_temp <span class=\"token operator\">=</span> huffmanTable<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>wight<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">//贪心1</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>insert_index<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>huffmanTable<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>wight<span class=\"token operator\">&lt;=</span>min_temp<span class=\"token operator\">&amp;&amp;</span>huffmanTable<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>parent<span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            min_temp <span class=\"token operator\">=</span> huffmanTable<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>wight<span class=\"token punctuation\">;</span>\n            l <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>huffmanTable<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    l<span class=\"token operator\">-></span>parent <span class=\"token operator\">=</span> insert_index<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//找到第一个没有父节点的结点</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>insert_index<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>huffmanTable<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>parent<span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            min_temp <span class=\"token operator\">=</span> huffmanTable<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>wight<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">//贪心2</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>insert_index<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>huffmanTable<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>wight<span class=\"token operator\">&lt;=</span>min_temp<span class=\"token operator\">&amp;&amp;</span>huffmanTable<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>parent<span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            min_temp <span class=\"token operator\">=</span> huffmanTable<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>wight<span class=\"token punctuation\">;</span>\n            r <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>huffmanTable<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    r<span class=\"token operator\">-></span>parent<span class=\"token operator\">=</span>insert_index<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//insert node</span>\n    huffmanTable<span class=\"token punctuation\">[</span>insert_index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>lChild <span class=\"token operator\">=</span> l<span class=\"token punctuation\">;</span>\n    huffmanTable<span class=\"token punctuation\">[</span>insert_index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rChild <span class=\"token operator\">=</span> r<span class=\"token punctuation\">;</span>\n    huffmanTable<span class=\"token punctuation\">[</span>insert_index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>wight <span class=\"token operator\">=</span> l<span class=\"token operator\">-></span>wight<span class=\"token operator\">+</span>r<span class=\"token operator\">-></span>wight<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>以上操作就可以构造一棵哈夫曼树。</p>\n<p>以下是完整代码</p>\n<p>huffmanTree.h</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//</span>\n<span class=\"token comment\">// Created by zhujiyuan on 2022/9/23.</span>\n<span class=\"token comment\">//</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">HUFFMANZIP_HUFFMANTREE_H</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">HUFFMANZIP_HUFFMANTREE_H</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unordered_map></span></span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">node</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> data<span class=\"token punctuation\">;</span>\n    node<span class=\"token operator\">*</span> lChild<span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    node<span class=\"token operator\">*</span> rChild<span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> wight<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> parent<span class=\"token punctuation\">&#123;</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token double-colon punctuation\">::</span>string code<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> t_data<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span>t_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">HuffmanTree</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    node<span class=\"token operator\">*</span> huffmanTable<span class=\"token punctuation\">;</span>\n    node<span class=\"token operator\">*</span> root<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">HuffmanTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">~</span><span class=\"token function\">HuffmanTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">HuffmanTree</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>unordered_map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token punctuation\">,</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span>wightTable <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">forEachPre</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>unordered_map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token punctuation\">,</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span>wightTable <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//insert connect node</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">connectNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> insert_index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">forEachPre</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">getCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">getCode</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">*</span>root<span class=\"token punctuation\">,</span>std<span class=\"token double-colon punctuation\">::</span>string s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">//HUFFMANZIP_HUFFMANTREE_H</span></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>huffmanTree.cpp</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//</span>\n<span class=\"token comment\">// Created by zhujiyuan on 2022/9/23.</span>\n<span class=\"token comment\">//</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"huffmanTree.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n\n\n<span class=\"token class-name\">HuffmanTree</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">HuffmanTree</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>unordered_map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span>wightTable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">create</span><span class=\"token punctuation\">(</span>wightTable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//create huffman tree with wight table.</span>\n<span class=\"token comment\">//new node</span>\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">HuffmanTree</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>unordered_map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>wightTable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    huffmanTable <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> node<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>wightTable<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//insert wight node</span>\n    <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//this is a huffmanTable point.</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>w<span class=\"token operator\">:</span>wightTable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        huffmanTable<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> w<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">;</span>\n        huffmanTable<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>wight <span class=\"token operator\">=</span> w<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span>\n        index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n\n    <span class=\"token comment\">//important!</span>\n    <span class=\"token comment\">//find two min wight node.</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span>index<span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>wightTable<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">connectNode</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n\n    <span class=\"token comment\">//return root node;</span>\n    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>root <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>huffmanTable<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>wightTable<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">getCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//std::cout&lt;&lt;\"huffman tree create successful!\"&lt;&lt;std::endl;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">HuffmanTree</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">connectNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> insert_index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//find two min wight node in huffmanTable.</span>\n    <span class=\"token comment\">//lchild and rchild;</span>\n    node<span class=\"token operator\">*</span> l<span class=\"token punctuation\">;</span>\n    node<span class=\"token operator\">*</span> r<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> min_temp<span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>insert_index<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>huffmanTable<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>parent<span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            min_temp <span class=\"token operator\">=</span> huffmanTable<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>wight<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>insert_index<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>huffmanTable<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>wight<span class=\"token operator\">&lt;=</span>min_temp<span class=\"token operator\">&amp;&amp;</span>huffmanTable<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>parent<span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            min_temp <span class=\"token operator\">=</span> huffmanTable<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>wight<span class=\"token punctuation\">;</span>\n            l <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>huffmanTable<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    l<span class=\"token operator\">-></span>parent <span class=\"token operator\">=</span> insert_index<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>insert_index<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>huffmanTable<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>parent<span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            min_temp <span class=\"token operator\">=</span> huffmanTable<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>wight<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>insert_index<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>huffmanTable<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>wight<span class=\"token operator\">&lt;=</span>min_temp<span class=\"token operator\">&amp;&amp;</span>huffmanTable<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>parent<span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            min_temp <span class=\"token operator\">=</span> huffmanTable<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>wight<span class=\"token punctuation\">;</span>\n            r <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>huffmanTable<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    r<span class=\"token operator\">-></span>parent<span class=\"token operator\">=</span>insert_index<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//insert node</span>\n    huffmanTable<span class=\"token punctuation\">[</span>insert_index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>lChild <span class=\"token operator\">=</span> l<span class=\"token punctuation\">;</span>\n    huffmanTable<span class=\"token punctuation\">[</span>insert_index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rChild <span class=\"token operator\">=</span> r<span class=\"token punctuation\">;</span>\n    huffmanTable<span class=\"token punctuation\">[</span>insert_index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>wight <span class=\"token operator\">=</span> l<span class=\"token operator\">-></span>wight<span class=\"token operator\">+</span>r<span class=\"token operator\">-></span>wight<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">HuffmanTree</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">forEachPre</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>lChild<span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token operator\">&amp;&amp;</span>root<span class=\"token operator\">-></span>rChild<span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n        std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">forEachPre</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>lChild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">forEachPre</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>rChild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">HuffmanTree</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">forEachPre</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">forEachPre</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">HuffmanTree</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getCode</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">*</span>root<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>string s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>lChild<span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token operator\">&amp;&amp;</span>root<span class=\"token operator\">-></span>rChild<span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        root<span class=\"token operator\">-></span>code<span class=\"token operator\">=</span>s<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">getCode</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>lChild<span class=\"token punctuation\">,</span>s<span class=\"token operator\">+</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">getCode</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>rChild<span class=\"token punctuation\">,</span>s<span class=\"token operator\">+</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">HuffmanTree</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">getCode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span>root<span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token class-name\">HuffmanTree</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">HuffmanTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>huffmanTable<span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> huffmanTable<span class=\"token punctuation\">;</span>\n        huffmanTable <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"压缩与解压\"><a class=\"markdownIt-Anchor\" href=\"#压缩与解压\"></a> 压缩与解压</h1>\n<p>压缩难在，操作字节。</p>\n<p>我们先不去考虑这个最难的部分。</p>\n<p>每个文件的大小都是字节的整数倍，我们可以字节作为结点的数据，统计这个字节出现过多少次，来构造哈夫曼树。</p>\n<p>一个字节0-255，所以最多有256个结点。</p>\n<p>构造完哈夫曼树之后，开始编码。</p>\n<p>逐个字节读取源文件，把这个字节转成哈夫曼编码。</p>\n<p>[用一个字符串存储每个字节的哈夫曼编码]{.red}，这样每个8个字符，写入一个字节就行啦。</p>\n<p>要注意的是，最后可能不满8个字节，需要在后面补0，补足8位。</p>\n<p>这就是压缩的过程啦。</p>\n<p>解压的过程，可以通过逐位读取压缩文件</p>\n<ul>\n<li>0访问左子树</li>\n<li>1访问右子树</li>\n<li>叶子结点，把结点的字节，写入解压文件中。</li>\n</ul>\n<p>思路不一，以下是这个思路的实现代码。</p>\n<p>compress.h</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//</span>\n<span class=\"token comment\">// Created by zhujiyuan on 2022/9/25.</span>\n<span class=\"token comment\">//</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">HUFFMANZIP_COMPRESS_H</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">HUFFMANZIP_COMPRESS_H</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"huffmanTree.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unordered_map></span></span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FileIO</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span>buf<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">long</span> buf_size<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">FileIO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">readIntoBuf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Compress</span><span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">FileIO</span></span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    HuffmanTree <span class=\"token operator\">*</span>h_tree<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> endBit<span class=\"token punctuation\">;</span><span class=\"token comment\">//add 0 number</span>\n    std<span class=\"token double-colon punctuation\">::</span>unordered_map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token operator\">></span>hash<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">Compress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">Compress</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">compressFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">decompressFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">inline</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token function\">strBinToUchar</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">inline</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">ucharToStrBin</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token class-name\">Compress</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">strBinToUchar</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> sum<span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">&amp;</span>a<span class=\"token operator\">:</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        sum <span class=\"token operator\">=</span> sum<span class=\"token operator\">*</span><span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">-</span><span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">inline</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token class-name\">Compress</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">ucharToStrBin</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    std<span class=\"token double-colon punctuation\">::</span>string ans <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            ans <span class=\"token operator\">=</span> <span class=\"token char\">'1'</span><span class=\"token operator\">+</span>ans<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n            ans <span class=\"token operator\">=</span> <span class=\"token char\">'0'</span><span class=\"token operator\">+</span>ans<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        s<span class=\"token operator\">/=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        ans <span class=\"token operator\">=</span> <span class=\"token char\">'0'</span><span class=\"token operator\">+</span>ans<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">//HUFFMANZIP_COMPRESS_H</span></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>compress.cpp</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//</span>\n<span class=\"token comment\">// Created by zhujiyuan on 2022/9/25.</span>\n<span class=\"token comment\">//</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"compress.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unordered_map></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"processBar.h\"</span></span>\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">FileIO</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">readIntoBuf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>fileName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n    FILE <span class=\"token operator\">*</span> q <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">,</span><span class=\"token string\">\"rb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//get file size</span>\n    <span class=\"token function\">fseek</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token constant\">SEEK_END</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>buf_size <span class=\"token operator\">=</span> <span class=\"token function\">ftell</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//create file size buf</span>\n    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>buf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span>buf_size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fseek</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token constant\">SEEK_SET</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span>buf<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>buf_size<span class=\"token punctuation\">,</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token class-name\">Compress</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Compress</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>filename<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">init</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">Compress</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>filename<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">readIntoBuf</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> i<span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>buf_size<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        hash<span class=\"token punctuation\">[</span>buf<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    h_tree <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">HuffmanTree</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">Compress</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">compressFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//create find table,key is node's data,value is node's code.</span>\n    std<span class=\"token double-colon punctuation\">::</span>unordered_map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">,</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">></span> quickTable<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>hash<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        quickTable<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span>h_tree<span class=\"token operator\">-></span>huffmanTable<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span>h_tree<span class=\"token operator\">-></span>huffmanTable<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>code<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    FILE <span class=\"token operator\">*</span>q <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.hip\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"wb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//start compress!!!</span>\n    std<span class=\"token double-colon punctuation\">::</span>string byteBuf<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> streamBuf<span class=\"token punctuation\">[</span><span class=\"token number\">1048576</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>streamBuf<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>streamBuf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> cnt<span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> i<span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>buf_size<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        byteBuf<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>quickTable<span class=\"token punctuation\">[</span>buf<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//add 0 to bytrBuf</span>\n    endBit<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>byteBuf<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">8</span><span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        byteBuf<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        endBit<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//delete buf</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>buf<span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>buf<span class=\"token punctuation\">;</span>\n        buf <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//write into stream buf.</span>\n    std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"start compress file.\"</span><span class=\"token operator\">&lt;&lt;</span>std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n    ProcessBar <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span>byteBuf<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> i<span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>byteBuf<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">+=</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        streamBuf<span class=\"token punctuation\">[</span>cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">strBinToUchar</span><span class=\"token punctuation\">(</span>byteBuf<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cnt<span class=\"token operator\">%</span><span class=\"token number\">1048576</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            cnt<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">fwrite</span><span class=\"token punctuation\">(</span>streamBuf<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>streamBuf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        bar<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cnt<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">fwrite</span><span class=\"token punctuation\">(</span>streamBuf<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>cnt<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token operator\">&lt;&lt;</span>std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"compress over!\"</span><span class=\"token operator\">&lt;&lt;</span>std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">Compress</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">decompressFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    node<span class=\"token operator\">*</span> sign <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>h_tree<span class=\"token operator\">-></span>root<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> streamBuf<span class=\"token punctuation\">[</span><span class=\"token number\">1048576</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>streamBuf<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>streamBuf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    FILE <span class=\"token operator\">*</span>q <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.hip\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"rb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    FILE <span class=\"token operator\">*</span>uq <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.unhip\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"wb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> cnt<span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n    std<span class=\"token double-colon punctuation\">::</span>string codeTxt<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> t<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">fread</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>q<span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        codeTxt<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token function\">ucharToStrBin</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>endBit<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        codeTxt<span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        endBit<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//std::cout&lt;&lt;codeTxt&lt;&lt;std::endl;</span>\n    <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"start decompress file.\"</span><span class=\"token operator\">&lt;&lt;</span>std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n    ProcessBar <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span>codeTxt<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">&amp;</span>s<span class=\"token operator\">:</span>codeTxt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">==</span><span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            sign<span class=\"token operator\">=</span>sign<span class=\"token operator\">-></span>lChild<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n            sign<span class=\"token operator\">=</span>sign<span class=\"token operator\">-></span>rChild<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sign<span class=\"token operator\">-></span>rChild<span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token operator\">&amp;&amp;</span>sign<span class=\"token operator\">-></span>lChild<span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            streamBuf<span class=\"token punctuation\">[</span>cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>sign<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span>\n            sign<span class=\"token operator\">=</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span>h_tree<span class=\"token operator\">-></span>root<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cnt<span class=\"token operator\">%</span><span class=\"token number\">1048576</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">fwrite</span><span class=\"token punctuation\">(</span>streamBuf<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span> <span class=\"token punctuation\">(</span>streamBuf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>uq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                cnt<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        bar<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cnt<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">fwrite</span><span class=\"token punctuation\">(</span>streamBuf<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>cnt<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>uq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>uq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token operator\">&lt;&lt;</span>std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"decompress over!\"</span><span class=\"token operator\">&lt;&lt;</span>std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>有关c语言的知识，可以参考如下内容</p>\n<ul>\n<li><a href=\"https://blog.csdn.net/qicheng777/article/details/75458025\">文件操作函数</a></li>\n</ul>\n<p>完整代码=&gt;<a href=\"https://github.com/zhu-jiyuan/hufffmanCompression\">github</a></p>\n<p>后续可能会优化压缩代码。逃~</p>\n",
            "tags": [
                "note"
            ]
        },
        {
            "id": "https://blog.oover.dev/CS/dataStruct/tree/patchOfTree/",
            "url": "https://blog.oover.dev/CS/dataStruct/tree/patchOfTree/",
            "title": "树与二叉树补充I",
            "date_published": "2022-09-20T11:13:07.000Z",
            "content_html": "<p>大家好，按照之前的计划，我们本应该去应用二叉树，实现一些应用的。然鹅，树与森林以及二叉树之间的关系、线索二叉树这些，没有给大家说。这可能会影响大家对之前知识的理解，所以还是补充一下。<br />\n我知道你已经迫不及待去敲代码了，学好这些理论可以<code>让你更加清晰的认识代码</code>，帮助你写出<code>更出色的代码</code>，以及<code>节省思考如何写代码的时间</code>。这是非常有必要的。<br />\n当你十分清楚流程，以及思路时，背后的代码，就像喝汤一样。</p>\n<p>好，废话不多说。紧跟上篇，我想，先介绍一下线索二叉树。再介绍树、森林、以及二叉树三者的关系。</p>\n<ol>\n<li>线索二叉树</li>\n<li>树\n<ol>\n<li>存储方式</li>\n<li>遍历</li>\n</ol>\n</li>\n<li>森林\n<ol>\n<li>遍历</li>\n</ol>\n</li>\n<li>三者之间的关系</li>\n</ol>\n<h1 id=\"线索二叉树\"><a class=\"markdownIt-Anchor\" href=\"#线索二叉树\"></a> 线索二叉树</h1>\n<p>还记得二叉树吗？二叉树中很多空指针。</p>\n<p>一个n个结点的二叉树，有2n个指针，一条边就会少一个空指针，n个结点有n-1条边，所以空指针数量为2n - (n-1) = n+1</p>\n<p>可见内存利用有些低，我们让这些有空指针的结点，如果左指针空，就让左指针指向遍历顺序的前驱，右指针空则指向遍历顺序的后继。没有前驱或者后继，指向空即可。</p>\n<p>线索二叉树图片</p>\n<p>按照遍历顺序，可以得到<code>先序、中序、后序三种线索二叉树</code>。</p>\n<p>因为无法知道结点的指针到底是指向子结点，还是前驱或者后继，所以我们需要两个标志位来表示，当前指针指向的意义。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">node</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">char</span> data<span class=\"token punctuation\">;</span>\n    node <span class=\"token operator\">*</span> lchild<span class=\"token punctuation\">;</span>\n    node <span class=\"token operator\">*</span> rchild<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">bool</span> ltag<span class=\"token punctuation\">&#123;</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">bool</span> rtag<span class=\"token punctuation\">&#123;</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> d<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>data<span class=\"token punctuation\">&#123;</span>d<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#123;</span>\n        lchild <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n        rchild <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>ltag为false代表当前lchild指向子节点，true表示指向前驱。rtag亦然。</p>\n<p>这样下来我们的利用率就大大提高了，还能方便到遍历二叉树。</p>\n<h2 id=\"线索生成\"><a class=\"markdownIt-Anchor\" href=\"#线索生成\"></a> 线索生成</h2>\n<p>我们在二叉树的基础上，来做。</p>\n<p>按照遍历的三种顺序，会有三种生成的方式。我们只需要在访问该节点时，知道它的前驱节点就好。这样很难理解。</p>\n<p>我想用代码来说明，如果实在不懂，可以参考王道考研上的线索二叉树。</p>\n<p>拿中序线索二叉树来说。</p>\n<p>例如这个树</p>\n<p><img data-src=\"https://s2.loli.net/2022/09/20/LXNDH89l2Wio5Ma.png\" alt=\"image-20220919225056910\" />{height=“300px” width=“300px”}</p>\n<p>中序遍历结果CBEGDFA</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">node<span class=\"token operator\">*</span> pre<span class=\"token operator\">=</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">toLineTree</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">*</span><span class=\"token operator\">&amp;</span> cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cur<span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">toLineTree</span><span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//指向前驱</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-></span>lchild<span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        cur<span class=\"token operator\">-></span>lchild <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">;</span>\n        cur<span class=\"token operator\">-></span>ltag<span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//指向后继</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pre<span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token operator\">&amp;&amp;</span>pre<span class=\"token operator\">-></span>rchild<span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        pre<span class=\"token operator\">-></span>rchild<span class=\"token operator\">=</span>cur<span class=\"token punctuation\">;</span>\n        pre<span class=\"token operator\">-></span>rtag<span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    pre <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">toLineTree</span><span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>先序结果ABCDEGF</p>\n<p>先序与中序不同，当前驱节点指向前驱后，因为下一个要遍历左结点，左节点指向了前驱，这样就会又回到前驱结点，形成死环。因此需要判断是否已经指向前驱，如果已经指向前驱，就跳过去。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">node<span class=\"token operator\">*</span> pre<span class=\"token operator\">=</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">toLineTree</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">*</span><span class=\"token operator\">&amp;</span> cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cur<span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n   \n    <span class=\"token comment\">//指向前驱</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-></span>lchild<span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        cur<span class=\"token operator\">-></span>lchild <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">;</span>\n        cur<span class=\"token operator\">-></span>ltag<span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//指向后继</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pre<span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token operator\">&amp;&amp;</span>pre<span class=\"token operator\">-></span>rchild<span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        pre<span class=\"token operator\">-></span>rchild<span class=\"token operator\">=</span>cur<span class=\"token punctuation\">;</span>\n        pre<span class=\"token operator\">-></span>rtag<span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    pre <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-></span>ltag<span class=\"token operator\">==</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token function\">toLineTree</span><span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">toLineTree</span><span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>后序结果CGEFDBA</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">node<span class=\"token operator\">*</span> pre<span class=\"token operator\">=</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">toLineTree</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">*</span><span class=\"token operator\">&amp;</span> cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cur<span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n   \n    <span class=\"token comment\">//指向前驱</span>\n\n    \n    <span class=\"token function\">toLineTree</span><span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">toLineTree</span><span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-></span>lchild<span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        cur<span class=\"token operator\">-></span>lchild <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">;</span>\n        cur<span class=\"token operator\">-></span>ltag<span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//指向后继</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pre<span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token operator\">&amp;&amp;</span>pre<span class=\"token operator\">-></span>rchild<span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        pre<span class=\"token operator\">-></span>rchild<span class=\"token operator\">=</span>cur<span class=\"token punctuation\">;</span>\n        pre<span class=\"token operator\">-></span>rtag<span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    pre <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>线索二叉树，先介绍这么多吧。</p>\n<hr />\n<p>下面开始介绍树。</p>\n<h1 id=\"树-森林和二叉树\"><a class=\"markdownIt-Anchor\" href=\"#树-森林和二叉树\"></a> 树、森林和二叉树</h1>\n<p>在此之前，我们需要简单介绍一下树的存储方式。</p>\n<p>偷个懒儿</p>\n<p><img data-src=\"https://s2.loli.net/2022/09/20/k2ANYyWaxbcUMmd.png\" alt=\"image-20220920220653858\" /></p>\n<p><img data-src=\"https://s2.loli.net/2022/09/20/Ou5Zf3KIa4TimEL.png\" alt=\"image-20220920220723803\" /></p>\n<p><img data-src=\"https://s2.loli.net/2022/09/20/pIwl2STkJPrLahF.png\" alt=\"image-20220920220801573\" /></p>\n<p>树为什么能转换成二叉树，树的孩子兄弟表示法，对应一棵唯一的二叉树，所以可以转换。</p>\n<p>树转二叉树</p>\n<p>按照老师例题上的树</p>\n<p>需要先转换为孩子兄弟表示，然后顺时针旋转45度。</p>\n<p><img data-src=\"https://s2.loli.net/2022/09/20/fj8iJqnGszKaFM6.png\" alt=\"image-20220920221601911\" /></p>\n<p>二叉树转换树，类似进行相反操作。</p>\n<p><img data-src=\"https://s2.loli.net/2022/09/20/Ce5uxNQqlwdhYPO.png\" alt=\"image-20220920221700534\" /></p>\n<p>森林转二叉树，只需要把森林里的树，全部转为二叉树，再连接头结点即可</p>\n<p><img data-src=\"https://s2.loli.net/2022/09/20/E7zrsvABcOn8kJg.png\" alt=\"image-20220920221814212\" /></p>\n<p>二叉树转森林</p>\n<p><img data-src=\"https://s2.loli.net/2022/09/20/DSnRYc59yFbOVMZ.png\" alt=\"image-20220920221843020\" /></p>\n<h2 id=\"遍历\"><a class=\"markdownIt-Anchor\" href=\"#遍历\"></a> 遍历</h2>\n<p><img data-src=\"https://s2.loli.net/2022/09/20/z73RXmIxUVhakrM.png\" alt=\"image-20220920223510888\" /></p>\n<p>树没有中序遍历，因为不知道那个结点是中间的。森林只有两种先和中，就是左到右，依次按照前根或者后根遍历。</p>\n<p><img data-src=\"https://s2.loli.net/2022/09/20/PIGgosyRh9HmVju.png\" alt=\"image-20220920224538474\" /></p>\n",
            "tags": [
                "note"
            ]
        },
        {
            "id": "https://blog.oover.dev/CS/dataStruct/tree/tree/",
            "url": "https://blog.oover.dev/CS/dataStruct/tree/tree/",
            "title": "树与二叉树",
            "date_published": "2022-09-19T04:24:13.000Z",
            "content_html": "<h1 id=\"树与森林\"><a class=\"markdownIt-Anchor\" href=\"#树与森林\"></a> 树与森林</h1>\n<p><img data-src=\"https://s2.loli.net/2022/09/19/zjuKDBnc6d8kTNZ.png\" alt=\"image-20220919163736434\" /></p>\n<p>这就是两棵树，暂且称左边的为<code>树A</code>,右边的为<code>树B</code>，很明显，我们调换树A的b、c的顺序，两棵树就相同了。</p>\n<p>按照这种思路，树可以分为有序树和无序树。</p>\n<ul>\n<li>树\n<ul>\n<li>有序树</li>\n<li>无序树</li>\n</ul>\n</li>\n</ul>\n<p>有序树：树A和树B不同，因为左右有次序，不能颠倒。</p>\n<p>无序树：树A和树B相同，可以颠倒次序。</p>\n<p>这就是树啦，那么森林顾名思义，就是很多的树。</p>\n<p>树A与树B共同在一起就是一个森林。</p>\n<p>森林就是这样很多<code>不相交的树组成</code>，同时仅仅一棵树也可以勉强称为森林。即便这有些勉强。。</p>\n<hr />\n<p>森林由树组成，如果我们把树研究明白了，森林就会容易很多。所以我们先研究树。</p>\n<p>在介绍下面的东西时，我们不得不引入树的一些相关术语，便于我们去进一步讨论。</p>\n<h2 id=\"术语介绍\"><a class=\"markdownIt-Anchor\" href=\"#术语介绍\"></a> 术语介绍</h2>\n<p><img data-src=\"https://s2.loli.net/2022/09/19/xy1uo64FKhNpOLj.png\" alt=\"image-20220919171417169\" />{height=“300px” width=“300px”}</p>\n<p>这棵树上的小圆圈，叫<code>结点</code>。</p>\n<p>A是B、C、D的<code>父结点</code>。B、C、D是A的<code>子结点</code>。而A没有父结点，又称为根结点。</p>\n<p>K、L这些没有子节点的，又称为<code>叶子结点</code>。</p>\n<p>还记得之前学过的离散数学吗？有个叫<code>度</code>的东西。这里我们临时先画一棵简单的树</p>\n<p><img data-src=\"https://s2.loli.net/2022/09/19/DtUOaJXk3rq8xgi.png\" alt=\"image-20220919171620732\" />{height=“250px” width=“250px”}</p>\n<p>这棵树，很像离散数学的有向图。而树中每个结点的度数，就是这里结点的<code>出度</code>。</p>\n<ul>\n<li>结点a的度数2</li>\n<li>结点c的度数0</li>\n<li>结点b的度数0</li>\n</ul>\n<p>所以树结点的度数就是[该结点连接的子结点个数]{.red}</p>\n<p>树的度就是全部结点中的最大度数。</p>\n<p>好，忘掉刚刚那个图，回到之前的图中。</p>\n<p><img data-src=\"https://s2.loli.net/2022/09/19/xy1uo64FKhNpOLj.png\" alt=\"image-20220919171417169\" />{height=“300px” width=“300px”}</p>\n<p>树的层数，就是看有几层。</p>\n<p>树的深度等于层数。这个数就是4层，深度为4.</p>\n<p>C、G这样就是一棵子树，子树的深度，就是从当前的层数往下数有多少层，C、G这个深度就是2。而D、H、M这个就是3。</p>\n<p>[重点是树的性质！]{.red}</p>\n<h2 id=\"树的性质\"><a class=\"markdownIt-Anchor\" href=\"#树的性质\"></a> 树的性质</h2>\n<p><img data-src=\"https://s2.loli.net/2022/09/19/DtUOaJXk3rq8xgi.png\" alt=\"image-20220919171620732\" />{height=“250px” width=“250px”}</p>\n<p>因为刚刚说，每个结点的度就是出度，一个出度就对应一条边。</p>\n<p>所以，度数=边数。</p>\n<p>从下往上看，每个子节点都有一个父节点，即对应一条边连接子、父结点，只有根结点没有父节点。</p>\n<p>所以，结点个数-1 = 边数</p>\n<h3 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\"></a> 总结</h3>\n<p>度数=边数=结点个数-1</p>\n<p>不妨来一个简单的小问题</p>\n<ol>\n<li>在一棵度为4的树T中，若有20个度数为4的结点，10个度为3的结点，1个度为2的结点，10个度为1的结点，则树T的叶节点个数是[]{.gap}。{.quiz}\n<ul>\n<li>41</li>\n<li>82 {.correct}</li>\n<li>113</li>\n<li>122<br />\n{.options}</li>\n</ul>\n<blockquote>\n<p>解析如下<br />\n因为边数=度数，叶子结点度数为0<br />\n所以，边数= 20x4+10x3+1x2+10x2=122，又因为，边数=结点个数-1<br />\n边数 = 20+10+1+10-1 + 叶子结点<br />\n所以，叶子结点 = 122-40 = 82</p>\n</blockquote>\n</li>\n</ol>\n<hr />\n<p>树的学习暂时告一段落，树在计算机中，并不容易表示，因此有大佬给出了二叉树，它具有唯一性，并且方便计算机操作。</p>\n<p>学了这么多，还没有见过代码，请不要失望！下面将带你走进计算机与树。</p>\n<h1 id=\"二叉树\"><a class=\"markdownIt-Anchor\" href=\"#二叉树\"></a> 二叉树</h1>\n<p><img data-src=\"https://s2.loli.net/2022/09/19/z43TM2bBVn7k6O9.png\" alt=\"image-20220919180830179\" />{height=“300px” width=“300px”}</p>\n<p>二叉树是一棵有序树，树的度为2。</p>\n<p>翻译一下</p>\n<ul>\n<li>二叉树有序</li>\n<li>每个结点的度数最大是2</li>\n</ul>\n<p>如果有三个结点，那么会有5种形状的二叉树。</p>\n<p><img data-src=\"https://s2.loli.net/2022/09/19/3HBActni5fpJg4k.png\" alt=\"image-20220919181106537\" />{height=“200px” width=“300px”}</p>\n<p>二叉树中，有两种值得我们去关注的特殊情况</p>\n<ul>\n<li>\n<p>满二叉树，除最后一层外，其余层结点度数全部为2。</p>\n</li>\n<li>\n<p>完全二叉树，按照编号顺序排列的二叉树。</p>\n</li>\n</ul>\n<p>举个栗子</p>\n<p>满二叉树</p>\n<p><img data-src=\"https://s2.loli.net/2022/09/19/Ab9iseSdIC52pBJ.png\" alt=\"image-20220919180830179\" />{height=“300px” width=“300px”}</p>\n<p>完全二叉树</p>\n<p><img data-src=\"https://s2.loli.net/2022/09/19/z43TM2bBVn7k6O9.png\" alt=\"image-20220919180830179\" />{height=“300px” width=“300px”}</p>\n<p>满二叉树不难理解，完全二叉树就是每层从左到右依次放入结点，从顶层开始。</p>\n<p><img data-src=\"https://s2.loli.net/2022/09/19/7DMOp2HcqiNQZgk.png\" alt=\"image-20220919200839322\" />{height=“300px” width=“300px”}</p>\n<p>这个就不是，第三层没有按照顺序放。</p>\n<hr />\n<p>树的性质同样适用于二叉树。那么我们根据树的性质，很容易得到二叉树的一些性质。</p>\n<h2 id=\"二叉树的性质\"><a class=\"markdownIt-Anchor\" href=\"#二叉树的性质\"></a> 二叉树的性质</h2>\n<ol>\n<li>叶子结点个数 = 度为2的结点个数+1</li>\n</ol>\n<p>​\t边数 = 结点度数 = n1 + 2xn2</p>\n<p>​\t这里n1为度数为1的结点个数，n2为度数为2的结点个数，依次类推。</p>\n<p>​\t边数 = 结点个数-1 = n0+n1+n2-1</p>\n<p>​\t所以，n0 = n2+1</p>\n<ol start=\"2\">\n<li>\n<p>第i层，最多有<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">2^{i-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.824664em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span>个结点，一个i层二叉树，最多有<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mi>i</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^{i}-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.907994em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>个结点。</p>\n<p>假设有i=3，满二叉树时，结点最多。</p>\n<p>第一层 1个</p>\n<p>第二层 2个</p>\n<p>第三层 4个</p>\n<p>第四层 8个</p>\n<p>第i层 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">2^{i-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.824664em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span> 个</p>\n<p>…</p>\n</li>\n</ol>\n<p>​\t等比数列，i层就是等比数列前n项和=<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mn>1</mn><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><msup><mi>q</mi><mi>n</mi></msup><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mi>q</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">a1(1-q^{n})/(1-q)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord\">1</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mclose\">)</span></span></span></span></p>\n<ol start=\"3\">\n<li>完全二叉树结点序号除2，结果为父节点序号。</li>\n</ol>\n<p>​\t<img data-src=\"https://s2.loli.net/2022/09/19/z43TM2bBVn7k6O9.png\" alt=\"image-20220919180830179\" />{height=“300px” width=“300px”}</p>\n<p>​\t4/2 = 2</p>\n<p>​\t5/2 = 2（地板除）</p>\n<p>​\t结点序号/2，结果都为父节点序号。</p>\n<hr />\n<p>二叉树的性质，十分简单，到现在为止，你已经知道这个二叉树的理论部分了。此后，我们将一起探索二叉树的使用，最后并制作一个简易计算器，如果时间充足，我们将利用哈夫曼编码，来实现一个压缩程序。</p>\n<h2 id=\"二叉树的存储\"><a class=\"markdownIt-Anchor\" href=\"#二叉树的存储\"></a> 二叉树的存储</h2>\n<p>就像前面所学的，二叉树也分为顺序存储、链式存储。</p>\n<h3 id=\"顺序存储\"><a class=\"markdownIt-Anchor\" href=\"#顺序存储\"></a> 顺序存储</h3>\n<p><img data-src=\"https://s2.loli.net/2022/09/19/z43TM2bBVn7k6O9.png\" alt=\"image-20220919180830179\" />{height=“300px” width=“300px”}</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>可以这样存储。</p>\n<p>如果不是这样完全二叉树，可以用一个特殊字符补成完全二叉树。</p>\n<p><img data-src=\"https://s2.loli.net/2022/09/19/xr9MZlQiavbqnC1.png\" alt=\"image-20220919201655444\" />{height=“180px” width=“180px”}</p>\n<p><img data-src=\"https://s2.loli.net/2022/09/19/J2a1zEeOnkrwYlQ.png\" alt=\"image-20220919201705283\" />{height=“180px” width=“180px”}</p>\n<p>此时就可以存储了</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>如果是这样的极端情况会很浪费空间，</p>\n<p>而链式存储可以很好的解决这个问题。</p>\n<h3 id=\"链式存储\"><a class=\"markdownIt-Anchor\" href=\"#链式存储\"></a> 链式存储</h3>\n<p>我们需要定义一个结点数据类型</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">node</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span>\n    node <span class=\"token operator\">*</span> lchild<span class=\"token punctuation\">;</span>\n    node <span class=\"token operator\">*</span> rchild<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>稍后我们会主要使用这种存储方式。</p>\n<hr />\n<p>说了这么多，还没有讲如何生成一个二叉树，对二叉树的操作也没有系统化。</p>\n<p>但是请你先不要急着写代码，了解完二叉树的遍历，这些东西将迎刃而解。</p>\n<h2 id=\"二叉树的遍历\"><a class=\"markdownIt-Anchor\" href=\"#二叉树的遍历\"></a> 二叉树的遍历</h2>\n<p>二叉树的遍历，通常采用递归进行操作，这里主要讲述递归操作，了解完这些主要操作，我知道，你肯定觉得很没意思，到时候将介绍其他遍历方式。如果你以前不知道，将会令你大开眼界。</p>\n<p>那么先让我们学习一下三个最常见的遍历操作。</p>\n<ol>\n<li>先序遍历</li>\n<li>中序遍历</li>\n<li>后序遍历</li>\n</ol>\n<p>在这里，我不得不放出来一张生动形象的图片，供大家参考。</p>\n<p><img data-src=\"https://s2.loli.net/2022/09/19/dtplzwjrPnHSW5B.png\" alt=\"image-20220919203316683\" />{height=“300px” width=“300px”}</p>\n<p>我们使用的递归遍历，每个结点，会经历三次，而先、中、后，三种顺序，分别对应这三次时间段。</p>\n<p>所以，先序就是第一次经过的时候访问该结点，中序是第二次经过的时候，后续是第三次经过的时候。</p>\n<p>接下来，我将按照此树，给出代码以及运行结果。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//此数的结点</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">node</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span>\n    node <span class=\"token operator\">*</span> lchild<span class=\"token punctuation\">;</span>\n    node <span class=\"token operator\">*</span> rchild<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"先序遍历\"><a class=\"markdownIt-Anchor\" href=\"#先序遍历\"></a> 先序遍历</h3>\n<p>按照第一次经过结点就访问，如图所示的路线经过，依次是<code>根--左--右</code></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">foreachPreOrder</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">*</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tree<span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span>tree<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">foreachPreOrder</span><span class=\"token punctuation\">(</span>tree<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">foreachPreOrder</span><span class=\"token punctuation\">(</span>tree<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>结果=&gt;ABDEFGC</p>\n<h3 id=\"中序遍历\"><a class=\"markdownIt-Anchor\" href=\"#中序遍历\"></a> 中序遍历</h3>\n<p>按照第二次经过结点就访问，如图所示的路线经过，依次是<code>左--根--右</code></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">foreachInOrder</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">*</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tree<span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">foreachInOrder</span><span class=\"token punctuation\">(</span>tree<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span>tree<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">foreachInOrder</span><span class=\"token punctuation\">(</span>tree<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>结果=&gt;DBFEGAC</p>\n<h3 id=\"后序遍历\"><a class=\"markdownIt-Anchor\" href=\"#后序遍历\"></a> 后序遍历</h3>\n<p>按照第三次经过结点就访问，如图所示的路线经过，依次是<code>左--右--根</code></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">foreachPostOrder</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">*</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tree<span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">foreachPostOrder</span><span class=\"token punctuation\">(</span>tree<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">foreachPostOrder</span><span class=\"token punctuation\">(</span>tree<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span>tree<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>结果=&gt;DFGEBCA</p>\n<hr />\n<p>应该不难理解这里的遍历过程。接下来，我们将介绍另一种遍历方式。</p>\n<h3 id=\"层遍历\"><a class=\"markdownIt-Anchor\" href=\"#层遍历\"></a> 层遍历</h3>\n<p><img data-src=\"https://s2.loli.net/2022/09/19/dtplzwjrPnHSW5B.png\" alt=\"image-20220919203316683\" />{height=“300px” width=“300px”}</p>\n<p>逐层进行遍历。这更直观。</p>\n<p>结果=&gt; ABCDEFG。这用大脑太容易写出来了，只需要从第一层到最后一层，每层从左到右排列就可以得到。</p>\n<p>那么，我们如何通过计算机进行这样的遍历呢？</p>\n<p>上面的递归，其实就是用的栈，这里我们采用队列即可实现这样的效果。</p>\n<p>我们先建立一个队列Q。放入tree根结点。</p>\n<p>此时Q=[A]</p>\n<p>把队首元素的左右结点放入Q=[A,B,C]</p>\n<p>再让队首出队Q=[B,C]，result=A</p>\n<p>把队首元素的左右结点放入Q=[B,C,D,E]</p>\n<p>再让队首出队Q=[C,D,E],result=AB</p>\n<p>…依次进行直到Q=[]</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">foreachFloor</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">*</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    queue<span class=\"token operator\">&lt;</span>node<span class=\"token operator\">*</span><span class=\"token operator\">></span> q<span class=\"token punctuation\">;</span>\n    q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        node<span class=\"token operator\">*</span> top <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>top<span class=\"token operator\">-></span>lchild<span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>top<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>top<span class=\"token operator\">-></span>rchild<span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>top<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cout<span class=\"token operator\">&lt;&lt;</span>top<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span>\n        q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>栈和队列，真是让人猝不及防。但不得不说妙啊！</p>\n<hr />\n<p>二叉树的遍历，到这已经说完，然而，二叉树的生成，复制，删除，这些操作，还没讲。接下来，就是这些操作了，学习这些操作前，请务必理清楚<code>遍历</code>。</p>\n<p>由于操作涉及到二叉树的生成，为了让大家更清晰，这里必须要补充一点，遍历结果与二叉树的关系。</p>\n<h2 id=\"遍历结果确定二叉树\"><a class=\"markdownIt-Anchor\" href=\"#遍历结果确定二叉树\"></a> 遍历结果确定二叉树</h2>\n<p>先说结论。</p>\n<ul>\n<li>先序+中序，可以确定二叉树</li>\n<li>后续+中序，可以确定二叉树</li>\n</ul>\n<p>为啥先序+后序不能确定二叉树？我们先将为啥前两种为啥可以确定二叉树</p>\n<p>根据上面的遍历结果</p>\n<p>先序=&gt;ABDEFGC</p>\n<p>中序=&gt;DBFEGAC</p>\n<p>先序中可以看出A为根结点</p>\n<p>那么在中序,DBFEG<code>A</code>C，A的左边为左子树，右边为右子树。</p>\n<p><img data-src=\"https://s2.loli.net/2022/09/20/JZrOpeV6hndyqPW.png\" alt=\"image-20220919212722920\" />{height=“300px” width=“300px”}</p>\n<p>再看D<code>B</code>FEG在先序中，B在前面，B的左边是左子树，右边是右子树。</p>\n<p><img data-src=\"https://s2.loli.net/2022/09/20/wZ4HhSRQ2F8xcpJ.png\" alt=\"image-20220919212734273\" />{height=“300px” width=“300px”}</p>\n<p>依次类推，就可以得到一个确定二叉树</p>\n<hr />\n<p>后序+中序同理</p>\n<p>后序=&gt;DFGEBCA</p>\n<p>中序=&gt;DBFEGAC</p>\n<p>由后序可知A为根节点。</p>\n<p>先序中可以看出A为根结点</p>\n<p>那么在中序,DBFEG<code>A</code>C，A的左边为左子树，右边为右子树。</p>\n<p>D<code>B</code>FEG中B在后序排列最靠后，所以B为分界点…</p>\n<hr />\n<p>看懂上面的，可以试一下，如果依靠先序+后续推出二叉树，没办法推出来。</p>\n<h2 id=\"二叉树的操作\"><a class=\"markdownIt-Anchor\" href=\"#二叉树的操作\"></a> 二叉树的操作</h2>\n<h3 id=\"生成\"><a class=\"markdownIt-Anchor\" href=\"#生成\"></a> 生成</h3>\n<p>我们可以根据前面的遍历来生成特定形状的二叉树。</p>\n<p>只需要填充空结点，补成完全二叉树。即可。</p>\n<p>例如，我们可以用顺序存储的方式将数据转换成二叉树。</p>\n<p>我想介绍递归+先序，来生成树。</p>\n<p>例如我们想生成这棵树。</p>\n<p><img data-src=\"https://s2.loli.net/2022/09/20/LXNDH89l2Wio5Ma.png\" alt=\"image-20220919225056910\" />{height=“300px” width=“300px”}</p>\n<p>需要先写出来先序，注意空结点用#或者特殊符号表示。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//先序 string expression = \"ABC##DE#G##F##\"</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">node</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">char</span> data<span class=\"token punctuation\">;</span>\n    node <span class=\"token operator\">*</span> lchild<span class=\"token punctuation\">;</span>\n    node <span class=\"token operator\">*</span> rchild<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> d<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>data<span class=\"token punctuation\">&#123;</span>d<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#123;</span>\n        lchild <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n        rchild <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nstring expression <span class=\"token operator\">=</span> <span class=\"token string\">\"ABC##DE#G##F##\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> cnt<span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">createTree</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">*</span><span class=\"token operator\">&amp;</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cnt<span class=\"token operator\">==</span>expression<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>expression<span class=\"token punctuation\">[</span>cnt<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token char\">'#'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n        tree <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">node</span><span class=\"token punctuation\">(</span>expression<span class=\"token punctuation\">[</span>cnt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">createTree</span><span class=\"token punctuation\">(</span>tree<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">createTree</span><span class=\"token punctuation\">(</span>tree<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"删除二叉树\"><a class=\"markdownIt-Anchor\" href=\"#删除二叉树\"></a> 删除二叉树</h3>\n<p>在最后经过这个结点，也就是第三次经过时，delete掉，并且让指针指向nullptr。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">clean</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">*</span> <span class=\"token operator\">&amp;</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tree<span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">clean</span><span class=\"token punctuation\">(</span>tree<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">clean</span><span class=\"token punctuation\">(</span>tree<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">delete</span> tree<span class=\"token punctuation\">;</span>\n    tree <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"复制\"><a class=\"markdownIt-Anchor\" href=\"#复制\"></a> 复制</h3>\n<p>先序复制，类似于生成。要比生成简单很多。</p>\n<p>第一次经过这个节点时，进行复制操作。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">*</span><span class=\"token operator\">&amp;</span> tree<span class=\"token punctuation\">,</span>node<span class=\"token operator\">*</span><span class=\"token operator\">&amp;</span>viceTree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tree<span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    viceTree <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">node</span><span class=\"token punctuation\">(</span>tree<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>tree<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">,</span>viceTree<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>tree<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">,</span>viceTree<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//主函数</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n    node <span class=\"token operator\">*</span>root<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">createTree</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">foreachPreOrder</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    node <span class=\"token operator\">*</span>viceRoot<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span>viceRoot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">clean</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//foreachFloor(root);</span>\n    cout<span class=\"token operator\">&lt;&lt;</span>viceRoot<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">foreachFloor</span><span class=\"token punctuation\">(</span>viceRoot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在这里，给出copy以及clean的结果图。</p>\n<p><img data-src=\"https://s2.loli.net/2022/09/20/5FUDOQfnERy4TjK.png\" alt=\"image-20220920103448252\" />{height=“300px” width=“450px”}</p>\n<p>可以看到root树已经没有了，而viceroot树是复制的，仍然存在。</p>\n<hr />\n<p>到这里，我们已经完成了二叉树的基本操作，但我们不得不继续探索，仅仅这些只能让我们能够了解二叉树的操作与构成，远不能解决实际问题。下面我们将做一些实例应用二叉树。</p>\n<p>在此之前，我们还需补充几个有意思的操作，让二叉树的操作熟练于心。</p>\n<ul>\n<li>二叉树的深度计算</li>\n<li>二叉树叶子结点数</li>\n</ul>\n<p>大家可以发现，二叉树的操作基本都与遍历有关，所以，请大家一定要熟悉遍历的三种方式，以及遍历一笔图。在这里，不得不再次引用遍历图，来加强大家的印象。</p>\n<p><img data-src=\"https://s2.loli.net/2022/09/19/dtplzwjrPnHSW5B.png\" alt=\"image-20220919203316683\" />{height=“300px” width=“300px”}</p>\n<h3 id=\"计算二叉树深度\"><a class=\"markdownIt-Anchor\" href=\"#计算二叉树深度\"></a> 计算二叉树深度</h3>\n<p>还拿这个图来说</p>\n<p><img data-src=\"https://s2.loli.net/2022/09/20/LXNDH89l2Wio5Ma.png\" alt=\"image-20220919225056910\" />{height=“300px” width=“300px”}</p>\n<p>用大脑很容易计算出，深度为5。那么计算机应该怎么得到这个呢。</p>\n<p>一个办法是，后序遍历，就是从最左边的最小面开始。统计左右子树的深度。</p>\n<p>这个栗子。</p>\n<p>C的左子树深度为0，右子树深度为0，C的深度就是两者最大的+1 = 1。</p>\n<p>按照后序遍历，需要到第三次路过时，才会进行统计操作。</p>\n<p>统计D时，应该先统计E,F。</p>\n<p>统计E时，应该先统计G。</p>\n<p>G的左子树深度为0，右子树深度为0，G的深度就是两者最大的+1 = 1。</p>\n<p>E的左子树深度为0，右子树深度为1，E的深度就是两者最大的+1 = 2。</p>\n<p>同C、G，F的深度为1。</p>\n<p>D的左子树深度为2，右子树深度为1，D的深度就是两者最大的+1 = 3。</p>\n<p>B的左子树深度为1，右子树深度为3，B的深度就是两者最大的+1 = 4。</p>\n<p>A的左子树深度为4，右子树深度为0，A的深度就是两者最大的+1 = 5。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">countDeepth</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">*</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tree<span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> lDeepth <span class=\"token operator\">=</span> <span class=\"token function\">countDeepth</span><span class=\"token punctuation\">(</span>tree<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> rDeepth <span class=\"token operator\">=</span> <span class=\"token function\">countDeepth</span><span class=\"token punctuation\">(</span>tree<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>lDeepth<span class=\"token punctuation\">,</span>rDeepth<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"二叉树叶子结点数\"><a class=\"markdownIt-Anchor\" href=\"#二叉树叶子结点数\"></a> 二叉树叶子结点数</h3>\n<p>叶子结点的判断是左子树和右子树都是空的，只需要遍历经过结点时，判断左子树和右子树是否为空，如果是叶子结点就返回1。</p>\n<p>先序遍历</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">countLeaf</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">*</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tree<span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tree<span class=\"token operator\">-></span>rchild<span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token operator\">&amp;&amp;</span>tree<span class=\"token operator\">-></span>lchild<span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">countLeaf</span><span class=\"token punctuation\">(</span>tree<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span> <span class=\"token function\">countLeaf</span><span class=\"token punctuation\">(</span>tree<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>后序遍历</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">countLeaf</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">*</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tree<span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> <span class=\"token function\">countLeaf</span><span class=\"token punctuation\">(</span>tree<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> <span class=\"token function\">countLeaf</span><span class=\"token punctuation\">(</span>tree<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tree<span class=\"token operator\">-></span>rchild<span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token operator\">&amp;&amp;</span>tree<span class=\"token operator\">-></span>lchild<span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> l<span class=\"token operator\">+</span>r<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>中序遍历</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">countLeaf</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">*</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tree<span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> <span class=\"token function\">countLeaf</span><span class=\"token punctuation\">(</span>tree<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tree<span class=\"token operator\">-></span>rchild<span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token operator\">&amp;&amp;</span>tree<span class=\"token operator\">-></span>lchild<span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> <span class=\"token function\">countLeaf</span><span class=\"token punctuation\">(</span>tree<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> l<span class=\"token operator\">+</span>r<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<hr />\n<p>ok，到这里二叉树的基本操作介绍完毕。大家有兴趣可以去查阅一些其他资料。接下来，将会介绍一些二叉树的应用。二叉搜索、哈夫曼编码等等，这些应用在日常中无处不在，值得我们去学习怎么样使用。</p>\n<p>理论必须结合实践，要不然就是空谈了，希望大家把重心放在实践上。</p>\n<h1 id=\"引用\"><a class=\"markdownIt-Anchor\" href=\"#引用\"></a> 引用</h1>\n<ul>\n<li><a href=\"https://www.bilibili.com/video/BV1nJ411V7bd\">b站青岛大学-王卓老师</a></li>\n<li>CPP primer</li>\n</ul>\n<h1 id=\"完整代码\"><a class=\"markdownIt-Anchor\" href=\"#完整代码\"></a> 完整代码</h1>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;queue></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">node</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">char</span> data<span class=\"token punctuation\">;</span>\n    node <span class=\"token operator\">*</span> lchild<span class=\"token punctuation\">;</span>\n    node <span class=\"token operator\">*</span> rchild<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> d<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>data<span class=\"token punctuation\">&#123;</span>d<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#123;</span>\n        lchild <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n        rchild <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">foreachPreOrder</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">*</span><span class=\"token operator\">&amp;</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tree<span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span>tree<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">foreachPreOrder</span><span class=\"token punctuation\">(</span>tree<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">foreachPreOrder</span><span class=\"token punctuation\">(</span>tree<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">foreachFloor</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">*</span><span class=\"token operator\">&amp;</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    queue<span class=\"token operator\">&lt;</span>node<span class=\"token operator\">*</span><span class=\"token operator\">></span> q<span class=\"token punctuation\">;</span>\n    q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        node<span class=\"token operator\">*</span> top <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>top<span class=\"token operator\">-></span>lchild<span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>top<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>top<span class=\"token operator\">-></span>rchild<span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>top<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cout<span class=\"token operator\">&lt;&lt;</span>top<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span>\n        q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nstring expression <span class=\"token operator\">=</span> <span class=\"token string\">\"ABC##DE#G##F##\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> cnt<span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">createTree</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">*</span><span class=\"token operator\">&amp;</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cnt<span class=\"token operator\">==</span>expression<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>expression<span class=\"token punctuation\">[</span>cnt<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token char\">'#'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n        tree <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">node</span><span class=\"token punctuation\">(</span>expression<span class=\"token punctuation\">[</span>cnt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">createTree</span><span class=\"token punctuation\">(</span>tree<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">createTree</span><span class=\"token punctuation\">(</span>tree<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">clean</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">*</span> <span class=\"token operator\">&amp;</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tree<span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">clean</span><span class=\"token punctuation\">(</span>tree<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">clean</span><span class=\"token punctuation\">(</span>tree<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">delete</span> tree<span class=\"token punctuation\">;</span>\n    tree <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">*</span><span class=\"token operator\">&amp;</span> tree<span class=\"token punctuation\">,</span>node<span class=\"token operator\">*</span><span class=\"token operator\">&amp;</span>viceTree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tree<span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    viceTree <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">node</span><span class=\"token punctuation\">(</span>tree<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>tree<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">,</span>viceTree<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>tree<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">,</span>viceTree<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">countDeepth</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">*</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tree<span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> lDeepth <span class=\"token operator\">=</span> <span class=\"token function\">countDeepth</span><span class=\"token punctuation\">(</span>tree<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> rDeepth <span class=\"token operator\">=</span> <span class=\"token function\">countDeepth</span><span class=\"token punctuation\">(</span>tree<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>lDeepth<span class=\"token punctuation\">,</span>rDeepth<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">countLeaf</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">*</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tree<span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> <span class=\"token function\">countLeaf</span><span class=\"token punctuation\">(</span>tree<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tree<span class=\"token operator\">-></span>rchild<span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token operator\">&amp;&amp;</span>tree<span class=\"token operator\">-></span>lchild<span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> <span class=\"token function\">countLeaf</span><span class=\"token punctuation\">(</span>tree<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> l<span class=\"token operator\">+</span>r<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n    node <span class=\"token operator\">*</span>root<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">createTree</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    cout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">countLeaf</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n",
            "tags": [
                "note"
            ]
        },
        {
            "id": "https://blog.oover.dev/CS/dataStruct/stringAndKMP/",
            "url": "https://blog.oover.dev/CS/dataStruct/stringAndKMP/",
            "title": "字符串匹配",
            "date_published": "2022-08-29T14:40:35.000Z",
            "content_html": "<h1 id=\"子串匹配问题\"><a class=\"markdownIt-Anchor\" href=\"#子串匹配问题\"></a> 子串匹配问题</h1>\n<p>子串匹配又叫模式串匹配</p>\n<p>例如 <code>ab</code> 是 <code>sdabc</code>的子串，<code>ab</code>又称为模式串，<code>sdabc</code>又成为主串。</p>\n<p>怎么样判断一个字符串是另一个字符串的子串，在文档中的查找、匹配等待都会用到。</p>\n<h2 id=\"bf\"><a class=\"markdownIt-Anchor\" href=\"#bf\"></a> BF</h2>\n<p>利用滑动窗口，一步一步与主串进行比较，不对，让主串后移一位，重新与模式串进行比较。直到模式串完全匹配</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">bf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> patten<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>patten<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> patten<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>patten<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span>str<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">==</span>patten<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>时间复杂度O(mn)</p>\n<h2 id=\"kmp\"><a class=\"markdownIt-Anchor\" href=\"#kmp\"></a> KMP</h2>\n<p>可以先看，维基百科中的介绍</p>\n<p>这里代码实现主要难在next数组求解上，这里引用一下b站的一张图片，来解释next数组求解第二种情况，有时间可以看一下up的视频。</p>\n<p><img data-src=\"https://s2.loli.net/2022/08/30/oswj4h1KYORkaBr.png\" alt=\"image-20220830170135048\" /></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n\n\n<span class=\"token comment\">/*next 中数字的含义\n* -1 当前与匹配字符串，不同，需要匹配的主串移动，再与模式串重新比\n* other 让j回到 other 处，再与主串进行比对。\n* \n*/</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">getNext</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> pattern<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> next<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//字符串多长，next数组就多长，</span>\n    next<span class=\"token punctuation\">.</span><span class=\"token function\">reserve</span><span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//因为一个next肯定是-1，所以将j=-1，i=0</span>\n    <span class=\"token comment\">//i代表模式串中当前所要计算next的位置</span>\n    <span class=\"token comment\">//j代表最大的前缀尾</span>\n    <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">&#123;</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    next<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/* \n    * 举例说明\n    * 当计算next[4]时，如果pattern[3]与next[3]的最大前后缀最后面的下一个字符相同，那么next[4] = next[3]+1\n    * 如果不相等，而next[i]含义就是找到以pattern[i-1]结尾的最大前后缀，所以比较pattern中 i与next[j]的值\n    * loop\n    */</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span>pattern<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">||</span>pattern<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>pattern<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            next<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n            j <span class=\"token operator\">=</span> next<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">return</span> next<span class=\"token punctuation\">;</span>\n\n\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//返回result</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">result</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">bool</span> res<span class=\"token punctuation\">&#123;</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">&#123;</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">result</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\nresult <span class=\"token function\">isSubstring</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> pattern<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    result res<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">>=</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> next <span class=\"token operator\">=</span> <span class=\"token function\">getNext</span><span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>pattern<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n            j <span class=\"token operator\">=</span> next<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">==</span>pattern<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            res<span class=\"token punctuation\">.</span>res <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            res<span class=\"token punctuation\">.</span>index <span class=\"token operator\">=</span> i<span class=\"token operator\">-</span>j<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        \n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    string pattern <span class=\"token operator\">=</span> <span class=\"token string\">\"abaabcaba\"</span><span class=\"token punctuation\">;</span>\n\n\n\n    string s <span class=\"token operator\">=</span> <span class=\"token string\">\"bcabsd\"</span><span class=\"token punctuation\">;</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> ans <span class=\"token operator\">=</span> <span class=\"token function\">getNext</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>a<span class=\"token operator\">:</span> ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        cout<span class=\"token operator\">&lt;&lt;</span>a<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    result res <span class=\"token operator\">=</span> <span class=\"token function\">isSubstring</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> pattern<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        cout<span class=\"token operator\">&lt;&lt;</span> res<span class=\"token punctuation\">.</span>index<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"reference\"><a class=\"markdownIt-Anchor\" href=\"#reference\"></a> Reference</h3>\n<ol>\n<li>\n<p><a href=\"https://www.bilibili.com/video/BV16X4y137qw\">b站next求解</a></p>\n</li>\n<li>\n<p><a href=\"https://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html\">字符串匹配的KMP算法(阮一峰)</a></p>\n</li>\n<li>\n<p><a href=\"https://zh.m.wikipedia.org/zh-sg/KMP%E7%AE%97%E6%B3%95\">KMP维基百科</a></p>\n</li>\n</ol>\n",
            "tags": [
                "note"
            ]
        },
        {
            "id": "https://blog.oover.dev/CS/dataStruct/stackQueueArray/",
            "url": "https://blog.oover.dev/CS/dataStruct/stackQueueArray/",
            "title": "栈、队列和数组",
            "date_published": "2022-08-25T15:11:11.000Z",
            "content_html": "<h1 id=\"stack\"><a class=\"markdownIt-Anchor\" href=\"#stack\"></a> stack</h1>\n<h2 id=\"顺序栈\"><a class=\"markdownIt-Anchor\" href=\"#顺序栈\"></a> 顺序栈</h2>\n<p>利用数组，进行栈的操作</p>\n<p>（待补充</p>\n<h2 id=\"链式栈\"><a class=\"markdownIt-Anchor\" href=\"#链式栈\"></a> 链式栈</h2>\n<p>利用链表，进行栈的操作，基本不用担心栈溢出。但是需要手动释放结点内存。</p>\n<p>这里用进栈用头插法。</p>\n<p>（待补充</p>\n<h1 id=\"queue\"><a class=\"markdownIt-Anchor\" href=\"#queue\"></a> queue</h1>\n<h2 id=\"顺序队列\"><a class=\"markdownIt-Anchor\" href=\"#顺序队列\"></a> 顺序队列</h2>\n<p>使用数组实现，有假溢出的情况，空间利用率低。</p>\n<h2 id=\"循环队列\"><a class=\"markdownIt-Anchor\" href=\"#循环队列\"></a> 循环队列</h2>\n<p>解决了假溢出，空出一个空间判断队列是否已满。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">queue</span><span class=\"token punctuation\">&#123;</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>q<span class=\"token punctuation\">,</span>qSize<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//尾指针，头指针</span>\n    <span class=\"token keyword\">int</span> top<span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>end<span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">//初始化队列长度</span>\n    <span class=\"token function\">queue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> qSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>qSize <span class=\"token operator\">=</span> qSize<span class=\"token punctuation\">;</span>\n        q <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>qSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> q<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Empty queue\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> q<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        top<span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>top<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>qSize<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isOversize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Oh! my size is max.\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        q<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n        end <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>end<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>qSize<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> top<span class=\"token operator\">==</span>end<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//end+1是否等于top</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">isOversize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>end<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>qSize<span class=\"token operator\">==</span>top<span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    queue <span class=\"token function\">myQueue</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">//5个存储空间最多只能放4个数，所以会overSize提醒</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        myQueue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    cout<span class=\"token operator\">&lt;&lt;</span>myQueue<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    myQueue<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span>myQueue<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    myQueue<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span>myQueue<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    myQueue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">521</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    myQueue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">1314</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span>myQueue<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    myQueue<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span>myQueue<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    myQueue<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span>myQueue<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    myQueue<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span>myQueue<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"链队\"><a class=\"markdownIt-Anchor\" href=\"#链队\"></a> 链队</h2>\n<p>用链表实现队列，不用担心队列长度是否已满。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">node</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    node<span class=\"token operator\">*</span> next <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">val</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">,</span>node<span class=\"token operator\">*</span> next<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">val</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">queue</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    node <span class=\"token operator\">*</span> head <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> node<span class=\"token punctuation\">;</span>\n    node<span class=\"token operator\">*</span> front <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n    node<span class=\"token operator\">*</span> end <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">queue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        node <span class=\"token operator\">*</span> temp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">node</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        end<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n        end <span class=\"token operator\">=</span> end<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">//\t只需front的next只需下一个的下一个</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            clog<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"Empty queue\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        node<span class=\"token operator\">*</span> t <span class=\"token operator\">=</span> front<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n        front<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> t<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//如果只有一个结点，要把end=front</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">==</span>end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            end <span class=\"token operator\">=</span> front<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">delete</span> t<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            clog<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"Empty queue\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> front<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>val<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> front<span class=\"token operator\">==</span>end<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        node<span class=\"token operator\">*</span> t <span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>front<span class=\"token operator\">-></span>next<span class=\"token operator\">!=</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            t <span class=\"token operator\">=</span> front<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n            front<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> t<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">delete</span> t<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        end <span class=\"token operator\">=</span> front<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    queue me<span class=\"token punctuation\">;</span>\n    \n    me<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    me<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">1213</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    me<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">429</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span>me<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    me<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span>me<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    me<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">1213</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    me<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">429</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    me<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">1213</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    me<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">429</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    me<span class=\"token punctuation\">.</span><span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    me<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span>me<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n",
            "tags": [
                "note"
            ]
        },
        {
            "id": "https://blog.oover.dev/learning/git-learning/",
            "url": "https://blog.oover.dev/learning/git-learning/",
            "title": "学习Git",
            "date_published": "2022-05-12T09:51:20.000Z",
            "content_html": "<p>最近也是产出高峰期耶~</p>\n<p>咱的电脑是一个对于<strong>物理学</strong>学生十分够用<s>拉跨</s>的笔电。</p>\n<p>在我大二下学期，平时从不耍脾气的它，硬盘坏了，咱的代码自然是未能渡劫。</p>\n<img data-src=\"https://cdn.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/image-20220512180313240.png\" alt=\"image-20220512180313240\" style=\"zoom: 8%;\" />\n<p>有了上次教训之后嘞，时隔3个月，好吧，半年。终于开始学一手Git，来解决一下这个问题了。</p>\n<p>下面的内容是看的git官网下的book。</p>\n<hr />\n<h2 id=\"\"><a class=\"markdownIt-Anchor\" href=\"#\"></a> </h2>\n<h1 id=\"为什么学习git\"><a class=\"markdownIt-Anchor\" href=\"#为什么学习git\"></a> 为什么学习Git</h1>\n<p>Git就是用来解决版本控制，和避免像我刚刚那样，硬盘坏了，再也回不去了。</p>\n<p>传统的版本控制，把东西上传到一台机器上面，所有人通过SSH登取出来就好，但是可能会出现咱电脑的硬盘耍小脾气的情况。</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/image-20220512181105529.png\" alt=\"传统的版本控制\" /></p>\n<p>Git是分布式的版本控制。就是说，服务器宕机了，在任何一个fork的主机上都可恢复数据。好耶~</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/image-20220512181358000.png\" alt=\"分布式的版本控制\" /></p>\n<h1 id=\"git的工作流程\"><a class=\"markdownIt-Anchor\" href=\"#git的工作流程\"></a> git的工作流程</h1>\n<p>流程官网写的实在太好了！落泪~<s>忍不住copy</s></p>\n<p>git有三种状态 <strong>已提交（committed）</strong>、<strong>已修改（modified）</strong> 和 <strong>已暂存（staged）</strong>。</p>\n<ul>\n<li>已修改表示修改了文件，但还没保存到数据库中。</li>\n<li>已暂存表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。</li>\n<li>已提交表示数据已经安全地保存在本地数据库中。</li>\n</ul>\n<p>这会让我们的 Git 项目拥有三个阶段：工作区、暂存区以及 Git 目录。</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/image-20220512184737778.png\" alt=\"image-20220512184737778\" /></p>\n<p>工作区是对项目的某个版本独立提取出来的内容。 这些从 Git 仓库的压缩数据库中提取出来的文件，放在磁盘上供你使用或修改。</p>\n<p>暂存区是一个文件，保存了下次将要提交的文件列表信息，一般在 Git 仓库目录中。 按照 Git 的术语叫做“索引”，不过一般说法还是叫“暂存区”。</p>\n<p>Git 仓库目录是 Git 用来保存项目的元数据和对象数据库的地方。 这是 Git 中最重要的部分，从其它计算机克隆仓库时，复制的就是这里的数据。</p>\n<p>基本的 Git 工作流程如下：</p>\n<ol>\n<li>在工作区中修改文件。</li>\n<li>将你想要下次提交的更改选择性地暂存，这样只会将更改的部分添加到暂存区。</li>\n<li>提交更新，找到暂存区的文件，将快照永久性存储到 Git 目录。</li>\n</ol>\n<p>如果 Git 目录中保存着特定版本的文件，就属于 <strong>已提交</strong> 状态。 如果文件已修改并放入暂存区，就属于 <strong>已暂存</strong> 状态。 如果自上次检出后，作了修改但还没有放到暂存区域，就是 <strong>已修改</strong> 状态。</p>\n<h2 id=\"版本控制快照的创建\"><a class=\"markdownIt-Anchor\" href=\"#版本控制快照的创建\"></a> 版本控制快照的创建</h2>\n<blockquote>\n<p>快照可以理解为简单的备份</p>\n</blockquote>\n<p>有些版本是这样储存的</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/image-20220512183249206.png\" alt=\"image-20220512183249206\" /></p>\n<p>Git是这样的</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/image-20220512183441894.png\" alt=\"image-20220512183441894\" /></p>\n<p>不管文件改变没，都会在快照中备份，但是为了效率，如果文件没改变，git会备份一个指向源文件的指针。</p>\n<h2 id=\"全部本地化\"><a class=\"markdownIt-Anchor\" href=\"#全部本地化\"></a> 全部本地化</h2>\n<p>git拉取的是全部的镜像，所以当咱想要查看某个版本的文件时，在本地查看就好啦~</p>\n<h2 id=\"校验\"><a class=\"markdownIt-Anchor\" href=\"#校验\"></a> 校验</h2>\n<p>git会在存储数据前，对所有的文件进行sha-1的hash转换，git的索引就是这个hash值，o（1）的时间复杂度查找哦~</p>\n<p>这个校验，也会让文件即使发生一个空格的变化，也会被记录下来。好耶~</p>\n<h1 id=\"配置git\"><a class=\"markdownIt-Anchor\" href=\"#配置git\"></a> 配置git</h1>\n<p>git会记录每个用户的上传等信息，因此，需要配置信息。</p>\n<p>正如官网所说</p>\n<blockquote>\n<p>安装完 Git 之后，要做的第一件事就是设置你的用户名和邮件地址。 这一点很重要，因为每一个 Git 提交都会使用这些信息，它们会写入到你的每一次提交中，不可更改</p>\n</blockquote>\n<h2 id=\"用户信息\"><a class=\"markdownIt-Anchor\" href=\"#用户信息\"></a> 用户信息</h2>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> user.name <span class=\"token string\">\"zhu-jiyuan\"</span>\n<span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> user.email <span class=\"token number\">848433033</span>@qq.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>–global表示的是全局配置。</p>\n<p>咱可以用下面的命令，来看配置在哪</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config <span class=\"token parameter variable\">--list</span> --show-origin<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/image-20220512205411242.png\" alt=\"image-20220512205411242\" /></p>\n<p>列出全部的配置列表（包含全局和局部</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config <span class=\"token parameter variable\">--list</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>官网中提示道：你可能会看到重复的变量名，因为 Git 会从不同的文件中读取同一个配置（例如：<code>/etc/gitconfig</code> 与 <code>~/.gitconfig</code>）。 这种情况下，Git 会使用它找到的每一个变量的最后一个配置。</p>\n<p>你可以通过输入 <code>git config &lt;key&gt;</code>： 来检查 Git 的某一项配置</p>\n<pre class=\"line-numbers language-console\" data-language=\"console\"><code class=\"language-console\">$ git config user.name\nJohn Doe<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<table>\n<thead>\n<tr>\n<th>Note</th>\n<th>由于 Git 会从多个文件中读取同一配置变量的不同值，因此你可能会在其中看到意料之外的值而不知道为什么。 此时，你可以查询 Git 中该变量的 <strong>原始</strong> 值，它会告诉你哪一个配置文件最后设置了该值：<code>$ git config --show-origin rerere.autoUpdate file:/home/johndoe/.gitconfig\tfalse</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"获取帮助\"><a class=\"markdownIt-Anchor\" href=\"#获取帮助\"></a> 获取帮助</h1>\n<p>若你使用 Git 时需要获取帮助，有三种等价的方法可以找到 Git 命令的综合手册（manpage）：</p>\n<pre class=\"line-numbers language-console\" data-language=\"console\"><code class=\"language-console\">$ git help &lt;verb&gt;\n$ git &lt;verb&gt; --help\n$ man git-&lt;verb&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>例如，要想获得 <code>git config</code> 命令的手册，执行</p>\n<pre class=\"line-numbers language-console\" data-language=\"console\"><code class=\"language-console\">$ git help config<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这些命令很棒，因为你随时随地可以使用而无需联网。 如果你觉得手册或者本书的内容还不够用，你可以尝试在 Freenode IRC 服务器 <a href=\"https://freenode.net/\">https://freenode.net</a> 上的 <code>#git</code> 或 <code>#github</code> 频道寻求帮助。 这些频道经常有上百人在线，他们都精通 Git 并且乐于助人。</p>\n<p>此外，如果你不需要全面的手册，只需要可用选项的快速参考，那么可以用 <code>-h</code> 选项获得更简明的 “help” 输出：</p>\n<pre class=\"line-numbers language-console\" data-language=\"console\"><code class=\"language-console\">$ git add -h\nusage: git add [&lt;options&gt;] [--] &lt;pathspec&gt;...\n\n    -n, --dry-run         dry run\n    -v, --verbose         be verbose\n\n    -i, --interactive     interactive picking\n    -p, --patch           select hunks interactively\n    -e, --edit            edit current diff and apply\n    -f, --force           allow adding otherwise ignored files\n    -u, --update          update tracked files\n    --renormalize         renormalize EOL of tracked files (implies -u)\n    -N, --intent-to-add   record only the fact that the path will be added later\n    -A, --all             add changes from all tracked and untracked files\n    --ignore-removal      ignore paths removed in the working tree (same as --no-all)\n    --refresh             don&#39;t add, only refresh the index\n    --ignore-errors       just skip files which cannot be added because of errors\n    --ignore-missing      check if - even missing - files are ignored in dry run\n    --chmod (+|-)x        override the executable bit of the listed files<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我也不想抄，可是它<s>叫我哥哥诶</s>写的太好了。</p>\n",
            "tags": [
                "note"
            ]
        },
        {
            "id": "https://blog.oover.dev/CS/cpp/c-five-zone/",
            "url": "https://blog.oover.dev/CS/cpp/c-five-zone/",
            "title": "c++的四大区",
            "date_published": "2022-04-19T13:02:40.000Z",
            "content_html": "<p>今天开始学习使用c++，之前一直使用python比较多。语言各有千秋，只有最合适。好啦，现在到了使用c++的时候惹。希望我能够喜欢上这个语言。</p>\n<p>let’s go!😽</p>\n<h2 id=\"内存四大区\"><a class=\"markdownIt-Anchor\" href=\"#内存四大区\"></a> 内存四大区</h2>\n<p>编程语言的内存管理，都是类似的，以c++为例，分为以下四大区</p>\n<ul>\n<li>代码区</li>\n<li>全局区</li>\n<li>栈区</li>\n<li>堆区</li>\n</ul>\n<p>每个区域都有不同的生命周期，咳咳咳，想要更好的编程，当然要好好学习内存管理。</p>\n<p>这块内容像学习心法一样，之修外，而不修内功，会走火入魔，同时不能更好、更快的学习新的东西，对编程语言也了解不够深入。</p>\n<h3 id=\"代码区\"><a class=\"markdownIt-Anchor\" href=\"#代码区\"></a> 代码区</h3>\n<p>代码区，顾名思义，这是存放代码的地方，但是cpu只认识指令。</p>\n<p>编译器在编译代码后，会把代码翻译成二进制指令集合，代码区就是存放这些指令集合的。</p>\n<p>所以代码区是不能更改的，代码区公用一份内存空间，为了节省空间啦。比如，代码中很多地方都有用到一个函数，但是这个函数在代码区只有一份。c++很抠门的。</p>\n<p>代码区，在程序运行的时候，会优先加载到内存中哟。</p>\n<h3 id=\"全局区\"><a class=\"markdownIt-Anchor\" href=\"#全局区\"></a> 全局区</h3>\n<p>c++的全局区，不同于一些编程语言，全局区包含常量，静态变量，全局变量等等。十分强大。</p>\n<p>全局区的这些东西，同样在编译阶段都会加载完成。</p>\n<p>程序运行时，与代码区一同先加载到内存之中。</p>\n<ul>\n<li>常量，包含字符串常量，数字常量等等</li>\n<li>静态变量，在编译时就会运行加载，并且只运行一次，存在全局区。</li>\n<li>全局变量，有程序员自己定义的变量，作用在全局区，所有的东西都能访问到它。</li>\n</ul>\n<h3 id=\"栈区\"><a class=\"markdownIt-Anchor\" href=\"#栈区\"></a> 栈区</h3>\n<p>栈区，是编译器的管理的内存，所有的临时变量都会储存在这里，交给编译器管理，十分方便，缺点栈的深度有限，有时候，我们需要使用大量递归，会栈溢出。</p>\n<h3 id=\"堆区\"><a class=\"markdownIt-Anchor\" href=\"#堆区\"></a> 堆区</h3>\n<p>堆区又程序员手动管理，例如c语言的malloc或者是c++的new，都是在堆区申请的内存，需要手动管理。</p>\n<ul>\n<li>优点，操作更加灵活方便。给予程序员很高的权限。</li>\n<li>缺点，增加了程序员的心智负担，内存往往没有得到很好的控制。</li>\n</ul>\n",
            "tags": [
                "note",
                "cpp"
            ]
        },
        {
            "id": "https://blog.oover.dev/CS/linux/WritingService/",
            "url": "https://blog.oover.dev/CS/linux/WritingService/",
            "title": "linux中的service",
            "date_published": "2022-01-07T16:00:00.000Z",
            "content_html": "<h2 id=\"服务编写\"><a class=\"markdownIt-Anchor\" href=\"#服务编写\"></a> 服务编写</h2>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> /lib/systemd/system/服务名.service<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<pre class=\"line-numbers language-ini\" data-language=\"ini\"><code class=\"language-ini\">\n<span class=\"token comment\">#例如frp的服务端</span>\n\n<span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">Unit</span><span class=\"token punctuation\">]</span></span>\n<span class=\"token key attr-name\">Description</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">fraps service</span>\n<span class=\"token key attr-name\">After</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">network.target syslog.target</span>\n<span class=\"token key attr-name\">Wants</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">network.target</span>\n\n<span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">Service</span><span class=\"token punctuation\">]</span></span>\n<span class=\"token key attr-name\">Type</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">simple</span>\n<span class=\"token key attr-name\">ExecStart</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">/root/frp/frps -c /root/frp/frps.ini  #此处安实际情况修改</span>\n\n<span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">Install</span><span class=\"token punctuation\">]</span></span>\n<span class=\"token key attr-name\">WantedBy</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">multi-user.target</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-ini\" data-language=\"ini\"><code class=\"language-ini\"><span class=\"token comment\">#客户端运行服务创建：vi /lib/systemd/system/frpc.service</span>\n\n<span class=\"token comment\">#qq机器人的服务</span>\n<span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">Unit</span><span class=\"token punctuation\">]</span></span>\n<span class=\"token key attr-name\">Description</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">qqbot</span>\n\n<span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">Service</span><span class=\"token punctuation\">]</span></span>\n<span class=\"token key attr-name\">Type</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">simple</span>\n<span class=\"token key attr-name\">ExecStart</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">/root/push_qq/go-cqhttp</span>\n\n<span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">Install</span><span class=\"token punctuation\">]</span></span>\n<span class=\"token key attr-name\">WantedBy</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">multi-user.target</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"设置开机自启\"><a class=\"markdownIt-Anchor\" href=\"#设置开机自启\"></a> 设置开机自启</h2>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">systemctl <span class=\"token builtin class-name\">enable</span> frp<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n",
            "tags": [
                "note",
                "Linux"
            ]
        },
        {
            "id": "https://blog.oover.dev/CS/linux/linux_init/",
            "url": "https://blog.oover.dev/CS/linux/linux_init/",
            "title": "linux服务器初始化（个人自用）",
            "date_published": "2022-01-03T16:00:00.000Z",
            "content_html": "<h1 id=\"重置root密码\"><a class=\"markdownIt-Anchor\" href=\"#重置root密码\"></a> 重置root密码</h1>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">passwd</span> root\n\n<span class=\"token comment\">#为了以后省去sudo输入密码。</span>\n<span class=\"token function\">sudo</span> visudo\n<span class=\"token comment\">#在文件最后加上</span>\n用户名 <span class=\"token assign-left variable\">ALL</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>ALL<span class=\"token punctuation\">)</span> NOPASSWD: ALL\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"安装vim并设置主编辑器\"><a class=\"markdownIt-Anchor\" href=\"#安装vim并设置主编辑器\"></a> 安装vim并设置主编辑器</h1>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">apt</span> <span class=\"token function\">install</span> <span class=\"token function\">vim</span> <span class=\"token parameter variable\">-y</span>\nselect-editor<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/image-20220421130919271.png\" alt=\"image-20220421130919271\" /></p>\n<h2 id=\"给vi起别名\"><a class=\"markdownIt-Anchor\" href=\"#给vi起别名\"></a> 给vi起别名</h2>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"alias vi=vim\"</span> <span class=\"token operator\">>></span> /etc/profile\n<span class=\"token builtin class-name\">source</span> /etc/profile<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h1 id=\"修改apt的源\"><a class=\"markdownIt-Anchor\" href=\"#修改apt的源\"></a> 修改apt的源</h1>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#先安装vim</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> <span class=\"token function\">vim</span> <span class=\"token parameter variable\">-y</span>\n<span class=\"token comment\">#好习惯，先备份原来的</span>\n<span class=\"token function\">cp</span> /etc/apt/sources.list /etc/apt/sources.list.bak\n<span class=\"token function\">sudo</span> <span class=\"token function\">vim</span> /etc/apt/sources.list\n\n<span class=\"token comment\">#把内容改成</span>\n deb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse\n deb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse\n deb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse\n deb-src http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse\n deb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse\n deb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse\n deb http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse\n deb-src http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse\n deb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse\n deb-src http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>更新软件列表</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update <span class=\"token operator\">&amp;</span> <span class=\"token function\">apt</span> upgrade<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h1 id=\"安装python\"><a class=\"markdownIt-Anchor\" href=\"#安装python\"></a> 安装python</h1>\n<p>其实这里主要是因为python的一些版本问题。如果没有问题，可跳过</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> python3\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> python3-pip<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h1 id=\"安装ssh-xrdp-firewalld\"><a class=\"markdownIt-Anchor\" href=\"#安装ssh-xrdp-firewalld\"></a> 安装ssh &amp; xrdp &amp; firewalld</h1>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> <span class=\"token function\">ssh</span>\n\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> xrdp\n\n<span class=\"token function\">sudo</span> systemctl status xrdp\n<span class=\"token function\">sudo</span> adduser xrdp ssl-cert  \n<span class=\"token function\">sudo</span> systemctl restart xrdp\n\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> firewalld<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n",
            "tags": [
                "note",
                "Linux"
            ]
        }
    ]
}