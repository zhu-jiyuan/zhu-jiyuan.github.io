{
    "version": "https://jsonfeed.org/version/1",
    "title": "ohayo's blog • All posts by \"cpp\" tag",
    "description": null,
    "home_page_url": "https://blog.ohayo.live",
    "items": [
        {
            "id": "https://blog.ohayo.live/CS/dosign_pattern/dosign-pattern-2/",
            "url": "https://blog.ohayo.live/CS/dosign_pattern/dosign-pattern-2/",
            "title": "设计模式-23种（二）",
            "date_published": "2023-04-23T12:25:31.000Z",
            "content_html": "<h1 id=\"组件协同模式\"><a class=\"markdownIt-Anchor\" href=\"#组件协同模式\"></a> 组件协同模式</h1>\n<p>现代软件专业分工之后的第一个结果是「框架与应用程序的划分」，「组件协作」模式通过晚期绑定，来实现框架与应用程序之间的松耦合，是二者之间协作时的常用模式。<br />\n下面是组件协同模式的三种典型模式。</p>\n<h2 id=\"template-method模板方法\"><a class=\"markdownIt-Anchor\" href=\"#template-method模板方法\"></a> Template Method（模板方法）</h2>\n<p>模板方法，就像高中老师讲的做题步骤一样，比如高考卷里的圆锥曲线题。</p>\n<ol>\n<li>先设直线方程</li>\n<li>把直线方程代入圆锥曲线</li>\n<li>利用求根公式的定理，算出<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><msub><mi>x</mi><mn>1</mn></msub><mo>∗</mo><msub><mi>x</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">x_{1}+x_{2},x_{1}*x_{2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.73333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6597200000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></li>\n<li>…<br />\n很多时候，题目都可以用这样一个通用的模板方法来解决，只需换掉一丢丢的不同，大致步骤都是一样。</li>\n</ol>\n<p>在代码编程中，模板方法就使用的相当多，通常，子类只需要重写父类给出的「可重写的方法」即可。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//base class</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Library</span><span class=\"token punctuation\">&#123;</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\n    <span class=\"token comment\">//稳定 template method</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n        <span class=\"token function\">Step1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Step2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//支持变化 ==> 虚函数的多态调用</span>\n\n            <span class=\"token function\">Step3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n            <span class=\"token function\">Step4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//支持变化 ==> 虚函数的多态调用</span>\n\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">Step5</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">Library</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">Step1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//稳定</span>\n\n        <span class=\"token comment\">//.....</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">Step3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//稳定</span>\n\n        <span class=\"token comment\">//.....</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">Step5</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//稳定</span>\n\n        <span class=\"token comment\">//.....</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">Step2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//变化</span>\n\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Step4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//变化</span>\n\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这个例子中base类给出了两个纯虚函数，我们可以override这两个函数，做一些符合自己的变化。</p>\n<p>在调用的时候只需如下即可。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tLibrary <span class=\"token operator\">*</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Application</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Application 是Library的子类，并且重写了两个纯虚虚函数</span>\n\tapp<span class=\"token operator\">-></span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>熟悉安卓开发的同学，应该非常熟悉，很多时候，都是重写一个函数，例如生命周期的resume，stop函数等等，系统会自动调用，你重写之后的方法，是不是很神奇嘞，其中的奥秘就是这样捏。</p>\n<h3 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\"></a> 总结</h3>\n<p><strong>定义：「定义一个操作中的算法的骨架（稳定），而将一些步骤延迟（变化）到子类中。Template Method使得子类可以不改变（复用）一个算法的结构即可重定义（override重写）该算法的某些特定步骤」</strong></p>\n<p>下面是它的结构图。<br />\n<img data-src=\"https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go@master/img/20230424215309.png\" alt=\"image.png\" /><br />\n模板方法是不是很好用，不要你调用我！让我来调用你。</p>\n<h2 id=\"strategy策略模式\"><a class=\"markdownIt-Anchor\" href=\"#strategy策略模式\"></a> Strategy（策略模式）</h2>\n<p>策略模式特别像模板方法。举个栗子，就能马上明白。</p>\n<p>比如应用程序切换语言。<br />\n语言可能以后还会添加，可能有些人会这样写程序。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">enum</span> <span class=\"token class-name\">Language</span><span class=\"token punctuation\">&#123;</span>\n\tZH_CN<span class=\"token punctuation\">,</span>\n\tENGLISH\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tLanguage cur_set_lang <span class=\"token operator\">=</span> <span class=\"token function\">get_cur_lang</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cur_set_lang<span class=\"token operator\">==</span>ZH_CN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token comment\">//中文处理</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cur_set_lang<span class=\"token operator\">==</span>ENGLISH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token comment\">//英文处理</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>试想一下，我们现在要增加另一门语言，比如台湾繁体。在上述代码里，就要在枚举类型中添加，同时还要在main函数中的if判断中增加新的处理。<br />\n当项目大起来时，直接修改，往往会令人抓狂。这十分的不优雅。</p>\n<p>策略模式，就可以很好的解决这个问题。<br />\n可以看出来，每个if中都要对相应的语言做处理，我们可以给它抽象出来。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Language</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">Language</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>天啊，看到这里，相比你已经知道了后续部分了，没错就像模板方法一样。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//中文类cpp文件</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Chinese</span><span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Language</span></span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">override</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token comment\">//中文处理</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">Chinese</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token comment\">//相关资源释放</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//英文类cpp文件</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">English</span><span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Language</span></span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">override</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token comment\">//英文处理</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">English</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token comment\">//相关资源释放</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>如此这般，添加新语言，只需要创建一个新的class类文件即可，避免了直接在源码上修改。<br />\n调用过程也变的简洁明了。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//值得一提的是，一般会与工厂方法一起使用，因为工厂方法还没介绍，先不要啦。</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tLanguage<span class=\"token operator\">*</span> cur_set_lang <span class=\"token operator\">=</span> <span class=\"token function\">get_cur_lang</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcur_set_lang<span class=\"token operator\">-></span><span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"总结-2\"><a class=\"markdownIt-Anchor\" href=\"#总结-2\"></a> 总结</h3>\n<p><strong>定义：「定义一系列算法，把它们一个个封装起来，并且使他们可互相替换（变化）。该模式使得算法可独立于使用它的客户程序（稳定）而变化（扩展，子变化）。」</strong></p>\n<p>结构如下<br />\n<img data-src=\"https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go@master/img/20230424225921.png\" alt=\"image.png\" /><br />\n策略模式，可以很好的解决if else 这种没有止境或者不确定后续是否还会添加其他选项的代码，实在是妙啊。</p>\n<h2 id=\"observe-event观察者模式\"><a class=\"markdownIt-Anchor\" href=\"#observe-event观察者模式\"></a> Observe | Event（观察者模式）</h2>\n<p>观察者一般都是站在第三方角度上，observe中文有着「观察」的意思，而Event有着「事件」的意思，从字面意思上直观了解，不是那么容易懂。举个例子，当一个程序跑起来了，我们想看一下中间过程中发生的情况，这时我们就可以插入一段「代码（像Log）」可以让我们观察程序中间过程中的执行情况，也可以把这个观察，说成一种事件，「观察程序中间过程」事件。</p>\n<p>比如一个分割文件的程序，我们想加一个进度条来显示实时进度，先来看一个简单的例子。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//main.cpp</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MainForm</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Form</span></span>\n\n<span class=\"token punctuation\">&#123;</span>\n\n    TextBox<span class=\"token operator\">*</span> txtFilePath<span class=\"token punctuation\">;</span>\n\n    TextBox<span class=\"token operator\">*</span> txtFileNumber<span class=\"token punctuation\">;</span>\n\n    ProgressBar<span class=\"token operator\">*</span> progressBar<span class=\"token punctuation\">;</span>\n\n  \n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">Button1_Click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n        string filePath <span class=\"token operator\">=</span> txtFilePath<span class=\"token operator\">-></span><span class=\"token function\">getText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> number <span class=\"token operator\">=</span> <span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span>txtFileNumber<span class=\"token operator\">-></span><span class=\"token function\">getText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        FileSplitter <span class=\"token function\">splitter</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">,</span> number<span class=\"token punctuation\">,</span> progressBar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        splitter<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在上面这段代码里，我们像<code>FileSplitter</code>类中传入了一个进度条实例来显示进度。<br />\n如果我们的<code>FileSplitter</code>类如下。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//FileSplitter.cpp</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FileSplitter</span>\n\n<span class=\"token punctuation\">&#123;</span>\n\n    string m_filePath<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> m_fileNumber<span class=\"token punctuation\">;</span>\n\n    ProgressBar<span class=\"token operator\">*</span> m_progressBar<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\n    <span class=\"token function\">FileSplitter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> filePath<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> fileNumber<span class=\"token punctuation\">,</span> ProgressBar<span class=\"token operator\">*</span> progressBar<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span>\n\n        <span class=\"token function\">m_filePath</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n        <span class=\"token function\">m_fileNumber</span><span class=\"token punctuation\">(</span>fileNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n        <span class=\"token function\">m_progressBar</span><span class=\"token punctuation\">(</span>progressBar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n\n        <span class=\"token comment\">//1.读取大文件</span>\n        <span class=\"token comment\">//2.分批次向小文件中写入</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m_fileNumber<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n            <span class=\"token comment\">//...</span>\n\n            <span class=\"token keyword\">float</span> progressValue <span class=\"token operator\">=</span> m_fileNumber<span class=\"token punctuation\">;</span>\n\n            progressValue <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> progressValue<span class=\"token punctuation\">;</span>\n\n            m_progressBar<span class=\"token operator\">-></span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>progressValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这样写没毛病，让我们试想一下，如果此时我们再加一个进度条，比如在终端上打印进度信息，或者再加几个观察进度程序，如此上面的<code>FileSplitter</code>类将不能满足我们的要求。</p>\n<p>『我们有时需要让一个类引起的变化，通知到其他一个或多个类。 』</p>\n<p>继续之前的例子，按照我们的要求，当<code>FileSplitter</code>类变化时，其中我们加入的多个进度条类也会发生变化，也就是说<code>FileSplitter</code>类变化会通知其他进度条类。<br />\n<img data-src=\"https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go@master/img/20230425214659.png\" alt=\"image.png\" /></p>\n<p>这些需要<code>FileSplitter</code>类应该具有一些共同的函数等，可以把这些东西给抽象为一个接口。<br />\n例如这样</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">IProgress</span><span class=\"token punctuation\">&#123;</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">DoProgress</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> value<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">IProgress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>此时<code>FileSplitter</code>类就要这样修改了</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FileSplitter</span>\n\n<span class=\"token punctuation\">&#123;</span>\n\n    string m_filePath<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> m_fileNumber<span class=\"token punctuation\">;</span>\n\n    List<span class=\"token operator\">&lt;</span>IProgress<span class=\"token operator\">*</span><span class=\"token operator\">></span>  m_iprogressList<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 抽象通知机制，支持多个观察者</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\n    <span class=\"token function\">FileSplitter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> filePath<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> fileNumber<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span>\n\n        <span class=\"token function\">m_filePath</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n        <span class=\"token function\">m_fileNumber</span><span class=\"token punctuation\">(</span>fileNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n        <span class=\"token comment\">//1.读取大文件</span>\n        <span class=\"token comment\">//2.分批次向小文件中写入</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m_fileNumber<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n            <span class=\"token comment\">//...</span>\n            <span class=\"token keyword\">float</span> progressValue <span class=\"token operator\">=</span> m_fileNumber<span class=\"token punctuation\">;</span>\n\n            progressValue <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> progressValue<span class=\"token punctuation\">;</span>\n\n            <span class=\"token function\">onProgress</span><span class=\"token punctuation\">(</span>progressValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//发送通知</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">addIProgress</span><span class=\"token punctuation\">(</span>IProgress<span class=\"token operator\">*</span> iprogress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n        m_iprogressList<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>iprogress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">removeIProgress</span><span class=\"token punctuation\">(</span>IProgress<span class=\"token operator\">*</span> iprogress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n        m_iprogressList<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>iprogress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onProgress</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n        <span class=\"token keyword\">auto</span> itor<span class=\"token operator\">=</span>m_iprogressList<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>itor <span class=\"token operator\">!=</span> m_iprogressList<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n\n            <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>itor<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">DoProgress</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//更新进度条</span>\n\n            itor<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我们用一个<code>vector</code>容器存储需要通知的类，这些需要通知的类，需要继承<code>IProgress</code>接口，并且实现其中的纯虚函数，如此，我们就可以这样很方便的完成需求。<br />\n调用如下</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MainForm</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Form</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">IProgress</span></span>\n\n<span class=\"token punctuation\">&#123;</span>\n\n    TextBox<span class=\"token operator\">*</span> txtFilePath<span class=\"token punctuation\">;</span>\n\n    TextBox<span class=\"token operator\">*</span> txtFileNumber<span class=\"token punctuation\">;</span>\n    ProgressBar<span class=\"token operator\">*</span> progressBar<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">Button1_Click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n        string filePath <span class=\"token operator\">=</span> txtFilePath<span class=\"token operator\">-></span><span class=\"token function\">getText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> number <span class=\"token operator\">=</span> <span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span>txtFileNumber<span class=\"token operator\">-></span><span class=\"token function\">getText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ConsoleNotifier cn<span class=\"token punctuation\">;</span>\n        FileSplitter <span class=\"token function\">splitter</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">,</span> number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        splitter<span class=\"token punctuation\">.</span><span class=\"token function\">addIProgress</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//订阅通知</span>\n\n        splitter<span class=\"token punctuation\">.</span><span class=\"token function\">addIProgress</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>cn<span class=\"token punctuation\">)</span>； <span class=\"token comment\">//订阅通知</span>\n\n        splitter<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        splitter<span class=\"token punctuation\">.</span><span class=\"token function\">removeIProgress</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">DoProgress</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> value<span class=\"token punctuation\">)</span><span class=\"token keyword\">override</span><span class=\"token punctuation\">&#123;</span>\n\n        progressBar<span class=\"token operator\">-></span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ConsoleNotifier</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">IProgress</span></span> <span class=\"token punctuation\">&#123;</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">DoProgress</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> value<span class=\"token punctuation\">)</span><span class=\"token keyword\">override</span><span class=\"token punctuation\">&#123;</span>\n\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"总结-3\"><a class=\"markdownIt-Anchor\" href=\"#总结-3\"></a> 总结</h3>\n<p><strong>定义：「定义对象间的一种一对多（变化）的依赖关系，以便当一个对象（subject）的状态发生改变时，所有依赖于它的对象都得到通知并自动更新。」</strong></p>\n<p>结构如下<br />\n<img data-src=\"https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go@master/img/20230425215654.png\" alt=\"image.png\" /></p>\n<p>是不是有种学到啦的感觉，观察者模式，可以让一个类通知许多类的改变，仅仅把这些的共同地方抽象出来，就可以让 代码变的健壮起来。</p>\n<hr />\n<h1 id=\"单一职责模式\"><a class=\"markdownIt-Anchor\" href=\"#单一职责模式\"></a> 单一职责模式</h1>\n<p>在软件组件的设计中，如果责任划分的不清晰，使用继承得到的结果往往是随着需求的变化，子类急剧膨胀，同时充斥着重复代码，这时候的关键是<strong>划清责任</strong>。</p>\n<p>下面介绍两种经典的单一职责模式可以很快帮助我们理解。</p>\n<h2 id=\"decorator装饰器模式\"><a class=\"markdownIt-Anchor\" href=\"#decorator装饰器模式\"></a> Decorator（装饰器模式）</h2>\n<p>比如我们要做一个基于TCP的文件传输的小工具，IO方面，我们肯定需要处理文件流、网络流，甚至可能需要对这些流进行加密，或者对流进行缓存。</p>\n<p>那么如果我们这些写，先抽象一个<code>Stream</code>的抽象类，包含<code>read(),seek(),write()</code> 三种方法。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span>：\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">char</span> <span class=\"token function\">Read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> number<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Seek</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> position<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> data<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">Stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>很容易就会想到文件流、网络流继承<code>Stream</code>。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FileStream</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span>：\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">char</span> <span class=\"token function\">Read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Seek</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> position<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">Stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">NetworkStream</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span>：\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">char</span> <span class=\"token function\">Read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Seek</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> position<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">Stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>假设现在我们需要加密流和缓存流，新手一般会这样写。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CryptoFileStream</span> <span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">FileStream</span></span><span class=\"token punctuation\">&#123;</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">char</span> <span class=\"token function\">Read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//额外的加密操作...</span>\n        <span class=\"token class-name\">FileStream</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//读文件流</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Seek</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> position<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//额外的加密操作...</span>\n        <span class=\"token class-name\">FileStream</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Seek</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//定位文件流</span>\n        <span class=\"token comment\">//额外的加密操作...</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>byte data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//额外的加密操作...</span>\n        <span class=\"token class-name\">FileStream</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//写文件流</span>\n        <span class=\"token comment\">//额外的加密操作...</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CryptoNetworkStream</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token operator\">:</span><span class=\"token keyword\">public</span> <span class=\"token class-name\">NetworkStream</span></span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">char</span> <span class=\"token function\">Read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//额外的加密操作...</span>\n        <span class=\"token class-name\">NetworkStream</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//读网络流</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Seek</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> position<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//额外的加密操作...</span>\n        <span class=\"token class-name\">NetworkStream</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Seek</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//定位网络流</span>\n        <span class=\"token comment\">//额外的加密操作...</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>byte data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//额外的加密操作...</span>\n        <span class=\"token class-name\">NetworkStream</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//写网络流</span>\n        <span class=\"token comment\">//额外的加密操作...</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//-------------------</span>\n<span class=\"token comment\">//缓存流</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">BufferFileStream</span><span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">FileStream</span></span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">BufferNetworkStream</span><span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">FileStream</span></span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>现在，回头看一下代码，很明显，每当我们去添加一个扩展功能类，比如反转流，这样就要再继承 <code>FileStream、NetworkStream</code>写两个类，或者当我们去添加一个流，比如内存流，这样就要继承内存流去写很多扩展类。</p>\n<p>假设，<code>FileStream、NetworkStream</code>这样的类有<strong>N</strong>个，加密流这样的扩展有<strong>M</strong>个，那么一共要写<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>+</mo><mi>N</mi><mo>+</mo><mi>N</mi><mo>∗</mo><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">1+N+N*M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span>个。<br />\n<img data-src=\"https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go@master/img/Pasted%20image%2020230427013929.png\" alt=\"Pasted image 20230427013929\" /><br />\n不难发现，在扩展类中，实现的东西都相同，很容易联系到多态。那么扩展类就可以写成下面这样，比如<code>CryptoStream</code>类。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CryptoStream</span> <span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Stream</span></span><span class=\"token punctuation\">&#123;</span>\nStream<span class=\"token operator\">*</span> stream<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">CryptoStream</span><span class=\"token punctuation\">(</span>Stream<span class=\"token operator\">*</span> s<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t\n\t<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">char</span> <span class=\"token function\">Read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//额外的加密操作...</span>\n        stream<span class=\"token operator\">-></span><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//读文件流</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Seek</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> position<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//额外的加密操作...</span>\n        stream<span class=\"token operator\">-></span><span class=\"token function\">Seek</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//定位文件流</span>\n        <span class=\"token comment\">//额外的加密操作...</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>byte data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//额外的加密操作...</span>\n        stream<span class=\"token operator\">-></span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//写文件流</span>\n        <span class=\"token comment\">//额外的加密操作...</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>如此我们就可以省下很多重复的代码，只需要<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>+</mo><mi>N</mi><mo>+</mo><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">1+N+M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span>，非常nice。但是当我写出<code>BufferStream</code>类时，你会发现这其中又可以提出来共同的成员。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">BufferStream</span> <span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Stream</span></span><span class=\"token punctuation\">&#123;</span>\nStream<span class=\"token operator\">*</span> stream<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">BufferStream</span><span class=\"token punctuation\">(</span>Stream<span class=\"token operator\">*</span> s<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>可以看到<code>stream</code>这个成员变量重复了，可以把这个给抽出来，单独写成一个类。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">DecoratorStream<span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> Stream<span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n    Stream<span class=\"token operator\">*</span> stream<span class=\"token punctuation\">;</span><span class=\"token comment\">//...</span>\n    <span class=\"token function\">DecoratorStream</span><span class=\"token punctuation\">(</span>Stream <span class=\"token operator\">*</span> stm<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>stm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这样在以后写扩展类时，继承这个<code>DecoratorStream</code>，既可以清楚意图，又减少了代码的重复。<br />\n例如<code>BufferStream</code>类就可以写成下面这样。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">BufferStream</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">DecoratorStream</span></span><span class=\"token punctuation\">&#123;</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\n    <span class=\"token function\">BufferStream</span><span class=\"token punctuation\">(</span>Stream<span class=\"token operator\">*</span> stm<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">DecoratorStream</span><span class=\"token punctuation\">(</span>stm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">//...</span>\n\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>调用程序如下</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">Process</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//运行时装配</span>\n    FileStream<span class=\"token operator\">*</span> s1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token function\">FileStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    CryptoStream<span class=\"token operator\">*</span> s2<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token function\">CryptoStream</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    BufferStream<span class=\"token operator\">*</span> s3<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token function\">BufferedStream</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    BufferStream<span class=\"token operator\">*</span> s4<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token function\">BufferedStream</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"总结-4\"><a class=\"markdownIt-Anchor\" href=\"#总结-4\"></a> 总结</h3>\n<p>定义：动态（组合）地给一个对象增加一些额外的职责。就增加功能而言，Decorator模式比生成子类（继承）更为灵活（消除重复代码&amp;减少子类个数）</p>\n<p>结构如下<br />\n<img data-src=\"https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go@master/img/Pasted%20image%2020230428012216.png\" alt=\"Pasted image 20230428012216\" /><br />\n<strong>仔细想想，其实CryptoFileStream继承FileStream是不合理的，因为前者仅仅是后者的一个扩展，并没有is a的关系，也不朝着同一个方向变化。</strong></p>\n<h2 id=\"bridge桥模式\"><a class=\"markdownIt-Anchor\" href=\"#bridge桥模式\"></a> Bridge（桥模式）</h2>\n<p>桥模式与装饰器模式十分相似，都是为了解决继承使得类数量爆炸增长的问题。</p>\n<p>举个例子，现在要开发一个即时通讯软件，新手一般会先抽象一个类。<br />\n比如</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Messager</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Login</span><span class=\"token punctuation\">(</span>string username<span class=\"token punctuation\">,</span> string password<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SendMessage</span><span class=\"token punctuation\">(</span>string message<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SendPicture</span><span class=\"token punctuation\">(</span>Image image<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">PlaySound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">DrawShape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">WriteText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">Messager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这很不错，PC和mobile端继承Messager，后续再继承pc类开发pc上的不同版本，例如lite，prefect版本等等。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">PCMessagerBase</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Messager</span></span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">PlaySound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//**********</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">DrawShape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//*********</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">WriteText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//**********</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//**********</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MobileMessagerBase</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Messager</span></span><span class=\"token punctuation\">&#123;</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>接着写一下PC端的版本。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">PCMessagerLite</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">PCMessagerBase</span></span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Login</span><span class=\"token punctuation\">(</span>string username<span class=\"token punctuation\">,</span> string password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">PCMessagerBase</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//........</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SendMessage</span><span class=\"token punctuation\">(</span>string message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">PCMessagerBase</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">WriteText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//........</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SendPicture</span><span class=\"token punctuation\">(</span>Image image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">PCMessagerBase</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">DrawShape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//........</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  \n  \n  \n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PCMessagerPerfect</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">PCMessagerBase</span></span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Login</span><span class=\"token punctuation\">(</span>string username<span class=\"token punctuation\">,</span> string password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">PCMessagerBase</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">PlaySound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//********</span>\n        <span class=\"token class-name\">PCMessagerBase</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//........</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SendMessage</span><span class=\"token punctuation\">(</span>string message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">PCMessagerBase</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">PlaySound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//********</span>\n        <span class=\"token class-name\">PCMessagerBase</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">WriteText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//........</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SendPicture</span><span class=\"token punctuation\">(</span>Image image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">PCMessagerBase</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">PlaySound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//********</span>\n        <span class=\"token class-name\">PCMessagerBase</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">DrawShape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//........</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这仅仅是PC端的，如果算上mobile端，又要加上两个业务类，加一个Linux平台，可能就要一个Linux base类，和两个业务类。<br />\n假如有N个平台，M个版本 ，那么总共就要写<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>+</mo><mi>N</mi><mo>+</mo><mi>N</mi><mo>∗</mo><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">1+N+N*M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span>个类，想想就十分可怕。</p>\n<p>学习过上一节，很自然就会想「能不能使用多态来代替这个继承」。</p>\n<p>首先我们先把<code>Messager</code>类分开，因为pc base类与mobile base类，仅仅实现了基础的部分，并没有实现login这些功能。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Messager</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n     MessagerImp<span class=\"token operator\">*</span> messagerImp<span class=\"token punctuation\">;</span><span class=\"token comment\">//...</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Login</span><span class=\"token punctuation\">(</span>string username<span class=\"token punctuation\">,</span> string password<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SendMessage</span><span class=\"token punctuation\">(</span>string message<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SendPicture</span><span class=\"token punctuation\">(</span>Image image<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">Messager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  \n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MessagerImp</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">PlaySound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">DrawShape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">WriteText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">virtual</span> <span class=\"token function\">MessagerImp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>下面只需让pc base类与mobile base类去实现MessagerImp接口，而业务类继承<code>Messager</code>类。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">PCMessagerImp</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">MessagerImp</span></span><span class=\"token punctuation\">&#123;</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">PlaySound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//**********</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">DrawShape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//**********</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">WriteText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//**********</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//**********</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MobileMessagerImp</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">MessagerImp</span></span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MessagerLite</span> <span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Messager</span></span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Login</span><span class=\"token punctuation\">(</span>string username<span class=\"token punctuation\">,</span> string password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        messagerImp<span class=\"token operator\">-></span><span class=\"token function\">Connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//........</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SendMessage</span><span class=\"token punctuation\">(</span>string message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        messagerImp<span class=\"token operator\">-></span><span class=\"token function\">WriteText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//........</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SendPicture</span><span class=\"token punctuation\">(</span>Image image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        messagerImp<span class=\"token operator\">-></span><span class=\"token function\">DrawShape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//........</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MessagerPerfect</span>  <span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Messager</span> \n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Login</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">string</span> <span class=\"token class-name\">username</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">string</span> <span class=\"token class-name\">password</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">&#123;</span>\n        messagerImp<span class=\"token operator\">-></span><span class=\"token function\">PlaySound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//********</span>\n        messagerImp<span class=\"token operator\">-></span><span class=\"token function\">Connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//........</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SendMessage</span><span class=\"token punctuation\">(</span>string message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        messagerImp<span class=\"token operator\">-></span><span class=\"token function\">PlaySound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//********</span>\n        messagerImp<span class=\"token operator\">-></span><span class=\"token function\">WriteText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//........</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SendPicture</span><span class=\"token punctuation\">(</span>Image image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        messagerImp<span class=\"token operator\">-></span><span class=\"token function\">PlaySound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//********</span>\n        messagerImp<span class=\"token operator\">-></span><span class=\"token function\">DrawShape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//........</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这样类的数量就缩短到了<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>+</mo><mi>N</mi><mo>+</mo><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">1+N+M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span>.<br />\n调用主程序，可以写成如下格式。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">PCMessagerImp <span class=\"token operator\">*</span> pc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">PCMessagerImp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nMessager<span class=\"token operator\">*</span> mp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">MessagerPerfect</span><span class=\"token punctuation\">(</span>pc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nMessager<span class=\"token operator\">*</span> ml <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">MessagerLite</span><span class=\"token punctuation\">(</span>pc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"总结-5\"><a class=\"markdownIt-Anchor\" href=\"#总结-5\"></a> 总结</h3>\n<p><strong>定义：将抽象部分（业务功能）与实现部分（平台实现）分离，使它们都可以独立地变化。</strong></p>\n<p>结构如下<br />\n<img data-src=\"https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go@master/img/Pasted%20image%2020230428224539.png\" alt=\"Pasted image 20230428224539\" /><br />\n桥模式与装饰器模式，都有异曲同工之妙，都是将继承换为多态，总而避免了类数量的急剧增长。</p>\n<hr />\n<h1 id=\"对象创建模式\"><a class=\"markdownIt-Anchor\" href=\"#对象创建模式\"></a> 对象创建模式</h1>\n<p>通过“对象创建” 模式绕开new，来避免对象创建（new）过程中所导致的紧耦合（依赖具体类），从而支持对象创建的稳定。它是接口抽象之后的第一步工作。</p>\n<p>简单来说，就是让这个类文件中new的对象，像virtual函数那样，晚绑定。<br />\n也就是依赖倒置原则，不依赖与实现，应该依赖与抽象。</p>\n<p>如果一个类文件中，有一处实现，那么可能在以后的过程中，就要去改这个类文件。</p>\n",
            "tags": [
                "cpp"
            ]
        },
        {
            "id": "https://blog.ohayo.live/CS/dosign_pattern/dosign-pattern-1/",
            "url": "https://blog.ohayo.live/CS/dosign_pattern/dosign-pattern-1/",
            "title": "设计模式-八大设计原则（一）",
            "date_published": "2023-04-22T10:16:45.000Z",
            "content_html": "<p align=\"center\"><img data-src=\"https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go@master/img/20230423000022.png\" height=300px width=300px></p>\n<blockquote>\n<p>「你所用的面向对象，空有招式，但无内涵」</p>\n</blockquote>\n<p>只学招式，不学心法，武功瓶颈难以突破，更有甚者潜心修炼，数十年如一日，却不及他人一个月，走火入魔，此举实在是得不偿失。<br />\n你是否想如同杨过那样，年纪轻轻就已经成为武林大侠，即使郭靖一样的资质，也可以在短期内，上能九天揽月，下能五洋抓鳖。是的，你妹看错！<br />\n<img data-src=\"https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go@master/img/20230423003635.png\" alt=\"image.png\" /></p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go@master/img/20230423192658.png\" alt=\"image.png\" /></p>\n<h2 id=\"设计模式\"><a class=\"markdownIt-Anchor\" href=\"#设计模式\"></a> 设计模式</h2>\n<p>只要你学过java、python或者是cpp等任意一门面向对象语言，23种设计模式代码部分都能看懂。代码部分都能理解，直接开始上手干它，不就完了吗？非也非也，小伙子，这些代码只是辅助理解23种设计模式是如何解决日常编程问题的，其中真经要诀不可得也。<br />\n所以嘞，在学习设计模式时，我们要关注『 如何使用设计模式八大原则分析问题，解决问题』，而不是用什么设计模式。</p>\n<p>如能理解八大原则，坚持数日，大事可成矣。</p>\n<h2 id=\"依赖倒置原则dip\"><a class=\"markdownIt-Anchor\" href=\"#依赖倒置原则dip\"></a> 依赖倒置原则（DIP）</h2>\n<ol>\n<li>高层模块（稳定）不应该依赖于低层模块（变化），二者都应该依赖于抽象</li>\n<li>抽象不应该依赖于实现细节（变化），实现细节应该依赖于抽象（稳定）</li>\n</ol>\n<h2 id=\"开放封闭原则ocp\"><a class=\"markdownIt-Anchor\" href=\"#开放封闭原则ocp\"></a> 开放封闭原则（OCP）</h2>\n<ol>\n<li>对扩展开放，对更改封闭</li>\n<li>类模块应该是可扩展的，但是不可修改的</li>\n</ol>\n<h2 id=\"单一职责原则srp\"><a class=\"markdownIt-Anchor\" href=\"#单一职责原则srp\"></a> 单一职责原则（SRP）</h2>\n<ol>\n<li>一个类应该仅有一个引起他变化的原因</li>\n<li>变化的方向隐含着类的职责</li>\n</ol>\n<h2 id=\"liskov替换原则lsp\"><a class=\"markdownIt-Anchor\" href=\"#liskov替换原则lsp\"></a> Liskov替换原则（LSP）</h2>\n<ol>\n<li>子类必须能够替换它们的基类（IS-A）</li>\n<li>继承表达类型抽象</li>\n</ol>\n<h2 id=\"接口隔离原则isp\"><a class=\"markdownIt-Anchor\" href=\"#接口隔离原则isp\"></a> 接口隔离原则（ISP）</h2>\n<ol>\n<li>不应该强迫客户程序依赖它们不用的方法</li>\n<li>接口应该小而完备</li>\n</ol>\n<h2 id=\"优先使用对象组合而不是类继承\"><a class=\"markdownIt-Anchor\" href=\"#优先使用对象组合而不是类继承\"></a> 优先使用对象组合，而不是类继承</h2>\n<ol>\n<li>类继承通常为“白箱复用”，对象组合通常为“黑箱复用”</li>\n<li>继承在某种程度上继承了很多基类的函数，破坏了封装性，子类父类的耦合度过高</li>\n<li>用对象组合只要求被组合的对象具有良好的接口定义即可</li>\n</ol>\n<h2 id=\"封装变化点\"><a class=\"markdownIt-Anchor\" href=\"#封装变化点\"></a> 封装变化点</h2>\n<ol>\n<li>使用封装来创建对象之间的分界点，让设计者可以在分界点的一侧进行修改，而不会对另一侧产生不良影响，实现对象之间的松耦合。</li>\n</ol>\n<h2 id=\"针对接口编程不要针对实现编程\"><a class=\"markdownIt-Anchor\" href=\"#针对接口编程不要针对实现编程\"></a> 针对接口编程，不要针对实现编程</h2>\n<ol>\n<li>不将变量类型声明为某个特定的具体类，而声明为某个接口类</li>\n<li>客户程序无需知晓对象的具体类型，只需要知道对象所具有的接口即可</li>\n<li>减少系统中各部分的依赖关系，从而实现“高内聚、低耦合”的类设计方案</li>\n</ol>\n<hr />\n<p>在以后的分析中，比如代码，要先看违背了哪些原则，再去看哪些变化、哪些稳定，之后利用23种方法，问题便迎刃而解。</p>\n",
            "tags": [
                "cpp"
            ]
        },
        {
            "id": "https://blog.ohayo.live/CS/cpp/c-five-zone/",
            "url": "https://blog.ohayo.live/CS/cpp/c-five-zone/",
            "title": "c++的四大区",
            "date_published": "2022-04-19T13:02:40.000Z",
            "content_html": "<p>今天开始学习使用c++，之前一直使用python比较多。语言各有千秋，只有最合适。好啦，现在到了使用c++的时候惹。希望我能够喜欢上这个语言。</p>\n<p>let’s go!😽</p>\n<h2 id=\"内存四大区\"><a class=\"markdownIt-Anchor\" href=\"#内存四大区\"></a> 内存四大区</h2>\n<p>编程语言的内存管理，都是类似的，以c++为例，分为以下四大区</p>\n<ul>\n<li>代码区</li>\n<li>全局区</li>\n<li>栈区</li>\n<li>堆区</li>\n</ul>\n<p>每个区域都有不同的生命周期，咳咳咳，想要更好的编程，当然要好好学习内存管理。</p>\n<p>这块内容像学习心法一样，之修外，而不修内功，会走火入魔，同时不能更好、更快的学习新的东西，对编程语言也了解不够深入。</p>\n<h3 id=\"代码区\"><a class=\"markdownIt-Anchor\" href=\"#代码区\"></a> 代码区</h3>\n<p>代码区，顾名思义，这是存放代码的地方，但是cpu只认识指令。</p>\n<p>编译器在编译代码后，会把代码翻译成二进制指令集合，代码区就是存放这些指令集合的。</p>\n<p>所以代码区是不能更改的，代码区公用一份内存空间，为了节省空间啦。比如，代码中很多地方都有用到一个函数，但是这个函数在代码区只有一份。c++很抠门的。</p>\n<p>代码区，在程序运行的时候，会优先加载到内存中哟。</p>\n<h3 id=\"全局区\"><a class=\"markdownIt-Anchor\" href=\"#全局区\"></a> 全局区</h3>\n<p>c++的全局区，不同于一些编程语言，全局区包含常量，静态变量，全局变量等等。十分强大。</p>\n<p>全局区的这些东西，同样在编译阶段都会加载完成。</p>\n<p>程序运行时，与代码区一同先加载到内存之中。</p>\n<ul>\n<li>常量，包含字符串常量，数字常量等等</li>\n<li>静态变量，在编译时就会运行加载，并且只运行一次，存在全局区。</li>\n<li>全局变量，有程序员自己定义的变量，作用在全局区，所有的东西都能访问到它。</li>\n</ul>\n<h3 id=\"栈区\"><a class=\"markdownIt-Anchor\" href=\"#栈区\"></a> 栈区</h3>\n<p>栈区，是编译器的管理的内存，所有的临时变量都会储存在这里，交给编译器管理，十分方便，缺点栈的深度有限，有时候，我们需要使用大量递归，会栈溢出。</p>\n<h3 id=\"堆区\"><a class=\"markdownIt-Anchor\" href=\"#堆区\"></a> 堆区</h3>\n<p>堆区又程序员手动管理，例如c语言的malloc或者是c++的new，都是在堆区申请的内存，需要手动管理。</p>\n<ul>\n<li>优点，操作更加灵活方便。给予程序员很高的权限。</li>\n<li>缺点，增加了程序员的心智负担，内存往往没有得到很好的控制。</li>\n</ul>\n",
            "tags": [
                "note",
                "cpp"
            ]
        }
    ]
}