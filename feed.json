{
    "version": "https://jsonfeed.org/version/1",
    "title": "ohayo's blog",
    "description": null,
    "home_page_url": "https://blog.bysegfault.com",
    "items": [
        {
            "id": "https://blog.bysegfault.com/soft-router-is-joker/",
            "url": "https://blog.bysegfault.com/soft-router-is-joker/",
            "title": "没必要的软路由",
            "date_published": "2024-04-29T14:35:48.000Z",
            "content_html": "<h2 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\"></a> 前言</h2>\n<p>小学到初二，家里的网线从宽带我世界的电话拨号，升级到了光纤，我的游戏事业也如日中天，形势一片大好之际，我爸妈把网线掐了，直到高中毕业，在此期间我攻坚克难、不畏艰险，先后破解了邻居家的WiFi密码，掉包率极高，在电竞黄金期，摧毁了我的电竞梦想。</p>\n<p>毕业后，第一次租房30m宽带，100块才能使用50m，恰好当时拿下了switch，下个塞尔达都要等一天，看直播不能玩游戏。直接给我整破防了。。。</p>\n<p>家里一定要有好的网络体验！</p>\n<p>以下是我认为好的网络体验。</p>\n<ul>\n<li>switch等学习机能全速下载</li>\n<li>全家设备能透明进行科学上网</li>\n<li>网络延迟要低，dns不能泄露</li>\n<li>稳定！稳定！稳定！</li>\n</ul>\n<h2 id=\"不值得的软路由\"><a class=\"markdownIt-Anchor\" href=\"#不值得的软路由\"></a> 不值得的软路由</h2>\n<p>混迹在各个论坛，经常会刷到软路由、n1等等帖子，通过这些帖子的描述，软路由其实就是一个功耗低一点的小电脑，通常会刷成openwrt、爱快这些系统，光猫网线连上它而后一起放入弱电箱，软路由再连路由器。</p>\n<p><img data-src=\"https://static.bysegfault.com/images/20240429231321.png\" alt=\"Pasted image 20240429231321.png\" /></p>\n<h3 id=\"软路由玩法\"><a class=\"markdownIt-Anchor\" href=\"#软路由玩法\"></a> 软路由玩法</h3>\n<p>软路由的配置可以自定义，通常要比路由器的配置高很多，举个例子，这些老哥通常会整一个x86的cpu、4g内存、128g存储的配置。然后在软路由里面安装docker、科学上网等工具，充当一个小服务器使用。</p>\n<p>比如它安装了科学上网，因为路由器的数据包要经过它，在软路由这一跳，会完成科学代理操作，这就实现了家中网络都能无感科学上网。</p>\n<p>功耗低费电少，cpu性能好，加上家里带宽一般都比较大，docker里面跑一些薅羊毛脚本，挂载alist等网盘，亦或是各种骚操作，完成可以充当服务器使用。</p>\n<hr />\n<p>每每看到这些帖子，我都忍不住想要去捡点这些垃圾，猛猛吃上几口。直到我了解到近年来mtk的arm cpu愈发强大，今非昔比。</p>\n<h2 id=\"硬路由足矣\"><a class=\"markdownIt-Anchor\" href=\"#硬路由足矣\"></a> 硬路由足矣！</h2>\n<p>硬路由其实就是我们平时所使用的路由器，早期路由器的cpu十分拉跨，忙中偷闲基本不可能，处理网络数据包都费劲。现在路由器cpu已经足够好了，且支持硬件加速。如此一来，软路由多了一跳，还没硬件加速，岂不是多次一举。</p>\n<p><img data-src=\"https://static.bysegfault.com/images/20240430100254.png\" alt=\"Pasted image 20240429231321.png\" /></p>\n<h2 id=\"硬路由玩法\"><a class=\"markdownIt-Anchor\" href=\"#硬路由玩法\"></a> 硬路由玩法</h2>\n<p>硬路由出厂的系统，基本都是基于openwrt做的深度魔改，主打一个稳定。想要安装科学上网等插件，是不可能滴。因此必须获得它的ssh权限，才能做老系统不敢做之事。</p>\n<p>本科期间搞了一台红米ax6，那台路由器，刷了openwrt之后，上网体验也是极好的，运行一些插件后，cpu完全能妥妥应对，只是没有2.5G口、不能玩docker等（因为存储小，无法扩容），略感遗憾。</p>\n<p>23年8月痛下死手，买了TP的6088，512MB运存， 64MB闪存，2个2.5G口，4个千兆，一个USB，配置在700的价位还算不错。usb接口可以插上ssd来增加存储，之后就能使用docker了。</p>\n<p>到手第一天，根据6088vpn漏洞，刷了<code>ImmortalWrt</code>，加上了一块128g的ssd，装了docker一些乱起八糟的插件，体验上并不好，毕竟只有512MB内存，加上很多插件存在一些bug，引起cpu飙升。</p>\n<p>在路由器上跑docker，是不可取的，all in one + 中心化，一旦路由器某个服务出现问题，家里直接没网。最终只保留了<code>mosdns，wireguard，homeproxy</code>以及自己用shell写的ddns。十分稳定，mtk确实可以，平均负载基本都是0。</p>\n<p><img data-src=\"https://static.bysegfault.com/images/20240430103013.png\" alt=\"Pasted image 20240430103013.png\" /></p>\n<h3 id=\"插件吐槽\"><a class=\"markdownIt-Anchor\" href=\"#插件吐槽\"></a> 插件吐槽</h3>\n<p>这里不得不插一嘴，插件的选择，其实openwrt很稳定的，搞懂之后，结合自己的路由器和一些老哥的前车之鉴做一些小调整，上网体验没得说。</p>\n<p>很多不稳定是插件导致的，比如最早我使用的openclash，因为fakeip导致平时网络工具经常无法正常使用，像ping等，折腾了许久配置，前前后后redirect等方案都在openclash上进行了尝试，然而还是会在使用几天后，莫名的国内访问延迟上涨，跳点大。甚至去读了一部分metaclash源码，写的很一般。后来换成了pw，pw更是卧龙凤雏，开启大陆优化，国内延迟会降到没开pw时的大小，和openclash一样，大概2天左右，就会跳点变大，cpu飙升。<br />\n结合日志，加上cpu和内存根本没到瓶颈，也不是mosdns的问题，不得其解。</p>\n<p>后来看到了sing-box内核，简单测试了一下，占用和性能都比clash要好，就选择了基于sing-box的homeproxy，仅仅踩了一些分流的坑，界面上也要简洁很多。国内速度和没开代理一样，用的bwg gia hy2，没感觉有晚高峰什么的，一直很流畅稳定。<br />\n（分流的坑是因为GPT网页开启了http/3，如果不开启udp服务器代理或者不禁用它，就无法正常使用。</p>\n<hr />\n<p>docker的需求都交给了腾讯云，通过ipv6 wireguard回家访问，而且硬路由还有硬件加速，实在想不出，软路由有什么好的，还多了一跳。</p>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\"></a> 总结</h2>\n<p>路由器今非昔比，路由器有10胜，软路由有10败。</p>\n<p>路由器有硬件加速，软路由没有，此乃一胜。<br />\n路由器已经一胜了，软路由零胜，此乃二胜。<br />\n路由器已经二胜了，软路由零胜，此乃三胜。<br />\n路由器已经三胜了，软路由零胜，此乃四胜。<br />\n路由器已经四胜了，软路由零胜，此乃五胜。<br />\n路由器已经五胜了，软路由零胜，此乃六胜。<br />\n路由器已经六胜了，软路由零胜，此乃七胜。<br />\n路由器已经七胜了，软路由零胜，此乃八胜。<br />\n路由器已经八胜了，软路由零胜，此乃九胜。<br />\n路由器已经九胜了，软路由零胜，此乃十胜。</p>\n",
            "tags": [
                "openwrt",
                "log"
            ]
        },
        {
            "id": "https://blog.bysegfault.com/log/openwrt/shell-ddns/",
            "url": "https://blog.bysegfault.com/log/openwrt/shell-ddns/",
            "title": "用shell写一个ddns",
            "date_published": "2023-09-17T12:40:56.000Z",
            "content_html": "<h2 id=\"ddns\"><a class=\"markdownIt-Anchor\" href=\"#ddns\"></a> DDNS</h2>\n<p>假设有这样一种场景，有台服务器的<code>IP</code>每个一段时间会变化，而我们访问这台机器时，就可能因为这台机器的<code>IP</code>发生了变化，导致不能访问，必须到那台机器上，获取到新的<code>IP</code>地址才能进行访问，这十分的痛苦。</p>\n<p><code>DNS</code>可以把<code>IP</code>和<code>domain(域名)</code>进行映射，让我们可以通过域名就可以找到<code>IP</code>，然后对机器进行访问，如此一来，当服务器<code>IP</code>发生变化时，我们只需要把域名的<code>DNS</code>解析换成新的<code>IP</code>，其他设备用域名访问服务器，就感知不到<code>IP</code>发生了变化。可是手动档换<code>DNS</code>解析并不是一个好主意。</p>\n<p><code>DDNS(Dynamic DNS)</code>可以动态解析<code>IP</code>，当检测到<code>IP</code>发生了变化，就会自动换<code>DNS</code>解析，竟有此等技术，方可高枕无忧。</p>\n<h2 id=\"用shell实现一个simple-ddns\"><a class=\"markdownIt-Anchor\" href=\"#用shell实现一个simple-ddns\"></a> 用shell实现一个simple DDNS</h2>\n<p>DDNS实现方案很多，最简单粗暴的莫过于</p>\n<ol>\n<li>获取本地<code>IP</code></li>\n<li>获取域名<code>IP</code></li>\n<li>比较<code>IP</code>是否相同，如果相同就使用<code>API</code>更新<code>DNS</code></li>\n<li>定时运行上面步骤</li>\n</ol>\n<p><code>shell</code>方案中所用工具</p>\n<ul>\n<li><code>dig｜nslookup</code>等<code>DNS</code>查询工具获取域名<code>IP</code> 。</li>\n<li><code>ip｜ipconfig</code>等命令获取到本机<code>IP</code>。</li>\n<li><code>curl</code>发送网络请求，进行更换<code>DNS</code>解析</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 这是ipv6的例子</span>\n\n<span class=\"token assign-left variable\">ipv6_address</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">ip</span> <span class=\"token parameter variable\">-6</span> addr show br-lan <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> <span class=\"token string\">'/inet6 .*global/&#123;gsub(/\\/[0-9]+/, \"\", $2); print $2&#125;'</span><span class=\"token variable\">)</span></span>\n\n<span class=\"token assign-left variable\">ipv6_older</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">dig</span> AAAA baidu.com +short<span class=\"token variable\">)</span></span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$ipv6_address</span>\"</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\"<span class=\"token variable\">$ipv6_older</span>\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n        <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$ipv6_address</span>\n        <span class=\"token function\">curl</span> <span class=\"token parameter variable\">-u</span> <span class=\"token string\">\"xxx\"</span>\n<span class=\"token keyword\">fi</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>最后再用<code>crontab -e</code>，添加一个定时任务，完结撒花。</p>\n",
            "tags": [
                "shell",
                "DDNS"
            ]
        },
        {
            "id": "https://blog.bysegfault.com/vector-record-tool/",
            "url": "https://blog.bysegfault.com/vector-record-tool/",
            "title": "vector日志采集-快速开始",
            "date_published": "2023-09-10T14:07:48.000Z",
            "content_html": "<blockquote>\n<p>本文默认已经有一丢丢lua基础</p>\n</blockquote>\n<h2 id=\"vector-采集流程\"><a class=\"markdownIt-Anchor\" href=\"#vector-采集流程\"></a> vector 采集流程</h2>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/20230910222313.png\" alt=\"\" /></p>\n<p>vector官网给出的三步走战略，结合具体配置，设置采集源头—&gt;进行数据转换—&gt;保存转换好的数据。</p>\n<pre class=\"line-numbers language-toml\" data-language=\"toml\"><code class=\"language-toml\"><span class=\"token comment\"># 从哪采集</span>\n<span class=\"token punctuation\">[</span><span class=\"token table class-name\">sources.generate_syslog</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">type</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"demo_logs\"</span>\n<span class=\"token key property\">format</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"syslog\"</span>\n<span class=\"token key property\">count</span> <span class=\"token punctuation\">=</span> <span class=\"token number\">100</span>\n\n<span class=\"token comment\"># 数据转换</span>\n<span class=\"token punctuation\">[</span><span class=\"token table class-name\">transforms.remap_syslog</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">inputs</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"generate_syslog\"</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 转换的输入来自generate_syslog过程的返回值</span>\n<span class=\"token key property\">type</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"remap\"</span>\n<span class=\"token key property\">source</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">'''\n  structured = parse_syslog!(.message)\n  . = merge(., structured)\n'''</span>\n\n<span class=\"token comment\">#保存到哪</span>\n<span class=\"token punctuation\">[</span><span class=\"token table class-name\">sinks.emit_syslog</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">inputs</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"remap_syslog\"</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># 保存的输入来自remap_syslog过程的返回值</span>\n<span class=\"token key property\">type</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"console\"</span>          <span class=\"token comment\"># 把结果直接输出到终端上</span>\n<span class=\"token key property\">encoding.codec</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"json\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这相当的友好，除了toml配置，你还能使用<code>json</code>或者<s>需要游标卡尺的</s><code>yaml</code>。</p>\n<h2 id=\"采集实战\"><a class=\"markdownIt-Anchor\" href=\"#采集实战\"></a> 采集实战</h2>\n<p>采集源头（sources）和 保存到哪（sinks）设置起来很容易，官网给出了相关的文档，你能看到很多sources、sink以及我们即将重点实战的数据转换（transforms）。</p>\n<h3 id=\"实战案例背景\"><a class=\"markdownIt-Anchor\" href=\"#实战案例背景\"></a> 实战案例背景</h3>\n<p>假设有一个程序会通过syslog输出日志，我们需要采集含有<code>ohayo</code>字符串的日志，并把它保存到一个文件中。</p>\n<p>采集源头：syslog<br />\n数据转换需求：含有<code>ohayo</code>字符串的日志<br />\n保存：文件</p>\n<h3 id=\"vector-采集配置\"><a class=\"markdownIt-Anchor\" href=\"#vector-采集配置\"></a> vector 采集配置</h3>\n<p>采集源头，监听本机的<code>/dev/log</code>套接字，syslog与vector会通过这个套接字进行进程间通信。</p>\n<pre class=\"line-numbers language-toml\" data-language=\"toml\"><code class=\"language-toml\"><span class=\"token punctuation\">[</span><span class=\"token table class-name\">sources.syslog_1</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">type</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"socket\"</span>      <span class=\"token comment\"># 类型采用套接字方式</span>\n<span class=\"token key property\">mode</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"unix_stream\"</span> <span class=\"token comment\"># 采用unix流的方式</span>\n<span class=\"token key property\">path</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"/dev/log\"</span>    <span class=\"token comment\"># 监听套接字路径</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>数据转换，这里我使用的是lua，vector官网在极力推它们的remap，甚至给出<code>lua5.4比remap慢了60% &amp;&amp; lua只能在运行时才会出现问题，这不安全</code>的恐怖言论。<br />\nO(2n)、O(3n)都是O(n)，长板凳、矮板凳都是板凳。根据剃刀原理…这就是我选lua的理由。</p>\n<p>PS: remap在面对格式规范的日志输出，要比lua更加方便。而且在启动vector时会进行静态检查。</p>\n<p>让我们先看一下，lua怎么在vector中转换数据的吧！下图是官网文档。<br />\n<img data-src=\"https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/Pasted%20image%2020230908191517.png\" alt=\"Pasted image 20230908191517.png\" /></p>\n<p>vector需要我们在配置中注册三个函数，<code>init | process | shutdown</code>，<code>第一条日志</code>来的时候，会执行<code>init</code>函数，然后会执行<code>process</code>，当转换结束时，会执行<code>shutdown</code>。<br />\n注意，init只有在第一条日志来的时候才执行，shutdown在关闭时执行，而process在每条日志来的时候都会执行。</p>\n<p>结合配置格式填写如下</p>\n<pre class=\"line-numbers language-toml\" data-language=\"toml\"><code class=\"language-toml\"><span class=\"token punctuation\">[</span><span class=\"token table class-name\">transforms.milestone_syslog_2</span><span class=\"token punctuation\">]</span>\n  <span class=\"token comment\"># General</span>\n<span class=\"token key property\">type</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"lua\"</span> <span class=\"token comment\"># 转换类型lua</span>\n<span class=\"token key property\">version</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"2\"</span> <span class=\"token comment\"># 转换api版本，1已经被弃用了。</span>\n<span class=\"token key property\">inputs</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"milestone_syslog_1\"</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># 从采集源头获取数据</span>\n<span class=\"token key property\">search_dirs</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"scripts\"</span><span class=\"token punctuation\">]</span>       <span class=\"token comment\"># lua导包的搜寻路径。这里是相对路径./scripts</span>\n<span class=\"token key property\">source</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"rd = require('record')\"</span>  <span class=\"token comment\"># 引入资源，这里面可以写代码哦</span>\n<span class=\"token key property\">hooks.process</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"rd.process\"</span>       <span class=\"token comment\"># 注册 process函数</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token comment\">-- @filename record.lua</span>\n<span class=\"token keyword\">local</span> M <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> M<span class=\"token punctuation\">.</span><span class=\"token function\">process</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> emit<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> string<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span> <span class=\"token keyword\">then</span>\n\t\t<span class=\"token function\">emit</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">return</span> M<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>解释一下，vector会把每一个从source采集日志，包装成一个table，日志的内容可以用<code>event.log.message</code>获取，<code>emit</code>函数会把<code>event</code>结构的table发送到sink存储层进行保存。<br />\n保存的内容是 <code>event.log</code>，这个table的格式如下。<br />\n<img data-src=\"https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/20230910221924.png\" alt=\"image.png\" /></p>\n<p>接着设置保存，从转换层（transform）拿到数据，编码成text，设置保存路径即可。</p>\n<pre class=\"line-numbers language-toml\" data-language=\"toml\"><code class=\"language-toml\"><span class=\"token punctuation\">[</span><span class=\"token table class-name\">sinks.milestone_record_file</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">type</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"file\"</span>\n<span class=\"token key property\">inputs</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"milestone_syslog_2\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">idle_timeout_secs</span> <span class=\"token punctuation\">=</span> <span class=\"token number\">30</span>\n<span class=\"token key property\">encoding.codec</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"text\"</span>\n<span class=\"token key property\">path</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"/tmp/vector-%Y-%m-%d.log\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>完整配置文件如下</p>\n<pre class=\"line-numbers language-toml\" data-language=\"toml\"><code class=\"language-toml\"><span class=\"token punctuation\">[</span><span class=\"token table class-name\">sources.syslog_1</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">type</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"socket\"</span>      <span class=\"token comment\"># 类型采用套接字方式</span>\n<span class=\"token key property\">mode</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"unix_stream\"</span> <span class=\"token comment\"># 采用unix流的方式</span>\n<span class=\"token key property\">path</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"/dev/log\"</span>    <span class=\"token comment\"># 监听套接字路径</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token table class-name\">transforms.milestone_syslog_2</span><span class=\"token punctuation\">]</span>\n  <span class=\"token comment\"># General</span>\n<span class=\"token key property\">type</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"lua\"</span> <span class=\"token comment\"># 转换类型lua</span>\n<span class=\"token key property\">version</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"2\"</span> <span class=\"token comment\"># 转换api版本，1已经被弃用了。</span>\n<span class=\"token key property\">inputs</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"milestone_syslog_1\"</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># 从采集源头获取数据</span>\n<span class=\"token key property\">search_dirs</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"scripts\"</span><span class=\"token punctuation\">]</span>       <span class=\"token comment\"># lua导包的搜寻路径。这里是相对路径./scripts</span>\n<span class=\"token key property\">source</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"rd = require('record')\"</span>  <span class=\"token comment\"># 引入资源，这里面可以写代码哦,这个lua文件是自己写的哦。</span>\n<span class=\"token key property\">hooks.process</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"rd.process\"</span>       <span class=\"token comment\"># 注册 process函数</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token table class-name\">sinks.milestone_record_file</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">type</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"file\"</span>\n<span class=\"token key property\">inputs</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"milestone_syslog_2\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">idle_timeout_secs</span> <span class=\"token punctuation\">=</span> <span class=\"token number\">30</span>\n<span class=\"token key property\">encoding.codec</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"text\"</span>\n<span class=\"token key property\">path</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"/tmp/vector-%Y-%m-%d.log\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>sudo vector --config xxx.toml</code>就可以进行采集了。</p>\n<hr />\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\"></a> 总结</h2>\n<p>如果你对lua有一定了解，那么这篇文章就够了，你可以在转换层做全部事情。BTW，官网文档对各种API写的相当全，比较不错的参看。本文对快速开始使用vector来说已经足够了，如果你的日志是标准内容，请首选remap，快是真的快。</p>\n",
            "tags": [
                "vector日志采集"
            ]
        },
        {
            "id": "https://blog.bysegfault.com/log/openwrt/openwrt-dns/",
            "url": "https://blog.bysegfault.com/log/openwrt/openwrt-dns/",
            "title": "openwrt插件篇-openclash&adguardhome",
            "date_published": "2023-09-03T12:59:49.000Z",
            "content_html": "<p>DNS（<strong>D</strong>omain <strong>N</strong>ame <strong>S</strong>ystem），网络域名系统。可以把它对应手机里的联系人，通过联系人的名字就可以找到电话号码，也能通过手机号找到对应联系人的信息，从而能够准确给特定人拨打电话或者发短信等等。而DNS会把网络域名转换成ip，也能把ip转换成网络域名。</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/20230903211232.png\" alt=\"image.png\" /></p>\n<h2 id=\"adguardhome\"><a class=\"markdownIt-Anchor\" href=\"#adguardhome\"></a> AdguardHome</h2>\n<p>AdguardHome 是一个本地DNS转发器，同时能过滤广告或者网站等，<code>GitHub</code>开源。下文简称为ADHome。<br />\n值得庆幸的是，ADHome在openwrt上也能用，首先说一下这个软件能带来哪些好处。</p>\n<p>在上图，浏览一个网站时，会先进行DNS查询，获取网站的IP，这个过程十分慢，会极大影响上网体验，其次在我们连接到Wi-Fi上网时，很可能我们正在使用的设备DNS会被劫持，也就是说不是<code>8.8.8.8|1.1.1.1</code>等公共的DNS服务器，它可能是某个老油条自己搭建的一个，同时把你想访问的网站ip，换成他设定的，这就十分的危险了。</p>\n<p>把DNS默认设置为ADHome的DNS服务端口，你的每一条DNS请求都会走ADHome的DNS服务，就可以防止DNS被劫持，同时为ADHome设置一些公共的DNS服务器上游，在收到DNS请求时，它会并发向这些上游DNS服务器请求，根据你的选择，可以返回最快的，也可以是其他情况。</p>\n<p>如此说来，ADHome兼并smartdns等软件的功能，同时还具备过滤功能，可以设置黑名单来屏蔽广告等。没有理由不装！！！<a href=\"https://github.com/rufengsuixing/luci-app-adguardhome\">openwrt链接</a></p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/20230903214014.png\" alt=\"image.png\" /></p>\n<p>以下是我的dns备用</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\"># 上游服务器\n114.114.114.114\n223.5.5.5\n180.76.76.76\n1.1.1.1\n8.8.8.8\n8.8.4.4\n117.50.10.10\n180.184.1.1\n101.101.101.101\nhttps://public.dns.iij.jp/dns-query\nhttps://dns.google/dns-query\nhttps://1.1.1.1/dns-query<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>去广告用的是anti-ad公开的广告库—&gt;<a href=\"https://anti-ad.net/easylist.txt\">传送</a><br />\n<img data-src=\"https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/20230903214228.png\" alt=\"image.png\" /></p>\n<h2 id=\"openclash\"><a class=\"markdownIt-Anchor\" href=\"#openclash\"></a> openclash</h2>\n<p>openclash是clash的openwrt版本，安装完meta内核，基本和电脑端的规则兼容，一套规则，全平台使用，还是很不错滴。<br />\n就不过多写这个了。</p>\n<h2 id=\"openclashadhome\"><a class=\"markdownIt-Anchor\" href=\"#openclashadhome\"></a> openclash+ADHome</h2>\n<p>这才是硬路由的终极方案，openclash劫持53端口的DNS转发，同时将openclash的DNS上游设置为ADHome。<br />\n如此一来，DNS请求—&gt;53端口DNS—&gt;openclash—&gt;ADHome。</p>\n<p>openclash配置如下，其中8053为ADHome服务端口。<br />\n<img data-src=\"https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/20230903215059.png\" alt=\"image.png\" /></p>\n<p>ADHome配置如下<br />\n<img data-src=\"https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/20230903215153.png\" alt=\"image.png\" /></p>\n<h2 id=\"dns测速对比\"><a class=\"markdownIt-Anchor\" href=\"#dns测速对比\"></a> DNS测速对比</h2>\n<p>根据使用情况，smartdns与ADHome dns查询速度基本一致，这里对比的是smartdns与正常情况下的DNS。<br />\n速率对比是玄学，主要用途是为了防止DNS被劫持。</p>\n<p>正常情况如下<br />\n<img data-src=\"https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/20230903215643.png\" alt=\"image.png\" /></p>\n<p>使用smartdns情况如下<br />\n<img data-src=\"https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/20230903215805.png\" alt=\"image.png\" /></p>\n<p>尽管dns查询速度这块是玄学，实际使用上来说，提升是有的，搭配openclash秒开YouTube。</p>\n<p>最后不得不说6088这款路由器，真滴强，openclash➕ADHome等应用一点压力都没。<br />\n<img data-src=\"https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/20230903220047.png\" alt=\"image.png\" /></p>\n<hr />\n<p>想把博客从hexo转移到hugo，之前改的配置，都不记得改了那里，很难受，算了，先这样吧，等11.11买完新电脑，再迁移吧。</p>\n",
            "tags": [
                "openwrt"
            ]
        },
        {
            "id": "https://blog.bysegfault.com/log/openwrt/tl6088/",
            "url": "https://blog.bysegfault.com/log/openwrt/tl6088/",
            "title": "tl6088刷机之旅",
            "date_published": "2023-08-27T15:16:59.000Z",
            "content_html": "<p>最近又换了一台路由器，TP-link-6088，因为上个月买了台switch，无论怎么换DNS，下载速度依旧感人至深。转手就把小米AX6000卖了，其实小米AX6000已经能满足我的日常的绝大需求，唯一缺点就是自由度不够，迟来的switch打破昔日的平静。</p>\n<h2 id=\"为啥选择tl6088\"><a class=\"markdownIt-Anchor\" href=\"#为啥选择tl6088\"></a> 为啥选择tl6088？</h2>\n<p>对，这是个好问题，身为一个小垃圾佬，先后了解很多路由器，结合我的需求，要能刷openwrt，运行内存至少要512，CPU要好一些，处理网络数据包的同时，要留有余地去跑一些第三方服务。闪存要高一些，至少64。<br />\n最重要的是价格一定要便宜！！！<br />\n如此这般，候选路由器1号----红米ax6000，2号----tl6088，3号----tl6080。<br />\n红米ax6000在配置上几乎与6088完全一样，加上是米家的路由器，再熟悉不过，可惜没有2.5G网口，惨遭淘汰。<br />\n6088和6080，jd搞活动，价格相差不大，最终选择了6088，6百多拿下。</p>\n<h2 id=\"刷机openwrt\"><a class=\"markdownIt-Anchor\" href=\"#刷机openwrt\"></a> 刷机openwrt</h2>\n<p>tp家的路由器和米家的不一样，我看很多论坛上说tp的刷机过程比较繁琐。之前玩的红米ax6，刷机已经很繁琐了。我敲，这不会又是一个通宵吧。</p>\n<p>还好小马过河，实际比红米ax6省事不少，利用6088的vpn漏洞，注入刷机包，再通过tftp服务，把recover传入，整体过程一气呵成，大概20分钟，就刷完了。</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/20230827235738.png\" alt=\"image.png\" /></p>\n<p>具体的参考文章可以看===&gt;<a href=\"https://blog.lishun.me/tl-xdr608x-openwrt-install\">这篇文章</a>，作者很谨慎，传输的文件都加了md5验证文件唯一性，胆大心细，十分nice。</p>\n<h2 id=\"配置openwrt\"><a class=\"markdownIt-Anchor\" href=\"#配置openwrt\"></a> 配置openwrt</h2>\n<p>家里的电线光猫，全国通用密码，直接8080端口找到老web地址，把宽带账号&amp;&amp;密码记下来，删除第三个路由模式，创建一个桥接模式，钩上端口，最后关闭光猫的DHCP。</p>\n<p>openwrt这边就容易多了，我用的是wan6接口拨号上网，其他默认就行。最后设置完Wi-Fi密码，把国家代码改成AU，澳大利亚提高无线功率。</p>\n<h3 id=\"插件\"><a class=\"markdownIt-Anchor\" href=\"#插件\"></a> 插件</h3>\n<p>openwrt最好玩儿的地方。</p>\n<p>我目前安装的插件</p>\n<ul>\n<li>open clash</li>\n<li>smartdns</li>\n<li>upnp</li>\n<li>uu加速器</li>\n</ul>\n<p>smartdns具有很好的dns查询效果，自己设置完上游dns后，网页打开能快不少，不是吹的。</p>\n<p>smartdns作为openclash的上游dns，有很好的加速效果，upnp就不用多说了，必装插件，打游戏嗖嗖滴。</p>\n<p>uu加速器，害，一个臭打游戏的插件，加速主机，要什么小黑盒，都没用。</p>\n<hr />\n<p>简单记录一下新路由器的之旅，openwrt还有很多地方不懂，这周会开始逐步搞懂，最后记录一个通用的图文配置，以备不时之需。</p>\n<p>唉，这周之前不到2刀买的域名过期了，导致我一堆的服务都歇菜了，azure for student 订阅也没多少了，希望黑5能找到好机子，下周会先配置完nvim，然后研究一下ws协议等，没有这些东西，程序员简直没法生活啊。抽空会更新c语言&amp;&amp;汇编。</p>\n",
            "tags": [
                "openwrt"
            ]
        },
        {
            "id": "https://blog.bysegfault.com/learning/openProject/skynet/skynet-02/",
            "url": "https://blog.bysegfault.com/learning/openProject/skynet/skynet-02/",
            "title": "skynet源码学习（粗略版）",
            "date_published": "2023-06-04T04:46:57.000Z",
            "content_html": "<p>本文从skynet的main入口开始，梳理skynet运行流程，中间很多东西不会解释，必要的一些细节还是会解释滴，旨在梳理清楚skynet如何工作、启动skynet项目，发生了什么？后续将带着以下问题开始。</p>\n<ul>\n<li>skynet服务如何工作？skynet服务是什么？</li>\n<li>服务之间如何传递信息？</li>\n<li>一个服务如何启动？</li>\n</ul>\n<p>btw，本文需要有一定的c语言基础、lua基础以及较为重要的lua与c交互的相关知识。</p>\n<h2 id=\"main入口\"><a class=\"markdownIt-Anchor\" href=\"#main入口\"></a> main入口</h2>\n<p>main函数首先，检测了配置文件，配置节点，TSD，初始化skynet环境，设置信号量。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">lua_State</span> <span class=\"token operator\">*</span>L <span class=\"token operator\">=</span> <span class=\"token function\">luaL_newstate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">luaL_openlibs</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// link lua lib</span>\n<span class=\"token keyword\">int</span> err <span class=\"token operator\">=</span>  <span class=\"token function\">luaL_loadbufferx</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> load_config<span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>load_config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"=[skynet config]\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"t\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>err <span class=\"token operator\">==</span> LUA_OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">lua_pushstring</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> config_file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nerr <span class=\"token operator\">=</span> <span class=\"token function\">lua_pcall</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">lua_tostring</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lua_close</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">_init_env</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconfig<span class=\"token punctuation\">.</span>thread <span class=\"token operator\">=</span>  <span class=\"token function\">optint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"thread\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconfig<span class=\"token punctuation\">.</span>module_path <span class=\"token operator\">=</span> <span class=\"token function\">optstring</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cpath\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"./cservice/?.so\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconfig<span class=\"token punctuation\">.</span>harbor <span class=\"token operator\">=</span> <span class=\"token function\">optint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"harbor\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconfig<span class=\"token punctuation\">.</span>bootstrap <span class=\"token operator\">=</span> <span class=\"token function\">optstring</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bootstrap\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"snlua bootstrap\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconfig<span class=\"token punctuation\">.</span>daemon <span class=\"token operator\">=</span> <span class=\"token function\">optstring</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"daemon\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconfig<span class=\"token punctuation\">.</span>logger <span class=\"token operator\">=</span> <span class=\"token function\">optstring</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"logger\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconfig<span class=\"token punctuation\">.</span>logservice <span class=\"token operator\">=</span> <span class=\"token function\">optstring</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"logservice\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"logger\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconfig<span class=\"token punctuation\">.</span>profile <span class=\"token operator\">=</span> <span class=\"token function\">optboolean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"profile\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">lua_close</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>main中创建了一个lua栈，把配置文件的内容压入栈里，通过lua脚本，设置到skynet环境中。</p>\n <pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#加载config的lua脚本\n <span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> load_config <span class=\"token operator\">=</span> <span class=\"token string\">\"\\\n\tlocal result = &#123;&#125;\\n\\\n\tlocal function getenv(name) return assert(os.getenv(name), [[os.getenv() failed: ]] .. name) end\\n\\\n\tlocal sep = package.config:sub(1,1)\\n\\\n\tlocal current_path = [[.]]..sep\\n\\\n\tlocal function include(filename)\\n\\\n\t\tlocal last_path = current_path\\n\\\n\t\tlocal path, name = filename:match([[(.*]]..sep..[[)(.*)$]])\\n\\\n\t\tif path then\\n\\\n\t\t\tif path:sub(1,1) == sep then\t-- root\\n\\\n\t\t\t\tcurrent_path = path\\n\\\n\t\t\telse\\n\\\n\t\t\t\tcurrent_path = current_path .. path\\n\\\n\t\t\tend\\n\\\n\t\telse\\n\\\n\t\t\tname = filename\\n\\\n\t\tend\\n\\\n\t\tlocal f = assert(io.open(current_path .. name))\\n\\\n\t\tlocal code = assert(f:read [[*a]])\\n\\\n\t\tcode = string.gsub(code, [[%$([%w_%d]+)]], getenv)\\n\\\n\t\tf:close()\\n\\\n\t\tassert(load(code,[[@]]..filename,[[t]],result))()\\n\\\n\t\tcurrent_path = last_path\\n\\\n\tend\\n\\\n\tsetmetatable(result, &#123; __index = &#123; include = include &#125; &#125;)\\n\\\n\tlocal config_name = ...\\n\\\n\tinclude(config_name)\\n\\\n\tsetmetatable(result, nil)\\n\\\n\treturn result\\n\\\n\"</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>后续就可以通过skynet环境读取到配置文件的信息啦。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">config<span class=\"token punctuation\">.</span>thread <span class=\"token operator\">=</span>  <span class=\"token function\">optint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"thread\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconfig<span class=\"token punctuation\">.</span>module_path <span class=\"token operator\">=</span> <span class=\"token function\">optstring</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cpath\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"./cservice/?.so\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconfig<span class=\"token punctuation\">.</span>harbor <span class=\"token operator\">=</span> <span class=\"token function\">optint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"harbor\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconfig<span class=\"token punctuation\">.</span>bootstrap <span class=\"token operator\">=</span> <span class=\"token function\">optstring</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bootstrap\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"snlua bootstrap\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconfig<span class=\"token punctuation\">.</span>daemon <span class=\"token operator\">=</span> <span class=\"token function\">optstring</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"daemon\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconfig<span class=\"token punctuation\">.</span>logger <span class=\"token operator\">=</span> <span class=\"token function\">optstring</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"logger\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconfig<span class=\"token punctuation\">.</span>logservice <span class=\"token operator\">=</span> <span class=\"token function\">optstring</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"logservice\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"logger\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconfig<span class=\"token punctuation\">.</span>profile <span class=\"token operator\">=</span> <span class=\"token function\">optboolean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"profile\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我们拿<code>config.thread =  optint(&quot;thread&quot;,8);</code>举例，后面optstring都是类似的。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span>\n<span class=\"token function\">optint</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> opt<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> str <span class=\"token operator\">=</span> <span class=\"token function\">skynet_getenv</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//如果配置文件没有配置这个key，就用默认的参数，在optint(\"thread\",8)中就是8.</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>str <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">char</span> tmp<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">,</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span>opt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">skynet_setenv</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//把默认的参数写入skynet环境中。</span>\n\t\t<span class=\"token keyword\">return</span> opt<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">strtol</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//配置文件中有key的配置，把字符串转int值返回。</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>加载完配置文件后，会关闭临时用的lua栈，然后来到最重要的环节----根据配置，启动skynet。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">skynet_start</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// &lt;==我们主要通过这个，就可以知道skynet的启动流程了</span>\n<span class=\"token function\">skynet_globalexit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"启动流程\"><a class=\"markdownIt-Anchor\" href=\"#启动流程\"></a> 启动流程</h2>\n<p><code>skynet_start</code>中，首先也注册了信号量，紧接着检测是否设置为守护进程。</p>\n<p>后面的部分，才是我们主要分析的地方。<br />\n这个函数首先进行了节点、handle、消息队列、模块、定时器、socket的初始化以及开启性能分析。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">skynet_harbor_init</span><span class=\"token punctuation\">(</span>config<span class=\"token operator\">-></span>harbor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">skynet_handle_init</span><span class=\"token punctuation\">(</span>config<span class=\"token operator\">-></span>harbor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">skynet_mq_init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">skynet_module_init</span><span class=\"token punctuation\">(</span>config<span class=\"token operator\">-></span>module_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">skynet_timer_init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">skynet_socket_init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">skynet_profile_enable</span><span class=\"token punctuation\">(</span>config<span class=\"token operator\">-></span>profile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我们知道skynet中服务地址的构成。高八位是节点地址，低24位是服务地址。<br />\n<img data-src=\"https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go@master/img/Pasted%20image%2020230604183714.png\" alt=\"Pasted image 20230604183714\" /></p>\n<p>而<code>skynet_harbor_init</code>仅仅只做了一件事，把高8位设置为配置文件的节点号。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span>\n<span class=\"token function\">skynet_harbor_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> harbor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tHARBOR <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>harbor <span class=\"token operator\">&lt;&lt;</span> HANDLE_REMOTE_SHIFT<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在<code>skynet_handle_init</code>中主要为了，初始化一张全局handle操作的<code>地址表H</code>。<br />\n<code>skynet_mq_init</code>中创建一个全局队列。<br />\n<code>skynet_module_init</code>中创建了一个全局模块表，这样可以避免模块重复加载等等。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">modules</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> count<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">spinlock</span> lock<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> path<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_module</span> m<span class=\"token punctuation\">[</span>MAX_MODULE_TYPE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>skynet_timer_init</code>中创建了一个全局定时器，用于更新时间。<br />\n<code>skynet_socket_init</code>中根据定时器提供的当前时间创建了一个socket_server，用与管理socket相关操作。</p>\n<hr />\n<p>接下来skynet启动了第一个服务——日志服务。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_context</span> <span class=\"token operator\">*</span>ctx <span class=\"token operator\">=</span> <span class=\"token function\">skynet_context_new</span><span class=\"token punctuation\">(</span>config<span class=\"token operator\">-></span>logservice<span class=\"token punctuation\">,</span> config<span class=\"token operator\">-></span>logger<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ctx <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Can't launch %s service\\n\"</span><span class=\"token punctuation\">,</span> config<span class=\"token operator\">-></span>logservice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">skynet_handle_namehandle</span><span class=\"token punctuation\">(</span><span class=\"token function\">skynet_context_handle</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"logger\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我们主要分析skynet_context_new这个函数，而skynet_handle_namehandle函数非常简单，它的作用是给服务起个名字，并插入到handle全局表H中，这里不过多展开了。</p>\n<p>skynet_context_new函数首先会查询服务的模块名。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_module</span> <span class=\"token operator\">*</span> mod <span class=\"token operator\">=</span> <span class=\"token function\">skynet_module_query</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mod <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//skynet_module_query</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这里需要分析一下mod 查询函数</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_module</span> <span class=\"token operator\">*</span> \n<span class=\"token function\">skynet_module_query</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// _query会去全局模块表M中找，看之前是否打开过该模块。如果打开过直接返回。</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_module</span> <span class=\"token operator\">*</span> result <span class=\"token operator\">=</span> <span class=\"token function\">_query</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">SPIN_LOCK</span><span class=\"token punctuation\">(</span>M<span class=\"token punctuation\">)</span>\n\n\tresult <span class=\"token operator\">=</span> <span class=\"token function\">_query</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// double check</span>\n\t<span class=\"token comment\">//如果之前没有打开过，会去设置的模块路径中查找对应的模块，进行打开。</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">&amp;&amp;</span> M<span class=\"token operator\">-></span>count <span class=\"token operator\">&lt;</span> MAX_MODULE_TYPE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> M<span class=\"token operator\">-></span>count<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> dl <span class=\"token operator\">=</span> <span class=\"token function\">_try_open</span><span class=\"token punctuation\">(</span>M<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dl<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tM<span class=\"token operator\">-></span>m<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n\t\t\tM<span class=\"token operator\">-></span>m<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>module <span class=\"token operator\">=</span> dl<span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">open_sym</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>M<span class=\"token operator\">-></span>m<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\tM<span class=\"token operator\">-></span>m<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token function\">skynet_strdup</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tM<span class=\"token operator\">-></span>count <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t\tresult <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>M<span class=\"token operator\">-></span>m<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token function\">SPIN_UNLOCK</span><span class=\"token punctuation\">(</span>M<span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">//打开成功返回skynet_module*，否则是NULL</span>\n\t<span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>模块打开后，会对模块实例化。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>inst <span class=\"token operator\">=</span> <span class=\"token function\">skynet_module_instance_create</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>inst <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_context</span> <span class=\"token operator\">*</span> ctx <span class=\"token operator\">=</span> <span class=\"token function\">skynet_malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>实例化会调用模块中的回调函数。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> \n<span class=\"token function\">skynet_module_instance_create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_module</span> <span class=\"token operator\">*</span>m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m<span class=\"token operator\">-></span>create<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> m<span class=\"token operator\">-></span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">intptr_t</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">~</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这里有一个问题，这个回调函数<code>m-&gt;create()</code>怎么来的。<br />\n这个回调函数的绑定是在查询阶段调用<code>open_sym</code>函数实现的。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>\n<span class=\"token function\">get_api</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_module</span> <span class=\"token operator\">*</span>mod<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>api_name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token class-name\">size_t</span> name_size <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>mod<span class=\"token operator\">-></span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">size_t</span> api_size <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>api_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> tmp<span class=\"token punctuation\">[</span>name_size <span class=\"token operator\">+</span> api_size <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">,</span> mod<span class=\"token operator\">-></span>name<span class=\"token punctuation\">,</span> name_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>tmp<span class=\"token operator\">+</span>name_size<span class=\"token punctuation\">,</span> api_name<span class=\"token punctuation\">,</span> api_size<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>ptr <span class=\"token operator\">=</span> <span class=\"token function\">strrchr</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">,</span> <span class=\"token char\">'.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ptr <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tptr <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\tptr <span class=\"token operator\">=</span> ptr <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">dlsym</span><span class=\"token punctuation\">(</span>mod<span class=\"token operator\">-></span>module<span class=\"token punctuation\">,</span> ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span>\n<span class=\"token function\">open_sym</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_module</span> <span class=\"token operator\">*</span>mod<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tmod<span class=\"token operator\">-></span>create <span class=\"token operator\">=</span> <span class=\"token function\">get_api</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">,</span> <span class=\"token string\">\"_create\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tmod<span class=\"token operator\">-></span>init <span class=\"token operator\">=</span> <span class=\"token function\">get_api</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">,</span> <span class=\"token string\">\"_init\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tmod<span class=\"token operator\">-></span>release <span class=\"token operator\">=</span> <span class=\"token function\">get_api</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">,</span> <span class=\"token string\">\"_release\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tmod<span class=\"token operator\">-></span>signal <span class=\"token operator\">=</span> <span class=\"token function\">get_api</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">,</span> <span class=\"token string\">\"_signal\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> mod<span class=\"token operator\">-></span>init <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>接着回到服务的创建函数，下面都是对服务的初始化。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">ctx<span class=\"token operator\">-></span>mod <span class=\"token operator\">=</span> mod<span class=\"token punctuation\">;</span>\nctx<span class=\"token operator\">-></span>instance <span class=\"token operator\">=</span> inst<span class=\"token punctuation\">;</span>\n<span class=\"token function\">ATOM_INIT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ctx<span class=\"token operator\">-></span>ref <span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token operator\">-></span>cb <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token operator\">-></span>cb_ud <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token operator\">-></span>session_id <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ATOM_INIT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ctx<span class=\"token operator\">-></span>logfile<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">uintptr_t</span><span class=\"token punctuation\">)</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nctx<span class=\"token operator\">-></span>init <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span>\nctx<span class=\"token operator\">-></span>endless <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span>\n\nctx<span class=\"token operator\">-></span>cpu_cost <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token operator\">-></span>cpu_start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token operator\">-></span>message_count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token operator\">-></span>profile <span class=\"token operator\">=</span> G_NODE<span class=\"token punctuation\">.</span>profile<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Should set to 0 first to avoid skynet_handle_retireall get an uninitialized handle</span>\nctx<span class=\"token operator\">-></span>handle <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\t\nctx<span class=\"token operator\">-></span>handle <span class=\"token operator\">=</span> <span class=\"token function\">skynet_handle_register</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//注册一个handle地址</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>紧接着重点来了，服务创建了一个消息队列，并调用模块的初始化函数，对其进行初始化，如果初始化成功，就把这个服务的消息队列推入skynet的全局中并返回ctx，否则创建服务失败，释放相关资源。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">message_queue</span> <span class=\"token operator\">*</span> queue <span class=\"token operator\">=</span> ctx<span class=\"token operator\">-></span>queue <span class=\"token operator\">=</span> <span class=\"token function\">skynet_mq_create</span><span class=\"token punctuation\">(</span>ctx<span class=\"token operator\">-></span>handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// init function maybe use ctx->handle, so it must init at last</span>\n<span class=\"token function\">context_inc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">CHECKCALLING_BEGIN</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> <span class=\"token function\">skynet_module_instance_init</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">,</span> inst<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">,</span> param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">CHECKCALLING_END</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_context</span> <span class=\"token operator\">*</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">skynet_context_release</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tctx<span class=\"token operator\">-></span>init <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">skynet_globalmq_push</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">skynet_error</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">,</span> <span class=\"token string\">\"LAUNCH %s %s\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> param <span class=\"token operator\">?</span> param <span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">skynet_error</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token string\">\"FAILED launch %s\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">uint32_t</span> handle <span class=\"token operator\">=</span> ctx<span class=\"token operator\">-></span>handle<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">skynet_context_release</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">skynet_handle_retire</span><span class=\"token punctuation\">(</span>handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">drop_t</span> d <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> handle <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">skynet_mq_release</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span> drop_message<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这里的函数都不难理解，就不做展开了。</p>\n<p>到这里一个服务就创建好了，可以得到结论，服务其实就是一个<code>skynet_context</code>结构体。</p>\n<hr />\n<p>接下来到了<code>bootstrap(ctx, config-&gt;bootstrap);</code>这步，这步的作用是启动的服务，这行代码，连接lua层，比较难，放到最后再说，不妨先理解为启动其他服务。</p>\n<h2 id=\"线程创建\"><a class=\"markdownIt-Anchor\" href=\"#线程创建\"></a> 线程创建</h2>\n<p>在各个服务都创建好后，到了<code>start(config-&gt;thread);</code>，就开始创建服务的处理线程了。<br />\n这里要先用几个图解释一下。<br />\n当服务创建好后，它的消息队列会push到skynet全局队列GQ中。<br />\n而服务本身有一个skynet_message队列，这个队列是存放其他服务发的消息的。<br />\n<img data-src=\"https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go@master/img/Pasted%20image%2020230604194028.png\" alt=\"Pasted image 20230604194028\" /><br />\n全局队列中的每个消息队列对应一个服务，而其他服务发送需要处理的消息在消息队列中的skynet_message队列中。需要注意的是，全局队列是链表的形式，而skynet_message队列是数组循环队列。</p>\n<p><code>start(config-&gt;thread);</code>会创建很多工作线程，这些工作线程从GQ中，抢消息队列，如果消息队列中有消息，就用消息队列对应服务的回调函数处理这条消息。</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go@master/img/Pasted%20image%2020230604194804.png\" alt=\"Pasted image 20230604194804\" /></p>\n<p>下面开始从源码分析这些线程是怎么创建与工作的。<br />\n在创建这些工作线程之前，先创建了监视器、定时器、socket三个线程，而监视器线程中有与工作线程数量对应的skynet_monitor监视器。<br />\n这里的在创建定时器和socket线程时也传入了监视器实例，主要目的是为了通过监视器实例来控制工作线程。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token class-name\">pthread_t</span> pid<span class=\"token punctuation\">[</span>thread<span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">monitor</span> <span class=\"token operator\">*</span>m <span class=\"token operator\">=</span> <span class=\"token function\">skynet_malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nm<span class=\"token operator\">-></span>count <span class=\"token operator\">=</span> thread<span class=\"token punctuation\">;</span>\nm<span class=\"token operator\">-></span>sleep <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\nm<span class=\"token operator\">-></span>m <span class=\"token operator\">=</span> <span class=\"token function\">skynet_malloc</span><span class=\"token punctuation\">(</span>thread <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_monitor</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>thread<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tm<span class=\"token operator\">-></span>m<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">skynet_monitor_new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">pthread_mutex_init</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>m<span class=\"token operator\">-></span>mutex<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Init mutex error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">pthread_cond_init</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>m<span class=\"token operator\">-></span>cond<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Init cond error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">create_thread</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pid<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> thread_monitor<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">create_thread</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pid<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> thread_timer<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">create_thread</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pid<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> thread_socket<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>而后才创建了工作线程，在创建工作线程时，对每个线程附加了权重还传入了对应的skynet_monitor监视器。这个权重稍后解释。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> weight<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> \n\t<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> \n\t<span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> \n\t<span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">worker_parm</span> wp<span class=\"token punctuation\">[</span>thread<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>thread<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\twp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>m <span class=\"token operator\">=</span> m<span class=\"token punctuation\">;</span>\n\twp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>weight<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>weight<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\twp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>weight<span class=\"token operator\">=</span> weight<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\twp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>weight <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">create_thread</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pid<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> thread_worker<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>wp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>thread<span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">pthread_join</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">&#125;</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>不妨看看<code>thread_worker</code>做了什么。</p>\n<p>首先通过获取权重，并通过全局监视器获取skynet_monitor监视器。当监视器没有离开时，重复循环。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>\n<span class=\"token function\">thread_worker</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">worker_parm</span> <span class=\"token operator\">*</span>wp <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> id <span class=\"token operator\">=</span> wp<span class=\"token operator\">-></span>id<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> weight <span class=\"token operator\">=</span> wp<span class=\"token operator\">-></span>weight<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">monitor</span> <span class=\"token operator\">*</span>m <span class=\"token operator\">=</span> wp<span class=\"token operator\">-></span>m<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_monitor</span> <span class=\"token operator\">*</span>sm <span class=\"token operator\">=</span> m<span class=\"token operator\">-></span>m<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">skynet_initthread</span><span class=\"token punctuation\">(</span>THREAD_WORKER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">message_queue</span> <span class=\"token operator\">*</span> q <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>m<span class=\"token operator\">-></span>quit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tq <span class=\"token operator\">=</span> <span class=\"token function\">skynet_context_message_dispatch</span><span class=\"token punctuation\">(</span>sm<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">,</span> weight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>q <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">pthread_mutex_lock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>m<span class=\"token operator\">-></span>mutex<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token operator\">++</span> m<span class=\"token operator\">-></span>sleep<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token comment\">// \"spurious wakeup\" is harmless,</span>\n\t\t\t\t<span class=\"token comment\">// because skynet_context_message_dispatch() can be call at any time.</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>m<span class=\"token operator\">-></span>quit<span class=\"token punctuation\">)</span>\n\t\t\t\t\t<span class=\"token function\">pthread_cond_wait</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>m<span class=\"token operator\">-></span>cond<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>m<span class=\"token operator\">-></span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token operator\">--</span> m<span class=\"token operator\">-></span>sleep<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">pthread_mutex_unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>m<span class=\"token operator\">-></span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"unlock mutex error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>其中<code>skynet_context_message_dispatch</code>函数是关键。</p>\n<p>这个函数首先从全局队列GQ中获取消息队列。然后从消息队列中获取handle，再从handle中获取到服务上下文。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>q <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tq <span class=\"token operator\">=</span> <span class=\"token function\">skynet_globalmq_pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>q<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token class-name\">uint32_t</span> handle <span class=\"token operator\">=</span> <span class=\"token function\">skynet_mq_handle</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_context</span> <span class=\"token operator\">*</span> ctx <span class=\"token operator\">=</span> <span class=\"token function\">skynet_handle_grab</span><span class=\"token punctuation\">(</span>handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ctx <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">drop_t</span> d <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> handle <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">skynet_mq_release</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">,</span> drop_message<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">skynet_globalmq_pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>之后就是对消息队列中skynet_message队列进行处理，这里可以知道，权重的作用。</p>\n<table>\n<thead>\n<tr>\n<th>权重</th>\n<th>消息处理数量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-1</td>\n<td>1条</td>\n</tr>\n<tr>\n<td>0</td>\n<td>全部消息</td>\n</tr>\n<tr>\n<td>1</td>\n<td>一半消息</td>\n</tr>\n<tr>\n<td>2</td>\n<td>1/4消息</td>\n</tr>\n<tr>\n<td>3</td>\n<td>1/8消息</td>\n</tr>\n</tbody>\n</table>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>n<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_message</span> msg<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">skynet_mq_pop</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">skynet_context_release</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">skynet_globalmq_pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">==</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> weight <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tn <span class=\"token operator\">=</span> <span class=\"token function\">skynet_mq_length</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tn <span class=\"token operator\">>>=</span> weight<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">int</span> overload <span class=\"token operator\">=</span> <span class=\"token function\">skynet_mq_overload</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>overload<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">skynet_error</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token string\">\"May overload, message queue length = %d\"</span><span class=\"token punctuation\">,</span> overload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token function\">skynet_monitor_trigger</span><span class=\"token punctuation\">(</span>sm<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">.</span>source <span class=\"token punctuation\">,</span> handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ctx<span class=\"token operator\">-></span>cb <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">skynet_free</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">dispatch_message</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token function\">skynet_monitor_trigger</span><span class=\"token punctuation\">(</span>sm<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这里的监视器触发函数<code>skynet_monitor_trigger</code>，主要是为了防止服务死循环。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> \n<span class=\"token function\">skynet_monitor_trigger</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_monitor</span> <span class=\"token operator\">*</span>sm<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> source<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> destination<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tsm<span class=\"token operator\">-></span>source <span class=\"token operator\">=</span> source<span class=\"token punctuation\">;</span>\n\tsm<span class=\"token operator\">-></span>destination <span class=\"token operator\">=</span> destination<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ATOM_FINC</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>sm<span class=\"token operator\">-></span>version<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> \n<span class=\"token function\">skynet_monitor_check</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_monitor</span> <span class=\"token operator\">*</span>sm<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sm<span class=\"token operator\">-></span>version <span class=\"token operator\">==</span> sm<span class=\"token operator\">-></span>check_version<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sm<span class=\"token operator\">-></span>destination<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">skynet_context_endless</span><span class=\"token punctuation\">(</span>sm<span class=\"token operator\">-></span>destination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">skynet_error</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"A message from [ :%08x ] to [ :%08x ] maybe in an endless loop (version = %d)\"</span><span class=\"token punctuation\">,</span> sm<span class=\"token operator\">-></span>source <span class=\"token punctuation\">,</span> sm<span class=\"token operator\">-></span>destination<span class=\"token punctuation\">,</span> sm<span class=\"token operator\">-></span>version<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\tsm<span class=\"token operator\">-></span>check_version <span class=\"token operator\">=</span> sm<span class=\"token operator\">-></span>version<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在监视器线程中，会不断检查工作线程的<code>skynet_monitor</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>\n<span class=\"token function\">thread_monitor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">monitor</span> <span class=\"token operator\">*</span> m <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> m<span class=\"token operator\">-></span>count<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">skynet_initthread</span><span class=\"token punctuation\">(</span>THREAD_MONITOR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tCHECK_ABORT\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">skynet_monitor_check</span><span class=\"token punctuation\">(</span>m<span class=\"token operator\">-></span>m<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tCHECK_ABORT\n\t\t\t<span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>再次回到工作线程中的<code>skynet_context_message_dispatch</code>函数，在服务有注册回调函数时，会调用<code>dispatch_message</code>进行处理，而这个函数会调用服务的回调进行消息处理。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span>\n<span class=\"token function\">dispatch_message</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_context</span> <span class=\"token operator\">*</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_message</span> <span class=\"token operator\">*</span>msg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ctx<span class=\"token operator\">-></span>init<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">CHECKCALLING_BEGIN</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">pthread_setspecific</span><span class=\"token punctuation\">(</span>G_NODE<span class=\"token punctuation\">.</span>handle_key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uintptr_t</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>ctx<span class=\"token operator\">-></span>handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> type <span class=\"token operator\">=</span> msg<span class=\"token operator\">-></span>sz <span class=\"token operator\">>></span> MESSAGE_TYPE_SHIFT<span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">size_t</span> sz <span class=\"token operator\">=</span> msg<span class=\"token operator\">-></span>sz <span class=\"token operator\">&amp;</span> MESSAGE_TYPE_MASK<span class=\"token punctuation\">;</span>\n\tFILE <span class=\"token operator\">*</span>f <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>FILE <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">ATOM_LOAD</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ctx<span class=\"token operator\">-></span>logfile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">skynet_log_output</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> msg<span class=\"token operator\">-></span>source<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span> msg<span class=\"token operator\">-></span>session<span class=\"token punctuation\">,</span> msg<span class=\"token operator\">-></span>data<span class=\"token punctuation\">,</span> sz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token operator\">++</span>ctx<span class=\"token operator\">-></span>message_count<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> reserve_msg<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ctx<span class=\"token operator\">-></span>profile<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tctx<span class=\"token operator\">-></span>cpu_start <span class=\"token operator\">=</span> <span class=\"token function\">skynet_thread_time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\treserve_msg <span class=\"token operator\">=</span> ctx<span class=\"token operator\">-></span><span class=\"token function\">cb</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> ctx<span class=\"token operator\">-></span>cb_ud<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span> msg<span class=\"token operator\">-></span>session<span class=\"token punctuation\">,</span> msg<span class=\"token operator\">-></span>source<span class=\"token punctuation\">,</span> msg<span class=\"token operator\">-></span>data<span class=\"token punctuation\">,</span> sz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">uint64_t</span> cost_time <span class=\"token operator\">=</span> <span class=\"token function\">skynet_thread_time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> ctx<span class=\"token operator\">-></span>cpu_start<span class=\"token punctuation\">;</span>\n\t\tctx<span class=\"token operator\">-></span>cpu_cost <span class=\"token operator\">+=</span> cost_time<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\treserve_msg <span class=\"token operator\">=</span> ctx<span class=\"token operator\">-></span><span class=\"token function\">cb</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> ctx<span class=\"token operator\">-></span>cb_ud<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span> msg<span class=\"token operator\">-></span>session<span class=\"token punctuation\">,</span> msg<span class=\"token operator\">-></span>source<span class=\"token punctuation\">,</span> msg<span class=\"token operator\">-></span>data<span class=\"token punctuation\">,</span> sz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>reserve_msg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">skynet_free</span><span class=\"token punctuation\">(</span>msg<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">CHECKCALLING_END</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>如此，服务如何运行的问题就基本解决了。就是通过这些工作线程不断从GQ中获取服务的消息队列，再调用服务注册的回调函数处理消息。</p>\n<hr />\n<p>让我们回到<code>bootstrap(ctx, config-&gt;bootstrap);</code>服务启动这部分。</p>\n<h2 id=\"服务启动\"><a class=\"markdownIt-Anchor\" href=\"#服务启动\"></a> 服务启动</h2>\n<p>bootstrap函数如下，举个例子，传入的是默认参数日志服务和<code>snlua bootstrap</code></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span>\n<span class=\"token function\">bootstrap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_context</span> <span class=\"token operator\">*</span> logger<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> cmdline<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> sz <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>cmdline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span>sz<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> args<span class=\"token punctuation\">[</span>sz<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> arg_pos<span class=\"token punctuation\">;</span> \n\t<span class=\"token function\">sscanf</span><span class=\"token punctuation\">(</span>cmdline<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\targ_pos <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arg_pos <span class=\"token operator\">&lt;</span> sz<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cmdline<span class=\"token punctuation\">[</span>arg_pos<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">' '</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\targ_pos<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token function\">strncpy</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">,</span> cmdline <span class=\"token operator\">+</span> arg_pos<span class=\"token punctuation\">,</span> sz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\targs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_context</span> <span class=\"token operator\">*</span>ctx <span class=\"token operator\">=</span> <span class=\"token function\">skynet_context_new</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ctx <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">skynet_error</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Bootstrap error : %s\\n\"</span><span class=\"token punctuation\">,</span> cmdline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">skynet_context_dispatchall</span><span class=\"token punctuation\">(</span>logger<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这个函数会执行<code>struct skynet_context *ctx = skynet_context_new(&quot;snlua&quot;, &quot;bootstrap&quot;);</code>创建一个snlua服务。<br />\nsnlua全名是skynet lua，它是作者自定义的lua虚拟机。<br />\n创建时，会建一个lua栈，并初始化变量。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">snlua</span> <span class=\"token punctuation\">&#123;</span>\n\tlua_State <span class=\"token operator\">*</span> L<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_context</span> <span class=\"token operator\">*</span> ctx<span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">size_t</span> mem<span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">size_t</span> mem_report<span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">size_t</span> mem_limit<span class=\"token punctuation\">;</span>\n\tlua_State <span class=\"token operator\">*</span> activeL<span class=\"token punctuation\">;</span>\n\tATOM_INT trap<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">snlua</span> <span class=\"token operator\">*</span>\n<span class=\"token function\">snlua_create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">snlua</span> <span class=\"token operator\">*</span> l <span class=\"token operator\">=</span> <span class=\"token function\">skynet_malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tl<span class=\"token operator\">-></span>mem_report <span class=\"token operator\">=</span> MEMORY_WARNING_REPORT<span class=\"token punctuation\">;</span>\n\tl<span class=\"token operator\">-></span>mem_limit <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tl<span class=\"token operator\">-></span>L <span class=\"token operator\">=</span> <span class=\"token function\">lua_newstate</span><span class=\"token punctuation\">(</span>lalloc<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tl<span class=\"token operator\">-></span>activeL <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ATOM_INIT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>l<span class=\"token operator\">-></span>trap <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> l<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span>\n\n<span class=\"token function\">snlua_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">snlua</span> <span class=\"token operator\">*</span>l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_context</span> <span class=\"token operator\">*</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> sz <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> tmp <span class=\"token operator\">=</span> <span class=\"token function\">skynet_malloc</span><span class=\"token punctuation\">(</span>sz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> sz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">skynet_callback</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> l <span class=\"token punctuation\">,</span> launch_cb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> self <span class=\"token operator\">=</span> <span class=\"token function\">skynet_command</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token string\">\"REG\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">uint32_t</span> handle_id <span class=\"token operator\">=</span> <span class=\"token function\">strtoul</span><span class=\"token punctuation\">(</span>self<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// it must be first message</span>\n\t<span class=\"token function\">skynet_send</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> handle_id<span class=\"token punctuation\">,</span> PTYPE_TAG_DONTCOPY<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> tmp<span class=\"token punctuation\">,</span> sz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这个服务的重点在于初始化操作，它首先通过<code>skynet_callback</code>函数设置了自己的回调函数为<code>launch_cb</code>，还拿具体例子，这个参数是默认参数&quot;bootstrap&quot;。<br />\n<code>const char * self = skynet_command(ctx, &quot;REG&quot;, NULL);</code>这段代码如果最后的参数会NULL或<code>\\0</code>返回服务的handle，如果<code>.name</code>则给服务注册名字。<br />\n而<code>uint32_t handle_id = strtoul(self+1, NULL, 16);</code>这里的<code>self+1</code>是因为self是16进制字符串，第一位是<code>:</code>。<br />\n最后向自己发一条消息，让工作线程去处理它。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">command_func</span> cmd_funcs<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"TIMEOUT\"</span><span class=\"token punctuation\">,</span> cmd_timeout <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"REG\"</span><span class=\"token punctuation\">,</span> cmd_reg <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"QUERY\"</span><span class=\"token punctuation\">,</span> cmd_query <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"NAME\"</span><span class=\"token punctuation\">,</span> cmd_name <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"EXIT\"</span><span class=\"token punctuation\">,</span> cmd_exit <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"KILL\"</span><span class=\"token punctuation\">,</span> cmd_kill <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"LAUNCH\"</span><span class=\"token punctuation\">,</span> cmd_launch <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"GETENV\"</span><span class=\"token punctuation\">,</span> cmd_getenv <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"SETENV\"</span><span class=\"token punctuation\">,</span> cmd_setenv <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"STARTTIME\"</span><span class=\"token punctuation\">,</span> cmd_starttime <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"ABORT\"</span><span class=\"token punctuation\">,</span> cmd_abort <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"MONITOR\"</span><span class=\"token punctuation\">,</span> cmd_monitor <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"STAT\"</span><span class=\"token punctuation\">,</span> cmd_stat <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"LOGON\"</span><span class=\"token punctuation\">,</span> cmd_logon <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"LOGOFF\"</span><span class=\"token punctuation\">,</span> cmd_logoff <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"SIGNAL\"</span><span class=\"token punctuation\">,</span> cmd_signal <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> \n<span class=\"token function\">skynet_command</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_context</span> <span class=\"token operator\">*</span> context<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> cmd <span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> param<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">command_func</span> <span class=\"token operator\">*</span> method <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>cmd_funcs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>method<span class=\"token operator\">-></span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">,</span> method<span class=\"token operator\">-></span>name<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">return</span> method<span class=\"token operator\">-></span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token operator\">++</span>method<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>\n<span class=\"token function\">cmd_reg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_context</span> <span class=\"token operator\">*</span> context<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> param<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>param <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">||</span> param<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>context<span class=\"token operator\">-></span>result<span class=\"token punctuation\">,</span> <span class=\"token string\">\":%x\"</span><span class=\"token punctuation\">,</span> context<span class=\"token operator\">-></span>handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> context<span class=\"token operator\">-></span>result<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'.'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">skynet_handle_namehandle</span><span class=\"token punctuation\">(</span>context<span class=\"token operator\">-></span>handle<span class=\"token punctuation\">,</span> param <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">skynet_error</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Can't register global name %s in C\"</span><span class=\"token punctuation\">,</span> param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>当工作线程拿到这条信息时，就会回调<code>launch_cb</code>函数，这里有把snlua服务的回调函数设置为NULL了，这是因为snlua只进行一次运行初始化即可，这里设置为NULL，可以保护服务初始化，而后续会把回调设置成其他。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span>\n<span class=\"token function\">launch_cb</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_context</span> <span class=\"token operator\">*</span> context<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>ud<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> type<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> session<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> source <span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> msg<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> sz<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>type <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> session <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">snlua</span> <span class=\"token operator\">*</span>l <span class=\"token operator\">=</span> ud<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">skynet_callback</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> err <span class=\"token operator\">=</span> <span class=\"token function\">init_cb</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">,</span> sz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">skynet_command</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> <span class=\"token string\">\"EXIT\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>继续调用<code>init_cb</code>，这是snlua的核心，它通过lua与c的交互，设置了环境，为了统计时间，重置了协程函数，同时设置了lua寻找模块的路径。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span>\n<span class=\"token function\">init_cb</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">snlua</span> <span class=\"token operator\">*</span>l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_context</span> <span class=\"token operator\">*</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> args<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> sz<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tlua_State <span class=\"token operator\">*</span>L <span class=\"token operator\">=</span> l<span class=\"token operator\">-></span>L<span class=\"token punctuation\">;</span>\n\tl<span class=\"token operator\">-></span>ctx <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lua_gc</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> LUA_GCSTOP<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lua_pushboolean</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">/* signal for libraries to ignore env. vars. */</span>\n\t<span class=\"token function\">lua_setfield</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> LUA_REGISTRYINDEX<span class=\"token punctuation\">,</span> <span class=\"token string\">\"LUA_NOENV\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">luaL_openlibs</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">luaL_requiref</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token string\">\"skynet.profile\"</span><span class=\"token punctuation\">,</span> init_profile<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">int</span> profile_lib <span class=\"token operator\">=</span> <span class=\"token function\">lua_gettop</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// replace coroutine.resume / coroutine.wrap</span>\n\t<span class=\"token function\">lua_getglobal</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token string\">\"coroutine\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lua_getfield</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> profile_lib<span class=\"token punctuation\">,</span> <span class=\"token string\">\"resume\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lua_setfield</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"resume\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lua_getfield</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> profile_lib<span class=\"token punctuation\">,</span> <span class=\"token string\">\"wrap\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lua_setfield</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"wrap\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">lua_settop</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> profile_lib<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">lua_pushlightuserdata</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lua_setfield</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> LUA_REGISTRYINDEX<span class=\"token punctuation\">,</span> <span class=\"token string\">\"skynet_context\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">luaL_requiref</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token string\">\"skynet.codecache\"</span><span class=\"token punctuation\">,</span> codecache <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lua_pop</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">lua_gc</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> LUA_GCGEN<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>path <span class=\"token operator\">=</span> <span class=\"token function\">optstring</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token string\">\"lua_path\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"./lualib/?.lua;./lualib/?/init.lua\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lua_pushstring</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lua_setglobal</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token string\">\"LUA_PATH\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>cpath <span class=\"token operator\">=</span> <span class=\"token function\">optstring</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token string\">\"lua_cpath\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"./luaclib/?.so\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lua_pushstring</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> cpath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lua_setglobal</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token string\">\"LUA_CPATH\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>service <span class=\"token operator\">=</span> <span class=\"token function\">optstring</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token string\">\"luaservice\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"./service/?.lua\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lua_pushstring</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> service<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lua_setglobal</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token string\">\"LUA_SERVICE\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>preload <span class=\"token operator\">=</span> <span class=\"token function\">skynet_command</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token string\">\"GETENV\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"preload\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lua_pushstring</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> preload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lua_setglobal</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token string\">\"LUA_PRELOAD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">lua_pushcfunction</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> traceback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token function\">lua_gettop</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> loader <span class=\"token operator\">=</span> <span class=\"token function\">optstring</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token string\">\"lualoader\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"./lualib/loader.lua\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> <span class=\"token function\">luaL_loadfile</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span>loader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">!=</span> LUA_OK<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">skynet_error</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Can't load %s : %s\"</span><span class=\"token punctuation\">,</span> loader<span class=\"token punctuation\">,</span> <span class=\"token function\">lua_tostring</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">report_launcher_error</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">lua_pushlstring</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> sz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tr <span class=\"token operator\">=</span> <span class=\"token function\">lua_pcall</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">!=</span> LUA_OK<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">skynet_error</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token string\">\"lua loader error : %s\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">lua_tostring</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">report_launcher_error</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">lua_settop</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">lua_getfield</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> LUA_REGISTRYINDEX<span class=\"token punctuation\">,</span> <span class=\"token string\">\"memlimit\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> LUA_TNUMBER<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">size_t</span> limit <span class=\"token operator\">=</span> <span class=\"token function\">lua_tointeger</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tl<span class=\"token operator\">-></span>mem_limit <span class=\"token operator\">=</span> limit<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">skynet_error</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Set memory limit to %.2f M\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span>limit <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1024</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">lua_pushnil</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">lua_setfield</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> LUA_REGISTRYINDEX<span class=\"token punctuation\">,</span> <span class=\"token string\">\"memlimit\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">lua_pop</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">lua_gc</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> LUA_GCRESTART<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这其中最重要是下面段代码。这段代码首先加载了loader.lua这个lua服务加载器，利用这个加载器去加载lua服务。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">//获取loader.lua的路径</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> loader <span class=\"token operator\">=</span> <span class=\"token function\">optstring</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token string\">\"lualoader\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"./lualib/loader.lua\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//加载loader.lua,r是加载结果</span>\n<span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> <span class=\"token function\">luaL_loadfile</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span>loader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">!=</span> LUA_OK<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">skynet_error</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Can't load %s : %s\"</span><span class=\"token punctuation\">,</span> loader<span class=\"token punctuation\">,</span> <span class=\"token function\">lua_tostring</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">report_launcher_error</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//把参数bootstrap压入栈中，准备传入loader中</span>\n<span class=\"token function\">lua_pushlstring</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> sz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//加载bootstrap服务。</span>\nr <span class=\"token operator\">=</span> <span class=\"token function\">lua_pcall</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">!=</span> LUA_OK<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">skynet_error</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token string\">\"lua loader error : %s\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">lua_tostring</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">report_launcher_error</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>如下是<code>loader.lua</code>的代码，第一部分，是找到对应服务文件，并加载它。第二部分是设置lua的包寻找路径，最后调用main函数启动这个服务。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> args <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">for</span> word <span class=\"token keyword\">in</span> string<span class=\"token punctuation\">.</span><span class=\"token function\">gmatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">...</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"%S+\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n\ttable<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">,</span> word<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\nSERVICE_NAME <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">local</span> main<span class=\"token punctuation\">,</span> pattern\n\n<span class=\"token keyword\">local</span> err <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">for</span> pat <span class=\"token keyword\">in</span> string<span class=\"token punctuation\">.</span><span class=\"token function\">gmatch</span><span class=\"token punctuation\">(</span>LUA_SERVICE<span class=\"token punctuation\">,</span> <span class=\"token string\">\"([^;]+);*\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n\t<span class=\"token keyword\">local</span> filename <span class=\"token operator\">=</span> string<span class=\"token punctuation\">.</span><span class=\"token function\">gsub</span><span class=\"token punctuation\">(</span>pat<span class=\"token punctuation\">,</span> <span class=\"token string\">\"?\"</span><span class=\"token punctuation\">,</span> SERVICE_NAME<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">local</span> f<span class=\"token punctuation\">,</span> msg <span class=\"token operator\">=</span> <span class=\"token function\">loadfile</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> f <span class=\"token keyword\">then</span>\n\t\ttable<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">else</span>\n\t\tpattern <span class=\"token operator\">=</span> pat\n\t\tmain <span class=\"token operator\">=</span> f\n\t\t<span class=\"token keyword\">break</span>\n\t<span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> main <span class=\"token keyword\">then</span>\n\t<span class=\"token function\">error</span><span class=\"token punctuation\">(</span>table<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\nLUA_SERVICE <span class=\"token operator\">=</span> <span class=\"token keyword\">nil</span>\npackage<span class=\"token punctuation\">.</span>path <span class=\"token punctuation\">,</span> LUA_PATH <span class=\"token operator\">=</span> LUA_PATH\npackage<span class=\"token punctuation\">.</span>cpath <span class=\"token punctuation\">,</span> LUA_CPATH <span class=\"token operator\">=</span> LUA_CPATH\n\n<span class=\"token keyword\">local</span> service_path <span class=\"token operator\">=</span> string<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">,</span> <span class=\"token string\">\"(.*/)[^/?]+$\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> service_path <span class=\"token keyword\">then</span>\n\tservice_path <span class=\"token operator\">=</span> string<span class=\"token punctuation\">.</span><span class=\"token function\">gsub</span><span class=\"token punctuation\">(</span>service_path<span class=\"token punctuation\">,</span> <span class=\"token string\">\"?\"</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\tpackage<span class=\"token punctuation\">.</span>path <span class=\"token operator\">=</span> service_path <span class=\"token operator\">..</span> <span class=\"token string\">\"?.lua;\"</span> <span class=\"token operator\">..</span> package<span class=\"token punctuation\">.</span>path\n\tSERVICE_PATH <span class=\"token operator\">=</span> service_path\n<span class=\"token keyword\">else</span>\n\t<span class=\"token keyword\">local</span> p <span class=\"token operator\">=</span> string<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">,</span> <span class=\"token string\">\"(.*/).+$\"</span><span class=\"token punctuation\">)</span>\n\tSERVICE_PATH <span class=\"token operator\">=</span> p\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">if</span> LUA_PRELOAD <span class=\"token keyword\">then</span>\n\t<span class=\"token keyword\">local</span> f <span class=\"token operator\">=</span> <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token function\">loadfile</span><span class=\"token punctuation\">(</span>LUA_PRELOAD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">f</span><span class=\"token punctuation\">(</span>table<span class=\"token punctuation\">.</span><span class=\"token function\">unpack</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\tLUA_PRELOAD <span class=\"token operator\">=</span> <span class=\"token keyword\">nil</span>\n<span class=\"token keyword\">end</span>\n\n_G<span class=\"token punctuation\">.</span>require <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>require <span class=\"token string\">\"skynet.require\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>require\n\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> table<span class=\"token punctuation\">.</span><span class=\"token function\">unpack</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>然后我们从lua层反过来看，还用上例bootstrap这个服务，服务代码如下。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> skynet <span class=\"token operator\">=</span> require <span class=\"token string\">\"skynet\"</span>\n<span class=\"token keyword\">local</span> harbor <span class=\"token operator\">=</span> require <span class=\"token string\">\"skynet.harbor\"</span>\n<span class=\"token keyword\">local</span> service <span class=\"token operator\">=</span> require <span class=\"token string\">\"skynet.service\"</span>\nrequire <span class=\"token string\">\"skynet.manager\"</span>\t<span class=\"token comment\">-- import skynet.launch, ...</span>\n\nskynet<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">local</span> standalone <span class=\"token operator\">=</span> skynet<span class=\"token punctuation\">.</span>getenv <span class=\"token string\">\"standalone\"</span>\n\n\t<span class=\"token keyword\">local</span> launcher <span class=\"token operator\">=</span> <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>skynet<span class=\"token punctuation\">.</span><span class=\"token function\">launch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"snlua\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"launcher\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\tskynet<span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".launcher\"</span><span class=\"token punctuation\">,</span> launcher<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">local</span> harbor_id <span class=\"token operator\">=</span> <span class=\"token function\">tonumber</span><span class=\"token punctuation\">(</span>skynet<span class=\"token punctuation\">.</span>getenv <span class=\"token string\">\"harbor\"</span> <span class=\"token keyword\">or</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> harbor_id <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">then</span>\n\t\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>standalone <span class=\"token operator\">==</span>  <span class=\"token keyword\">nil</span><span class=\"token punctuation\">)</span>\n\t\tstandalone <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span>\n\t\tskynet<span class=\"token punctuation\">.</span><span class=\"token function\">setenv</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"standalone\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">)</span>\n\n\t\t<span class=\"token keyword\">local</span> ok<span class=\"token punctuation\">,</span> slave <span class=\"token operator\">=</span> <span class=\"token function\">pcall</span><span class=\"token punctuation\">(</span>skynet<span class=\"token punctuation\">.</span>newservice<span class=\"token punctuation\">,</span> <span class=\"token string\">\"cdummy\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> ok <span class=\"token keyword\">then</span>\n\t\t\tskynet<span class=\"token punctuation\">.</span><span class=\"token function\">abort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">end</span>\n\t\tskynet<span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".cslave\"</span><span class=\"token punctuation\">,</span> slave<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token keyword\">if</span> standalone <span class=\"token keyword\">then</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token function\">pcall</span><span class=\"token punctuation\">(</span>skynet<span class=\"token punctuation\">.</span>newservice<span class=\"token punctuation\">,</span><span class=\"token string\">\"cmaster\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">then</span>\n\t\t\t\tskynet<span class=\"token punctuation\">.</span><span class=\"token function\">abort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">end</span>\n\t\t<span class=\"token keyword\">end</span>\n\n\t\t<span class=\"token keyword\">local</span> ok<span class=\"token punctuation\">,</span> slave <span class=\"token operator\">=</span> <span class=\"token function\">pcall</span><span class=\"token punctuation\">(</span>skynet<span class=\"token punctuation\">.</span>newservice<span class=\"token punctuation\">,</span> <span class=\"token string\">\"cslave\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> ok <span class=\"token keyword\">then</span>\n\t\t\tskynet<span class=\"token punctuation\">.</span><span class=\"token function\">abort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">end</span>\n\t\tskynet<span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".cslave\"</span><span class=\"token punctuation\">,</span> slave<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">end</span>\n\n\t<span class=\"token keyword\">if</span> standalone <span class=\"token keyword\">then</span>\n\t\t<span class=\"token keyword\">local</span> datacenter <span class=\"token operator\">=</span> skynet<span class=\"token punctuation\">.</span>newservice <span class=\"token string\">\"datacenterd\"</span>\n\t\tskynet<span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DATACENTER\"</span><span class=\"token punctuation\">,</span> datacenter<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">end</span>\n\tskynet<span class=\"token punctuation\">.</span>newservice <span class=\"token string\">\"service_mgr\"</span>\n\n\t<span class=\"token keyword\">local</span> enablessl <span class=\"token operator\">=</span> skynet<span class=\"token punctuation\">.</span>getenv <span class=\"token string\">\"enablessl\"</span>\n\t<span class=\"token keyword\">if</span> enablessl <span class=\"token keyword\">then</span>\n\t\tservice<span class=\"token punctuation\">.</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ltls_holder\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">local</span> c <span class=\"token operator\">=</span> require <span class=\"token string\">\"ltls.init.c\"</span>\n\t\t\tc<span class=\"token punctuation\">.</span><span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">end</span>\n\n\t<span class=\"token function\">pcall</span><span class=\"token punctuation\">(</span>skynet<span class=\"token punctuation\">.</span>newservice<span class=\"token punctuation\">,</span>skynet<span class=\"token punctuation\">.</span>getenv <span class=\"token string\">\"start\"</span> <span class=\"token keyword\">or</span> <span class=\"token string\">\"main\"</span><span class=\"token punctuation\">)</span>\n\tskynet<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>其中很重要的就是这个<code>local launcher = assert(skynet.launch(&quot;snlua&quot;,&quot;launcher&quot;))</code>。<br />\n当我们去创建新服务，或者是初始化lua服务，都会给launcher这个服务发消息，它不仅仅充当着启动器的角色。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">function</span> skynet<span class=\"token punctuation\">.</span><span class=\"token function\">init_service</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\tskynet_require<span class=\"token punctuation\">.</span><span class=\"token function\">init_all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">end</span>\n\t<span class=\"token keyword\">local</span> ok<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> <span class=\"token function\">xpcall</span><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">,</span> traceback<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> ok <span class=\"token keyword\">then</span>\n\t\tskynet<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"init service failed: \"</span> <span class=\"token operator\">..</span> <span class=\"token function\">tostring</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\tskynet<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".launcher\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"lua\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ERROR\"</span><span class=\"token punctuation\">)</span>\n\t\tskynet<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">else</span>\n\t\tskynet<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".launcher\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"lua\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"LAUNCHOK\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\n\n<span class=\"token keyword\">function</span> skynet<span class=\"token punctuation\">.</span><span class=\"token function\">newservice</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">...</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> skynet<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".launcher\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"lua\"</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">\"LAUNCH\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"snlua\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">...</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>而当创建新服务时，launcher服务会调用LAUNCH函数，然后再调用launch_service，而后又调用skynet.launch。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">function</span> command<span class=\"token punctuation\">.</span><span class=\"token function\">LAUNCH</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> service<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">...</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">launch_service</span><span class=\"token punctuation\">(</span>service<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">...</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> NORET\n\n<span class=\"token keyword\">end</span>\n<span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">launch_service</span><span class=\"token punctuation\">(</span>service<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">...</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">local</span> param <span class=\"token operator\">=</span> table<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">...</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">local</span> inst <span class=\"token operator\">=</span> skynet<span class=\"token punctuation\">.</span><span class=\"token function\">launch</span><span class=\"token punctuation\">(</span>service<span class=\"token punctuation\">,</span> param<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">local</span> session <span class=\"token operator\">=</span> skynet<span class=\"token punctuation\">.</span><span class=\"token function\">context</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">local</span> response <span class=\"token operator\">=</span> skynet<span class=\"token punctuation\">.</span><span class=\"token function\">response</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> inst <span class=\"token keyword\">then</span>\n\t\tservices<span class=\"token punctuation\">[</span>inst<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> service <span class=\"token operator\">..</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">..</span> param\n\t\tinstance<span class=\"token punctuation\">[</span>inst<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> response\n\t\tlaunch_session<span class=\"token punctuation\">[</span>inst<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> session\n\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token function\">response</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">false</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token keyword\">end</span>\n\t<span class=\"token keyword\">return</span> inst\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">function</span> skynet<span class=\"token punctuation\">.</span><span class=\"token function\">launch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">...</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">local</span> addr <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">command</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LAUNCH\"</span><span class=\"token punctuation\">,</span> table<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">...</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> addr <span class=\"token keyword\">then</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">tonumber</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">.</span><span class=\"token function\">sub</span><span class=\"token punctuation\">(</span>addr <span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>而skynet.launch会调用skynet.core中的command，执行LAUNCH。会在<code>cmd_launch</code>函数中创建snlua加载类似于bootsrtap等lua服务。每个lua服务都会创建一个snlua虚拟机，lua服务之间形成沙盒，通过工作线程进行交互信息，信息在每个服务的结构体中，传递消息也仅仅是指针，这样的效率十分的高。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">command_func</span> cmd_funcs<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"TIMEOUT\"</span><span class=\"token punctuation\">,</span> cmd_timeout <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"REG\"</span><span class=\"token punctuation\">,</span> cmd_reg <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"QUERY\"</span><span class=\"token punctuation\">,</span> cmd_query <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"NAME\"</span><span class=\"token punctuation\">,</span> cmd_name <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"EXIT\"</span><span class=\"token punctuation\">,</span> cmd_exit <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"KILL\"</span><span class=\"token punctuation\">,</span> cmd_kill <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"LAUNCH\"</span><span class=\"token punctuation\">,</span> cmd_launch <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"GETENV\"</span><span class=\"token punctuation\">,</span> cmd_getenv <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"SETENV\"</span><span class=\"token punctuation\">,</span> cmd_setenv <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"STARTTIME\"</span><span class=\"token punctuation\">,</span> cmd_starttime <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"ABORT\"</span><span class=\"token punctuation\">,</span> cmd_abort <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"MONITOR\"</span><span class=\"token punctuation\">,</span> cmd_monitor <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"STAT\"</span><span class=\"token punctuation\">,</span> cmd_stat <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"LOGON\"</span><span class=\"token punctuation\">,</span> cmd_logon <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"LOGOFF\"</span><span class=\"token punctuation\">,</span> cmd_logoff <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"SIGNAL\"</span><span class=\"token punctuation\">,</span> cmd_signal <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> \n<span class=\"token function\">skynet_command</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_context</span> <span class=\"token operator\">*</span> context<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> cmd <span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> param<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">command_func</span> <span class=\"token operator\">*</span> method <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>cmd_funcs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>method<span class=\"token operator\">-></span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">,</span> method<span class=\"token operator\">-></span>name<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">return</span> method<span class=\"token operator\">-></span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token operator\">++</span>method<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>\n<span class=\"token function\">cmd_launch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_context</span> <span class=\"token operator\">*</span> context<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> param<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token class-name\">size_t</span> sz <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> tmp<span class=\"token punctuation\">[</span>sz<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">,</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> args <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> mod <span class=\"token operator\">=</span> <span class=\"token function\">strsep</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>args<span class=\"token punctuation\">,</span> <span class=\"token string\">\" \\t\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\targs <span class=\"token operator\">=</span> <span class=\"token function\">strsep</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>args<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_context</span> <span class=\"token operator\">*</span> inst <span class=\"token operator\">=</span> <span class=\"token function\">skynet_context_new</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">,</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>inst <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">id_to_hex</span><span class=\"token punctuation\">(</span>context<span class=\"token operator\">-></span>result<span class=\"token punctuation\">,</span> inst<span class=\"token operator\">-></span>handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> context<span class=\"token operator\">-></span>result<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这就是lua服务的创建过程。</p>\n<p>但是回到skynet.start这个函数中，服务启动时会先调用skynet.core中的callback函数。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">function</span> skynet<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span>start_func<span class=\"token punctuation\">)</span>\n\tc<span class=\"token punctuation\">.</span><span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>skynet<span class=\"token punctuation\">.</span>dispatch_message<span class=\"token punctuation\">)</span>\n\tinit_thread <span class=\"token operator\">=</span> skynet<span class=\"token punctuation\">.</span><span class=\"token function\">timeout</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\tskynet<span class=\"token punctuation\">.</span><span class=\"token function\">init_service</span><span class=\"token punctuation\">(</span>start_func<span class=\"token punctuation\">)</span>\n\t\tinit_thread <span class=\"token operator\">=</span> <span class=\"token keyword\">nil</span>\n\t<span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>callback函数对应lcommand函数，函数首先从 Lua 堆栈中获取服务上下文和一个布尔值 <code>forward</code>。然后，检查堆栈上的第一个参数是否是一个函数，这个函数就是要设置为回调函数的 Lua 函数。从结果上，lcommand最后一定会把之前设置为NULL的回调，设回成_cb。而这个函数的作用就是设置lua服务的回调函数。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">\tluaL_Reg l<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"send\"</span> <span class=\"token punctuation\">,</span> lsend <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"genid\"</span><span class=\"token punctuation\">,</span> lgenid <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"redirect\"</span><span class=\"token punctuation\">,</span> lredirect <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"command\"</span> <span class=\"token punctuation\">,</span> lcommand <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"intcommand\"</span><span class=\"token punctuation\">,</span> lintcommand <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"addresscommand\"</span><span class=\"token punctuation\">,</span> laddresscommand <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> lerror <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"harbor\"</span><span class=\"token punctuation\">,</span> lharbor <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"callback\"</span><span class=\"token punctuation\">,</span> lcallback <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"trace\"</span><span class=\"token punctuation\">,</span> ltrace <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#123;</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\t\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span>\n<span class=\"token function\">lcallback</span><span class=\"token punctuation\">(</span>lua_State <span class=\"token operator\">*</span>L<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_context</span> <span class=\"token operator\">*</span> context <span class=\"token operator\">=</span> <span class=\"token function\">lua_touserdata</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token function\">lua_upvalueindex</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> forward <span class=\"token operator\">=</span> <span class=\"token function\">lua_toboolean</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">luaL_checktype</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>LUA_TFUNCTION<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lua_settop</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">callback_context</span> <span class=\"token operator\">*</span> cb_ctx <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">callback_context</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">lua_newuserdatauv</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>cb_ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcb_ctx<span class=\"token operator\">-></span>L <span class=\"token operator\">=</span> <span class=\"token function\">lua_newthread</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lua_pushcfunction</span><span class=\"token punctuation\">(</span>cb_ctx<span class=\"token operator\">-></span>L<span class=\"token punctuation\">,</span> traceback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lua_setiuservalue</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lua_getfield</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> LUA_REGISTRYINDEX<span class=\"token punctuation\">,</span> <span class=\"token string\">\"callback_context\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lua_setiuservalue</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lua_setfield</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> LUA_REGISTRYINDEX<span class=\"token punctuation\">,</span> <span class=\"token string\">\"callback_context\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lua_xmove</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> cb_ctx<span class=\"token operator\">-></span>L<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">skynet_callback</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> cb_ctx<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>forward<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>_forward_pre<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token punctuation\">(</span>_cb_pre<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span>\n<span class=\"token function\">_cb_pre</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_context</span> <span class=\"token operator\">*</span> context<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> ud<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> type<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> session<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> source<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> msg<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> sz<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">callback_context</span> <span class=\"token operator\">*</span>cb_ctx <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">callback_context</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>ud<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">clear_last_context</span><span class=\"token punctuation\">(</span>cb_ctx<span class=\"token operator\">-></span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">skynet_callback</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> ud<span class=\"token punctuation\">,</span> _cb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">_cb</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> cb_ctx<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span> session<span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">,</span> sz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span>\n<span class=\"token function\">_forward_pre</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_context</span> <span class=\"token operator\">*</span>context<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>ud<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> type<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> session<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> source<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>msg<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> sz<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">callback_context</span> <span class=\"token operator\">*</span>cb_ctx <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">callback_context</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>ud<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">clear_last_context</span><span class=\"token punctuation\">(</span>cb_ctx<span class=\"token operator\">-></span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">skynet_callback</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> ud<span class=\"token punctuation\">,</span> forward_cb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">forward_cb</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> cb_ctx<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span> session<span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">,</span> sz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span>\n<span class=\"token function\">forward_cb</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_context</span> <span class=\"token operator\">*</span> context<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> ud<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> type<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> session<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> source<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> msg<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> sz<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">_cb</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> ud<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span> session<span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">,</span> sz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// don't delete msg in forward mode.</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在_cb中处理lua服务的数据。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span>\n<span class=\"token function\">_cb</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_context</span> <span class=\"token operator\">*</span> context<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> ud<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> type<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> session<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> source<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> msg<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> sz<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">callback_context</span> <span class=\"token operator\">*</span>cb_ctx <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">callback_context</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>ud<span class=\"token punctuation\">;</span>\n\tlua_State <span class=\"token operator\">*</span>L <span class=\"token operator\">=</span> cb_ctx<span class=\"token operator\">-></span>L<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> trace <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> r<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lua_pushvalue</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">lua_pushinteger</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lua_pushlightuserdata</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lua_pushinteger</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span>sz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lua_pushinteger</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> session<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lua_pushinteger</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tr <span class=\"token operator\">=</span> <span class=\"token function\">lua_pcall</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> trace<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">==</span> LUA_OK<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> self <span class=\"token operator\">=</span> <span class=\"token function\">skynet_command</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> <span class=\"token string\">\"REG\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">case</span> LUA_ERRRUN<span class=\"token operator\">:</span>\n\t\t<span class=\"token function\">skynet_error</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> <span class=\"token string\">\"lua call [%x to %s : %d msgsz = %d] error : \"</span> KRED <span class=\"token string\">\"%s\"</span> KNRM<span class=\"token punctuation\">,</span> source <span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">,</span> session<span class=\"token punctuation\">,</span> sz<span class=\"token punctuation\">,</span> <span class=\"token function\">lua_tostring</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">case</span> LUA_ERRMEM<span class=\"token operator\">:</span>\n\t\t<span class=\"token function\">skynet_error</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> <span class=\"token string\">\"lua memory error : [%x to %s : %d]\"</span><span class=\"token punctuation\">,</span> source <span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">,</span> session<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">case</span> LUA_ERRERR<span class=\"token operator\">:</span>\n\t\t<span class=\"token function\">skynet_error</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> <span class=\"token string\">\"lua error in error : [%x to %s : %d]\"</span><span class=\"token punctuation\">,</span> source <span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">,</span> session<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">lua_pop</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<hr />\n<p>目前就看到这里，在分析过程中，存在很多值得深入的细节，好在网上已经有很多资料，可以找到。再遇感兴趣点的时候，会再次更新。</p>\n",
            "tags": [
                "openProject"
            ]
        },
        {
            "id": "https://blog.bysegfault.com/share/install-app/",
            "url": "https://blog.bysegfault.com/share/install-app/",
            "title": "ubuntu一些应用",
            "date_published": "2023-05-27T09:14:19.000Z",
            "content_html": "<h2 id=\"背景\"><a class=\"markdownIt-Anchor\" href=\"#背景\"></a> 背景</h2>\n<p>在公司实习时，用的环境是Linux，之前配置的大多是Linux服务器相关的比较多，忽略了很多应用带来的体验。于是打算写一下自己平时比较喜欢的几个Linux应用，方便以后自己配置环境。</p>\n<p>本文使用的环境是wsl2.0下的Ubuntu22.04.</p>\n<h2 id=\"oh-my-zsh\"><a class=\"markdownIt-Anchor\" href=\"#oh-my-zsh\"></a> oh-my-zsh</h2>\n<p>oh-my-zsh是zsh终端的插件，可以给zsh换主题，加强zsh的体验。<br />\nUbuntu默认是使用的bash，需要先安装zsh。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> <span class=\"token function\">zsh</span> <span class=\"token parameter variable\">-y</span>\n\n<span class=\"token comment\">#安装oh-my-zsh</span>\n<span class=\"token function\">sh</span> <span class=\"token parameter variable\">-c</span> <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-fsSL</span> https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span class=\"token variable\">)</span></span>\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在安装过程中，你可能需要科学上网，这里我用的是clash lan代理。<br />\n比如默认使用的是bash终端。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> ~/.bashrc\n\n<span class=\"token comment\">#在最后一行添加，具体根据clash配置调整</span>\n<span class=\"token assign-left variable\">host_ip</span><span class=\"token operator\">=</span><span class=\"token number\">192.168</span>.1.104\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">http_proxy</span><span class=\"token operator\">=</span><span class=\"token string\">\"http://<span class=\"token variable\">$host_ip</span>:7890\"</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">https_proxy</span><span class=\"token operator\">=</span><span class=\"token string\">\"http://<span class=\"token variable\">$host_ip</span>:7890\"</span>\n\n<span class=\"token comment\">#重写加载终端</span>\n<span class=\"token builtin class-name\">source</span> ~/.bashrc\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这样之后再安装zsh等等，也可以给zsh配置中加入这条。</p>\n<p>我最喜欢的主题是<code>gentoo</code></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> ~/.zshrc\n<span class=\"token comment\">#把theme换成gentoo</span>\n<span class=\"token assign-left variable\">ZSH_THEME</span><span class=\"token operator\">=</span><span class=\"token string\">\"gentoo\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go@master/img/Pasted%20image%2020230527173150.png\" alt=\"Pasted image 20230527173150\" /></p>\n<p>简洁美观，还显示git分支。</p>\n<h2 id=\"安装lua\"><a class=\"markdownIt-Anchor\" href=\"#安装lua\"></a> 安装lua</h2>\n<p>推荐使用lua官网<a href=\"http://www.lua.org/download.html\">Lua: download</a>进行安装，以确保安装的是最新版本。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-R</span> <span class=\"token parameter variable\">-O</span> http://www.lua.org/ftp/lua-5.4.6.tar.gz\n<span class=\"token function\">tar</span> zxf lua-5.4.6.tar.gz\n<span class=\"token builtin class-name\">cd</span> lua-5.4.6\n<span class=\"token function\">make</span> linux <span class=\"token builtin class-name\">test</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">make</span> <span class=\"token function\">install</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"安装luarocks\"><a class=\"markdownIt-Anchor\" href=\"#安装luarocks\"></a> 安装luarocks</h2>\n<p>luarocks是lua一个很好用的第三方包管理工具，推荐官网安装<a href=\"https://luarocks.org/#quick-start\">LuaRocks - The Lua package manager</a>以确保是最新版本。</p>\n<p>因为我是自己编译安装的lua，和apt等命令行安装的路径可能不同，这里要知道lua的安装路径是哪里，不然luarocks不能和lua匹配，各种问题接踵而来。<br />\n<img data-src=\"https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go@master/img/Pasted%20image%2020230527174202.png\" alt=\"Pasted image 20230527174202\" /><br />\n在安装lua时可以看到安装目录。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">wget</span> https://luarocks.org/releases/luarocks-3.9.2.tar.gz\n<span class=\"token function\">tar</span> zxpf luarocks-3.9.2.tar.gz\n<span class=\"token builtin class-name\">cd</span> luarocks-3.9.2\n\n<span class=\"token comment\">#安装需要的第三方软件</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> <span class=\"token function\">unzip</span> <span class=\"token parameter variable\">-y</span>\n<span class=\"token comment\">#设置为和lua一样的安装路径（在同一级文件夹下）</span>\n./configure --with-lua<span class=\"token operator\">=</span>/usr/local --with-lua-include<span class=\"token operator\">=</span>/usr/local/include\n<span class=\"token function\">make</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">sudo</span> <span class=\"token function\">make</span> <span class=\"token function\">install</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>可以安装penlight库进行一些测试</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">vim test<span class=\"token punctuation\">.</span>lua\n\n<span class=\"token keyword\">local</span> class <span class=\"token operator\">=</span> require <span class=\"token string\">\"pl.class\"</span>\nclass<span class=\"token punctuation\">.</span><span class=\"token function\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> Dog<span class=\"token punctuation\">:</span><span class=\"token function\">_init</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">function</span> Dog<span class=\"token punctuation\">:</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wow,wow,wow, i am \"</span> <span class=\"token operator\">..</span> self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">local</span> i <span class=\"token operator\">=</span> <span class=\"token function\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zhu\"</span><span class=\"token punctuation\">)</span>\n\ni<span class=\"token punctuation\">:</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n",
            "tags": [
                "app"
            ]
        },
        {
            "id": "https://blog.bysegfault.com/CS/dosign_pattern/dosign-pattern-2/",
            "url": "https://blog.bysegfault.com/CS/dosign_pattern/dosign-pattern-2/",
            "title": "设计模式-23种（二）",
            "date_published": "2023-04-23T12:25:31.000Z",
            "content_html": "<h1 id=\"组件协同模式\"><a class=\"markdownIt-Anchor\" href=\"#组件协同模式\"></a> 组件协同模式</h1>\n<p>现代软件专业分工之后的第一个结果是「框架与应用程序的划分」，「组件协作」模式通过晚期绑定，来实现框架与应用程序之间的松耦合，是二者之间协作时的常用模式。<br />\n下面是组件协同模式的三种典型模式。</p>\n<h2 id=\"template-method模板方法\"><a class=\"markdownIt-Anchor\" href=\"#template-method模板方法\"></a> Template Method（模板方法）</h2>\n<p>模板方法，就像高中老师讲的做题步骤一样，比如高考卷里的圆锥曲线题。</p>\n<ol>\n<li>先设直线方程</li>\n<li>把直线方程代入圆锥曲线</li>\n<li>利用求根公式的定理，算出<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><msub><mi>x</mi><mn>1</mn></msub><mo>∗</mo><msub><mi>x</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">x_{1}+x_{2},x_{1}*x_{2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.73333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6597200000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></li>\n<li>…<br />\n很多时候，题目都可以用这样一个通用的模板方法来解决，只需换掉一丢丢的不同，大致步骤都是一样。</li>\n</ol>\n<p>在代码编程中，模板方法就使用的相当多，通常，子类只需要重写父类给出的「可重写的方法」即可。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//base class</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Library</span><span class=\"token punctuation\">&#123;</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\n    <span class=\"token comment\">//稳定 template method</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n        <span class=\"token function\">Step1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Step2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//支持变化 ==> 虚函数的多态调用</span>\n\n            <span class=\"token function\">Step3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n            <span class=\"token function\">Step4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//支持变化 ==> 虚函数的多态调用</span>\n\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">Step5</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">Library</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">Step1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//稳定</span>\n\n        <span class=\"token comment\">//.....</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">Step3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//稳定</span>\n\n        <span class=\"token comment\">//.....</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">Step5</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//稳定</span>\n\n        <span class=\"token comment\">//.....</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">Step2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//变化</span>\n\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Step4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//变化</span>\n\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这个例子中base类给出了两个纯虚函数，我们可以override这两个函数，做一些符合自己的变化。</p>\n<p>在调用的时候只需如下即可。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tLibrary <span class=\"token operator\">*</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Application</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Application 是Library的子类，并且重写了两个纯虚虚函数</span>\n\tapp<span class=\"token operator\">-></span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>熟悉安卓开发的同学，应该非常熟悉，很多时候，都是重写一个函数，例如生命周期的resume，stop函数等等，系统会自动调用，你重写之后的方法，是不是很神奇嘞，其中的奥秘就是这样捏。</p>\n<h3 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\"></a> 总结</h3>\n<p><strong>定义：「定义一个操作中的算法的骨架（稳定），而将一些步骤延迟（变化）到子类中。Template Method使得子类可以不改变（复用）一个算法的结构即可重定义（override重写）该算法的某些特定步骤」</strong></p>\n<p>下面是它的结构图。<br />\n<img data-src=\"https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go@master/img/20230424215309.png\" alt=\"image.png\" /><br />\n模板方法是不是很好用，不要你调用我！让我来调用你。</p>\n<h2 id=\"strategy策略模式\"><a class=\"markdownIt-Anchor\" href=\"#strategy策略模式\"></a> Strategy（策略模式）</h2>\n<p>策略模式特别像模板方法。举个栗子，就能马上明白。</p>\n<p>比如应用程序切换语言。<br />\n语言可能以后还会添加，可能有些人会这样写程序。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">enum</span> <span class=\"token class-name\">Language</span><span class=\"token punctuation\">&#123;</span>\n\tZH_CN<span class=\"token punctuation\">,</span>\n\tENGLISH\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tLanguage cur_set_lang <span class=\"token operator\">=</span> <span class=\"token function\">get_cur_lang</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cur_set_lang<span class=\"token operator\">==</span>ZH_CN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token comment\">//中文处理</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cur_set_lang<span class=\"token operator\">==</span>ENGLISH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token comment\">//英文处理</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>试想一下，我们现在要增加另一门语言，比如台湾繁体。在上述代码里，就要在枚举类型中添加，同时还要在main函数中的if判断中增加新的处理。<br />\n当项目大起来时，直接修改，往往会令人抓狂。这十分的不优雅。</p>\n<p>策略模式，就可以很好的解决这个问题。<br />\n可以看出来，每个if中都要对相应的语言做处理，我们可以给它抽象出来。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Language</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">Language</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>天啊，看到这里，相比你已经知道了后续部分了，没错就像模板方法一样。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//中文类cpp文件</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Chinese</span><span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Language</span></span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">override</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token comment\">//中文处理</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">Chinese</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token comment\">//相关资源释放</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//英文类cpp文件</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">English</span><span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Language</span></span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">override</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token comment\">//英文处理</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">English</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token comment\">//相关资源释放</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>如此这般，添加新语言，只需要创建一个新的class类文件即可，避免了直接在源码上修改。<br />\n调用过程也变的简洁明了。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//值得一提的是，一般会与工厂方法一起使用，因为工厂方法还没介绍，先不要啦。</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tLanguage<span class=\"token operator\">*</span> cur_set_lang <span class=\"token operator\">=</span> <span class=\"token function\">get_cur_lang</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcur_set_lang<span class=\"token operator\">-></span><span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"总结-2\"><a class=\"markdownIt-Anchor\" href=\"#总结-2\"></a> 总结</h3>\n<p><strong>定义：「定义一系列算法，把它们一个个封装起来，并且使他们可互相替换（变化）。该模式使得算法可独立于使用它的客户程序（稳定）而变化（扩展，子变化）。」</strong></p>\n<p>结构如下<br />\n<img data-src=\"https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go@master/img/20230424225921.png\" alt=\"image.png\" /><br />\n策略模式，可以很好的解决if else 这种没有止境或者不确定后续是否还会添加其他选项的代码，实在是妙啊。</p>\n<h2 id=\"observe-event观察者模式\"><a class=\"markdownIt-Anchor\" href=\"#observe-event观察者模式\"></a> Observe | Event（观察者模式）</h2>\n<p>观察者一般都是站在第三方角度上，observe中文有着「观察」的意思，而Event有着「事件」的意思，从字面意思上直观了解，不是那么容易懂。举个例子，当一个程序跑起来了，我们想看一下中间过程中发生的情况，这时我们就可以插入一段「代码（像Log）」可以让我们观察程序中间过程中的执行情况，也可以把这个观察，说成一种事件，「观察程序中间过程」事件。</p>\n<p>比如一个分割文件的程序，我们想加一个进度条来显示实时进度，先来看一个简单的例子。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//main.cpp</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MainForm</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Form</span></span>\n\n<span class=\"token punctuation\">&#123;</span>\n\n    TextBox<span class=\"token operator\">*</span> txtFilePath<span class=\"token punctuation\">;</span>\n\n    TextBox<span class=\"token operator\">*</span> txtFileNumber<span class=\"token punctuation\">;</span>\n\n    ProgressBar<span class=\"token operator\">*</span> progressBar<span class=\"token punctuation\">;</span>\n\n  \n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">Button1_Click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n        string filePath <span class=\"token operator\">=</span> txtFilePath<span class=\"token operator\">-></span><span class=\"token function\">getText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> number <span class=\"token operator\">=</span> <span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span>txtFileNumber<span class=\"token operator\">-></span><span class=\"token function\">getText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        FileSplitter <span class=\"token function\">splitter</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">,</span> number<span class=\"token punctuation\">,</span> progressBar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        splitter<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在上面这段代码里，我们像<code>FileSplitter</code>类中传入了一个进度条实例来显示进度。<br />\n如果我们的<code>FileSplitter</code>类如下。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//FileSplitter.cpp</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FileSplitter</span>\n\n<span class=\"token punctuation\">&#123;</span>\n\n    string m_filePath<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> m_fileNumber<span class=\"token punctuation\">;</span>\n\n    ProgressBar<span class=\"token operator\">*</span> m_progressBar<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\n    <span class=\"token function\">FileSplitter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> filePath<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> fileNumber<span class=\"token punctuation\">,</span> ProgressBar<span class=\"token operator\">*</span> progressBar<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span>\n\n        <span class=\"token function\">m_filePath</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n        <span class=\"token function\">m_fileNumber</span><span class=\"token punctuation\">(</span>fileNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n        <span class=\"token function\">m_progressBar</span><span class=\"token punctuation\">(</span>progressBar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n\n        <span class=\"token comment\">//1.读取大文件</span>\n        <span class=\"token comment\">//2.分批次向小文件中写入</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m_fileNumber<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n            <span class=\"token comment\">//...</span>\n\n            <span class=\"token keyword\">float</span> progressValue <span class=\"token operator\">=</span> m_fileNumber<span class=\"token punctuation\">;</span>\n\n            progressValue <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> progressValue<span class=\"token punctuation\">;</span>\n\n            m_progressBar<span class=\"token operator\">-></span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>progressValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这样写没毛病，让我们试想一下，如果此时我们再加一个进度条，比如在终端上打印进度信息，或者再加几个观察进度程序，如此上面的<code>FileSplitter</code>类将不能满足我们的要求。</p>\n<p>『我们有时需要让一个类引起的变化，通知到其他一个或多个类。 』</p>\n<p>继续之前的例子，按照我们的要求，当<code>FileSplitter</code>类变化时，其中我们加入的多个进度条类也会发生变化，也就是说<code>FileSplitter</code>类变化会通知其他进度条类。<br />\n<img data-src=\"https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go@master/img/20230425214659.png\" alt=\"image.png\" /></p>\n<p>这些需要<code>FileSplitter</code>类应该具有一些共同的函数等，可以把这些东西给抽象为一个接口。<br />\n例如这样</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">IProgress</span><span class=\"token punctuation\">&#123;</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">DoProgress</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> value<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">IProgress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>此时<code>FileSplitter</code>类就要这样修改了</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FileSplitter</span>\n\n<span class=\"token punctuation\">&#123;</span>\n\n    string m_filePath<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> m_fileNumber<span class=\"token punctuation\">;</span>\n\n    List<span class=\"token operator\">&lt;</span>IProgress<span class=\"token operator\">*</span><span class=\"token operator\">></span>  m_iprogressList<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 抽象通知机制，支持多个观察者</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\n    <span class=\"token function\">FileSplitter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> filePath<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> fileNumber<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span>\n\n        <span class=\"token function\">m_filePath</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n        <span class=\"token function\">m_fileNumber</span><span class=\"token punctuation\">(</span>fileNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n        <span class=\"token comment\">//1.读取大文件</span>\n        <span class=\"token comment\">//2.分批次向小文件中写入</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m_fileNumber<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n            <span class=\"token comment\">//...</span>\n            <span class=\"token keyword\">float</span> progressValue <span class=\"token operator\">=</span> m_fileNumber<span class=\"token punctuation\">;</span>\n\n            progressValue <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> progressValue<span class=\"token punctuation\">;</span>\n\n            <span class=\"token function\">onProgress</span><span class=\"token punctuation\">(</span>progressValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//发送通知</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">addIProgress</span><span class=\"token punctuation\">(</span>IProgress<span class=\"token operator\">*</span> iprogress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n        m_iprogressList<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>iprogress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">removeIProgress</span><span class=\"token punctuation\">(</span>IProgress<span class=\"token operator\">*</span> iprogress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n        m_iprogressList<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>iprogress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onProgress</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n        <span class=\"token keyword\">auto</span> itor<span class=\"token operator\">=</span>m_iprogressList<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>itor <span class=\"token operator\">!=</span> m_iprogressList<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n\n            <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>itor<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">DoProgress</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//更新进度条</span>\n\n            itor<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我们用一个<code>vector</code>容器存储需要通知的类，这些需要通知的类，需要继承<code>IProgress</code>接口，并且实现其中的纯虚函数，如此，我们就可以这样很方便的完成需求。<br />\n调用如下</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MainForm</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Form</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">IProgress</span></span>\n\n<span class=\"token punctuation\">&#123;</span>\n\n    TextBox<span class=\"token operator\">*</span> txtFilePath<span class=\"token punctuation\">;</span>\n\n    TextBox<span class=\"token operator\">*</span> txtFileNumber<span class=\"token punctuation\">;</span>\n    ProgressBar<span class=\"token operator\">*</span> progressBar<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">Button1_Click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n        string filePath <span class=\"token operator\">=</span> txtFilePath<span class=\"token operator\">-></span><span class=\"token function\">getText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> number <span class=\"token operator\">=</span> <span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span>txtFileNumber<span class=\"token operator\">-></span><span class=\"token function\">getText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ConsoleNotifier cn<span class=\"token punctuation\">;</span>\n        FileSplitter <span class=\"token function\">splitter</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">,</span> number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        splitter<span class=\"token punctuation\">.</span><span class=\"token function\">addIProgress</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//订阅通知</span>\n\n        splitter<span class=\"token punctuation\">.</span><span class=\"token function\">addIProgress</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>cn<span class=\"token punctuation\">)</span>； <span class=\"token comment\">//订阅通知</span>\n\n        splitter<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        splitter<span class=\"token punctuation\">.</span><span class=\"token function\">removeIProgress</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">DoProgress</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> value<span class=\"token punctuation\">)</span><span class=\"token keyword\">override</span><span class=\"token punctuation\">&#123;</span>\n\n        progressBar<span class=\"token operator\">-></span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ConsoleNotifier</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">IProgress</span></span> <span class=\"token punctuation\">&#123;</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">DoProgress</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> value<span class=\"token punctuation\">)</span><span class=\"token keyword\">override</span><span class=\"token punctuation\">&#123;</span>\n\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"总结-3\"><a class=\"markdownIt-Anchor\" href=\"#总结-3\"></a> 总结</h3>\n<p><strong>定义：「定义对象间的一种一对多（变化）的依赖关系，以便当一个对象（subject）的状态发生改变时，所有依赖于它的对象都得到通知并自动更新。」</strong></p>\n<p>结构如下<br />\n<img data-src=\"https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go@master/img/20230425215654.png\" alt=\"image.png\" /></p>\n<p>是不是有种学到啦的感觉，观察者模式，可以让一个类通知许多类的改变，仅仅把这些的共同地方抽象出来，就可以让 代码变的健壮起来。</p>\n<hr />\n<h1 id=\"单一职责模式\"><a class=\"markdownIt-Anchor\" href=\"#单一职责模式\"></a> 单一职责模式</h1>\n<p>在软件组件的设计中，如果责任划分的不清晰，使用继承得到的结果往往是随着需求的变化，子类急剧膨胀，同时充斥着重复代码，这时候的关键是<strong>划清责任</strong>。</p>\n<p>下面介绍两种经典的单一职责模式可以很快帮助我们理解。</p>\n<h2 id=\"decorator装饰器模式\"><a class=\"markdownIt-Anchor\" href=\"#decorator装饰器模式\"></a> Decorator（装饰器模式）</h2>\n<p>比如我们要做一个基于TCP的文件传输的小工具，IO方面，我们肯定需要处理文件流、网络流，甚至可能需要对这些流进行加密，或者对流进行缓存。</p>\n<p>那么如果我们这些写，先抽象一个<code>Stream</code>的抽象类，包含<code>read(),seek(),write()</code> 三种方法。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span>：\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">char</span> <span class=\"token function\">Read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> number<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Seek</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> position<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> data<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">Stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>很容易就会想到文件流、网络流继承<code>Stream</code>。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FileStream</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span>：\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">char</span> <span class=\"token function\">Read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Seek</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> position<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">Stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">NetworkStream</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span>：\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">char</span> <span class=\"token function\">Read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Seek</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> position<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">Stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>假设现在我们需要加密流和缓存流，新手一般会这样写。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CryptoFileStream</span> <span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">FileStream</span></span><span class=\"token punctuation\">&#123;</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">char</span> <span class=\"token function\">Read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//额外的加密操作...</span>\n        <span class=\"token class-name\">FileStream</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//读文件流</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Seek</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> position<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//额外的加密操作...</span>\n        <span class=\"token class-name\">FileStream</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Seek</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//定位文件流</span>\n        <span class=\"token comment\">//额外的加密操作...</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>byte data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//额外的加密操作...</span>\n        <span class=\"token class-name\">FileStream</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//写文件流</span>\n        <span class=\"token comment\">//额外的加密操作...</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CryptoNetworkStream</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token operator\">:</span><span class=\"token keyword\">public</span> <span class=\"token class-name\">NetworkStream</span></span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">char</span> <span class=\"token function\">Read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//额外的加密操作...</span>\n        <span class=\"token class-name\">NetworkStream</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//读网络流</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Seek</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> position<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//额外的加密操作...</span>\n        <span class=\"token class-name\">NetworkStream</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Seek</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//定位网络流</span>\n        <span class=\"token comment\">//额外的加密操作...</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>byte data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//额外的加密操作...</span>\n        <span class=\"token class-name\">NetworkStream</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//写网络流</span>\n        <span class=\"token comment\">//额外的加密操作...</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//-------------------</span>\n<span class=\"token comment\">//缓存流</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">BufferFileStream</span><span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">FileStream</span></span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">BufferNetworkStream</span><span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">FileStream</span></span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>现在，回头看一下代码，很明显，每当我们去添加一个扩展功能类，比如反转流，这样就要再继承 <code>FileStream、NetworkStream</code>写两个类，或者当我们去添加一个流，比如内存流，这样就要继承内存流去写很多扩展类。</p>\n<p>假设，<code>FileStream、NetworkStream</code>这样的类有<strong>N</strong>个，加密流这样的扩展有<strong>M</strong>个，那么一共要写<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>+</mo><mi>N</mi><mo>+</mo><mi>N</mi><mo>∗</mo><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">1+N+N*M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span>个。<br />\n<img data-src=\"https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go@master/img/Pasted%20image%2020230427013929.png\" alt=\"Pasted image 20230427013929\" /><br />\n不难发现，在扩展类中，实现的东西都相同，很容易联系到多态。那么扩展类就可以写成下面这样，比如<code>CryptoStream</code>类。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CryptoStream</span> <span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Stream</span></span><span class=\"token punctuation\">&#123;</span>\nStream<span class=\"token operator\">*</span> stream<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">CryptoStream</span><span class=\"token punctuation\">(</span>Stream<span class=\"token operator\">*</span> s<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t\n\t<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">char</span> <span class=\"token function\">Read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//额外的加密操作...</span>\n        stream<span class=\"token operator\">-></span><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//读文件流</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Seek</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> position<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//额外的加密操作...</span>\n        stream<span class=\"token operator\">-></span><span class=\"token function\">Seek</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//定位文件流</span>\n        <span class=\"token comment\">//额外的加密操作...</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>byte data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//额外的加密操作...</span>\n        stream<span class=\"token operator\">-></span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//写文件流</span>\n        <span class=\"token comment\">//额外的加密操作...</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>如此我们就可以省下很多重复的代码，只需要<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>+</mo><mi>N</mi><mo>+</mo><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">1+N+M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span>，非常nice。但是当我写出<code>BufferStream</code>类时，你会发现这其中又可以提出来共同的成员。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">BufferStream</span> <span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Stream</span></span><span class=\"token punctuation\">&#123;</span>\nStream<span class=\"token operator\">*</span> stream<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">BufferStream</span><span class=\"token punctuation\">(</span>Stream<span class=\"token operator\">*</span> s<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>可以看到<code>stream</code>这个成员变量重复了，可以把这个给抽出来，单独写成一个类。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">DecoratorStream<span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> Stream<span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n    Stream<span class=\"token operator\">*</span> stream<span class=\"token punctuation\">;</span><span class=\"token comment\">//...</span>\n    <span class=\"token function\">DecoratorStream</span><span class=\"token punctuation\">(</span>Stream <span class=\"token operator\">*</span> stm<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>stm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这样在以后写扩展类时，继承这个<code>DecoratorStream</code>，既可以清楚意图，又减少了代码的重复。<br />\n例如<code>BufferStream</code>类就可以写成下面这样。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">BufferStream</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">DecoratorStream</span></span><span class=\"token punctuation\">&#123;</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\n    <span class=\"token function\">BufferStream</span><span class=\"token punctuation\">(</span>Stream<span class=\"token operator\">*</span> stm<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">DecoratorStream</span><span class=\"token punctuation\">(</span>stm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">//...</span>\n\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>调用程序如下</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">Process</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//运行时装配</span>\n    FileStream<span class=\"token operator\">*</span> s1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token function\">FileStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    CryptoStream<span class=\"token operator\">*</span> s2<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token function\">CryptoStream</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    BufferStream<span class=\"token operator\">*</span> s3<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token function\">BufferedStream</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    BufferStream<span class=\"token operator\">*</span> s4<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token function\">BufferedStream</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"总结-4\"><a class=\"markdownIt-Anchor\" href=\"#总结-4\"></a> 总结</h3>\n<p>定义：动态（组合）地给一个对象增加一些额外的职责。就增加功能而言，Decorator模式比生成子类（继承）更为灵活（消除重复代码&amp;减少子类个数）</p>\n<p>结构如下<br />\n<img data-src=\"https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go@master/img/Pasted%20image%2020230428012216.png\" alt=\"Pasted image 20230428012216\" /><br />\n<strong>仔细想想，其实CryptoFileStream继承FileStream是不合理的，因为前者仅仅是后者的一个扩展，并没有is a的关系，也不朝着同一个方向变化。</strong></p>\n<h2 id=\"bridge桥模式\"><a class=\"markdownIt-Anchor\" href=\"#bridge桥模式\"></a> Bridge（桥模式）</h2>\n<p>桥模式与装饰器模式十分相似，都是为了解决继承使得类数量爆炸增长的问题。</p>\n<p>举个例子，现在要开发一个即时通讯软件，新手一般会先抽象一个类。<br />\n比如</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Messager</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Login</span><span class=\"token punctuation\">(</span>string username<span class=\"token punctuation\">,</span> string password<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SendMessage</span><span class=\"token punctuation\">(</span>string message<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SendPicture</span><span class=\"token punctuation\">(</span>Image image<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">PlaySound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">DrawShape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">WriteText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">Messager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这很不错，PC和mobile端继承Messager，后续再继承pc类开发pc上的不同版本，例如lite，prefect版本等等。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">PCMessagerBase</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Messager</span></span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">PlaySound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//**********</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">DrawShape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//*********</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">WriteText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//**********</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//**********</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MobileMessagerBase</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Messager</span></span><span class=\"token punctuation\">&#123;</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>接着写一下PC端的版本。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">PCMessagerLite</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">PCMessagerBase</span></span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Login</span><span class=\"token punctuation\">(</span>string username<span class=\"token punctuation\">,</span> string password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">PCMessagerBase</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//........</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SendMessage</span><span class=\"token punctuation\">(</span>string message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">PCMessagerBase</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">WriteText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//........</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SendPicture</span><span class=\"token punctuation\">(</span>Image image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">PCMessagerBase</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">DrawShape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//........</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  \n  \n  \n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PCMessagerPerfect</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">PCMessagerBase</span></span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Login</span><span class=\"token punctuation\">(</span>string username<span class=\"token punctuation\">,</span> string password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">PCMessagerBase</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">PlaySound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//********</span>\n        <span class=\"token class-name\">PCMessagerBase</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//........</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SendMessage</span><span class=\"token punctuation\">(</span>string message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">PCMessagerBase</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">PlaySound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//********</span>\n        <span class=\"token class-name\">PCMessagerBase</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">WriteText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//........</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SendPicture</span><span class=\"token punctuation\">(</span>Image image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">PCMessagerBase</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">PlaySound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//********</span>\n        <span class=\"token class-name\">PCMessagerBase</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">DrawShape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//........</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这仅仅是PC端的，如果算上mobile端，又要加上两个业务类，加一个Linux平台，可能就要一个Linux base类，和两个业务类。<br />\n假如有N个平台，M个版本 ，那么总共就要写<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>+</mo><mi>N</mi><mo>+</mo><mi>N</mi><mo>∗</mo><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">1+N+N*M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span>个类，想想就十分可怕。</p>\n<p>学习过上一节，很自然就会想「能不能使用多态来代替这个继承」。</p>\n<p>首先我们先把<code>Messager</code>类分开，因为pc base类与mobile base类，仅仅实现了基础的部分，并没有实现login这些功能。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Messager</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n     MessagerImp<span class=\"token operator\">*</span> messagerImp<span class=\"token punctuation\">;</span><span class=\"token comment\">//...</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Login</span><span class=\"token punctuation\">(</span>string username<span class=\"token punctuation\">,</span> string password<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SendMessage</span><span class=\"token punctuation\">(</span>string message<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SendPicture</span><span class=\"token punctuation\">(</span>Image image<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">Messager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  \n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MessagerImp</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">PlaySound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">DrawShape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">WriteText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">virtual</span> <span class=\"token function\">MessagerImp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>下面只需让pc base类与mobile base类去实现MessagerImp接口，而业务类继承<code>Messager</code>类。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">PCMessagerImp</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">MessagerImp</span></span><span class=\"token punctuation\">&#123;</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">PlaySound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//**********</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">DrawShape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//**********</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">WriteText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//**********</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//**********</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MobileMessagerImp</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">MessagerImp</span></span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MessagerLite</span> <span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Messager</span></span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Login</span><span class=\"token punctuation\">(</span>string username<span class=\"token punctuation\">,</span> string password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        messagerImp<span class=\"token operator\">-></span><span class=\"token function\">Connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//........</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SendMessage</span><span class=\"token punctuation\">(</span>string message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        messagerImp<span class=\"token operator\">-></span><span class=\"token function\">WriteText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//........</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SendPicture</span><span class=\"token punctuation\">(</span>Image image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        messagerImp<span class=\"token operator\">-></span><span class=\"token function\">DrawShape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//........</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MessagerPerfect</span>  <span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Messager</span> \n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Login</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">string</span> <span class=\"token class-name\">username</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">string</span> <span class=\"token class-name\">password</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">&#123;</span>\n        messagerImp<span class=\"token operator\">-></span><span class=\"token function\">PlaySound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//********</span>\n        messagerImp<span class=\"token operator\">-></span><span class=\"token function\">Connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//........</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SendMessage</span><span class=\"token punctuation\">(</span>string message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        messagerImp<span class=\"token operator\">-></span><span class=\"token function\">PlaySound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//********</span>\n        messagerImp<span class=\"token operator\">-></span><span class=\"token function\">WriteText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//........</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SendPicture</span><span class=\"token punctuation\">(</span>Image image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        messagerImp<span class=\"token operator\">-></span><span class=\"token function\">PlaySound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//********</span>\n        messagerImp<span class=\"token operator\">-></span><span class=\"token function\">DrawShape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//........</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这样类的数量就缩短到了<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>+</mo><mi>N</mi><mo>+</mo><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">1+N+M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span>.<br />\n调用主程序，可以写成如下格式。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">PCMessagerImp <span class=\"token operator\">*</span> pc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">PCMessagerImp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nMessager<span class=\"token operator\">*</span> mp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">MessagerPerfect</span><span class=\"token punctuation\">(</span>pc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nMessager<span class=\"token operator\">*</span> ml <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">MessagerLite</span><span class=\"token punctuation\">(</span>pc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"总结-5\"><a class=\"markdownIt-Anchor\" href=\"#总结-5\"></a> 总结</h3>\n<p><strong>定义：将抽象部分（业务功能）与实现部分（平台实现）分离，使它们都可以独立地变化。</strong></p>\n<p>结构如下<br />\n<img data-src=\"https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go@master/img/Pasted%20image%2020230428224539.png\" alt=\"Pasted image 20230428224539\" /><br />\n桥模式与装饰器模式，都有异曲同工之妙，都是将继承换为多态，总而避免了类数量的急剧增长。</p>\n<hr />\n<h1 id=\"对象创建模式\"><a class=\"markdownIt-Anchor\" href=\"#对象创建模式\"></a> 对象创建模式</h1>\n<p>通过“对象创建” 模式绕开new，来避免对象创建（new）过程中所导致的紧耦合（依赖具体类），从而支持对象创建的稳定。它是接口抽象之后的第一步工作。</p>\n<p>简单来说，就是让这个类文件中new的对象，像virtual函数那样，晚绑定。<br />\n也就是依赖倒置原则，不依赖与实现，应该依赖与抽象。</p>\n<p>如果一个类文件中，有一处实现，那么可能在以后的过程中，就要去改这个类文件。</p>\n",
            "tags": [
                "cpp"
            ]
        },
        {
            "id": "https://blog.bysegfault.com/CS/dosign_pattern/dosign-pattern-1/",
            "url": "https://blog.bysegfault.com/CS/dosign_pattern/dosign-pattern-1/",
            "title": "设计模式-八大设计原则（一）",
            "date_published": "2023-04-22T10:16:45.000Z",
            "content_html": "<p align=\"center\"><img data-src=\"https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go@master/img/20230423000022.png\" height=300px width=300px></p>\n<blockquote>\n<p>「你所用的面向对象，空有招式，但无内涵」</p>\n</blockquote>\n<p>只学招式，不学心法，武功瓶颈难以突破，更有甚者潜心修炼，数十年如一日，却不及他人一个月，走火入魔，此举实在是得不偿失。<br />\n你是否想如同杨过那样，年纪轻轻就已经成为武林大侠，即使郭靖一样的资质，也可以在短期内，上能九天揽月，下能五洋抓鳖。是的，你妹看错！<br />\n<img data-src=\"https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go@master/img/20230423003635.png\" alt=\"image.png\" /></p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go@master/img/20230423192658.png\" alt=\"image.png\" /></p>\n<h2 id=\"设计模式\"><a class=\"markdownIt-Anchor\" href=\"#设计模式\"></a> 设计模式</h2>\n<p>只要你学过java、python或者是cpp等任意一门面向对象语言，23种设计模式代码部分都能看懂。代码部分都能理解，直接开始上手干它，不就完了吗？非也非也，小伙子，这些代码只是辅助理解23种设计模式是如何解决日常编程问题的，其中真经要诀不可得也。<br />\n所以嘞，在学习设计模式时，我们要关注『 如何使用设计模式八大原则分析问题，解决问题』，而不是用什么设计模式。</p>\n<p>如能理解八大原则，坚持数日，大事可成矣。</p>\n<h2 id=\"依赖倒置原则dip\"><a class=\"markdownIt-Anchor\" href=\"#依赖倒置原则dip\"></a> 依赖倒置原则（DIP）</h2>\n<ol>\n<li>高层模块（稳定）不应该依赖于低层模块（变化），二者都应该依赖于抽象</li>\n<li>抽象不应该依赖于实现细节（变化），实现细节应该依赖于抽象（稳定）</li>\n</ol>\n<h2 id=\"开放封闭原则ocp\"><a class=\"markdownIt-Anchor\" href=\"#开放封闭原则ocp\"></a> 开放封闭原则（OCP）</h2>\n<ol>\n<li>对扩展开放，对更改封闭</li>\n<li>类模块应该是可扩展的，但是不可修改的</li>\n</ol>\n<h2 id=\"单一职责原则srp\"><a class=\"markdownIt-Anchor\" href=\"#单一职责原则srp\"></a> 单一职责原则（SRP）</h2>\n<ol>\n<li>一个类应该仅有一个引起他变化的原因</li>\n<li>变化的方向隐含着类的职责</li>\n</ol>\n<h2 id=\"liskov替换原则lsp\"><a class=\"markdownIt-Anchor\" href=\"#liskov替换原则lsp\"></a> Liskov替换原则（LSP）</h2>\n<ol>\n<li>子类必须能够替换它们的基类（IS-A）</li>\n<li>继承表达类型抽象</li>\n</ol>\n<h2 id=\"接口隔离原则isp\"><a class=\"markdownIt-Anchor\" href=\"#接口隔离原则isp\"></a> 接口隔离原则（ISP）</h2>\n<ol>\n<li>不应该强迫客户程序依赖它们不用的方法</li>\n<li>接口应该小而完备</li>\n</ol>\n<h2 id=\"优先使用对象组合而不是类继承\"><a class=\"markdownIt-Anchor\" href=\"#优先使用对象组合而不是类继承\"></a> 优先使用对象组合，而不是类继承</h2>\n<ol>\n<li>类继承通常为“白箱复用”，对象组合通常为“黑箱复用”</li>\n<li>继承在某种程度上继承了很多基类的函数，破坏了封装性，子类父类的耦合度过高</li>\n<li>用对象组合只要求被组合的对象具有良好的接口定义即可</li>\n</ol>\n<h2 id=\"封装变化点\"><a class=\"markdownIt-Anchor\" href=\"#封装变化点\"></a> 封装变化点</h2>\n<ol>\n<li>使用封装来创建对象之间的分界点，让设计者可以在分界点的一侧进行修改，而不会对另一侧产生不良影响，实现对象之间的松耦合。</li>\n</ol>\n<h2 id=\"针对接口编程不要针对实现编程\"><a class=\"markdownIt-Anchor\" href=\"#针对接口编程不要针对实现编程\"></a> 针对接口编程，不要针对实现编程</h2>\n<ol>\n<li>不将变量类型声明为某个特定的具体类，而声明为某个接口类</li>\n<li>客户程序无需知晓对象的具体类型，只需要知道对象所具有的接口即可</li>\n<li>减少系统中各部分的依赖关系，从而实现“高内聚、低耦合”的类设计方案</li>\n</ol>\n<hr />\n<p>在以后的分析中，比如代码，要先看违背了哪些原则，再去看哪些变化、哪些稳定，之后利用23种方法，问题便迎刃而解。</p>\n",
            "tags": [
                "cpp"
            ]
        },
        {
            "id": "https://blog.bysegfault.com/log/ssh-config/",
            "url": "https://blog.bysegfault.com/log/ssh-config/",
            "title": "配置ssh密钥登录",
            "date_published": "2023-02-24T07:34:42.000Z",
            "content_html": "<p>win 下使用xshell等软件连接服务器很便捷，换了Mac之后，感觉terminal就可以完成目前我的全部需求，这种情况下，使用公私钥对登陆，很方便、很有必要！</p>\n<h2 id=\"配置公私钥对\"><a class=\"markdownIt-Anchor\" href=\"#配置公私钥对\"></a> 配置公私钥对</h2>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">\n<span class=\"token builtin class-name\">cd</span> ~/.ssh\n\n<span class=\"token comment\"># Comment最好填邮箱，这样服务器管理起来比较方便</span>\nssh-keygen <span class=\"token parameter variable\">-t</span> ed25519 <span class=\"token parameter variable\">-C</span> <span class=\"token string\">\"Comment\"</span>\n\n<span class=\"token comment\"># 把公钥上传到服务器</span>\nssh-copy-id <span class=\"token parameter variable\">-i</span> 公钥文件名 用户名@服务器ip\n\n<span class=\"token comment\"># 把私钥添加到ssh列表中</span>\nssh-add <span class=\"token parameter variable\">-K</span> 私钥文件名\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>进入ssh配置文件夹下</li>\n<li>生成公私钥对</li>\n<li>把公钥上传到服务器</li>\n<li>把私钥添加到ssh列表中</li>\n</ol>\n<h2 id=\"给服务器起别名\"><a class=\"markdownIt-Anchor\" href=\"#给服务器起别名\"></a> 给服务器起别名</h2>\n<p>起别名，可以帮助我们更方便的使用ssh、scp等工具。</p>\n<p><code>touch ~/.ssh/config</code>创建配置文件。<br />\n比如我要给我的路由器起别名<code>openwrt</code>，仅仅需要在<code>~/.ssh/config</code>下填写如下。</p>\n<pre class=\"line-numbers language-config\" data-language=\"config\"><code class=\"language-config\">Host openwrt\n    HostName openwrt.lan\n    User root\n    Port 255\n    IdentityFIle ~&#x2F;.ssh&#x2F;server<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>现在就可以使用<code>ssh openwrt</code>对路由器进行访问啦！</p>\n<p>config的配置详情可以去看<code>man ssh_config</code>手册，里面很详细的介绍了config的配置参数等。</p>\n<h2 id=\"change-log\"><a class=\"markdownIt-Anchor\" href=\"#change-log\"></a> Change log</h2>\n<ul>\n<li>2023.09.24 追加如何给服务器起别名</li>\n</ul>\n",
            "tags": [
                "soft"
            ]
        }
    ]
}