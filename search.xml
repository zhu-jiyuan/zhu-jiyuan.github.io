<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>快速幂</title>
    <url>/quick-multiplication/</url>
    <content><![CDATA[<h1 id="快速幂"><a class="markdownIt-Anchor" href="#快速幂"></a> 快速幂</h1>
<p>普通幂运算实现，例如计算 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>x</mi><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">x^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span> 的函数。</p>
<p>需要注意的是，当n为负数的时候，需要进行转换，例如<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mrow><mo>−</mo><mn>3</mn></mrow></msup><mo>=</mo><mo stretchy="false">(</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><msup><mo stretchy="false">)</mo><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">2^{-3} = (\frac{1}{2})^{3}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">3</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span></span></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//x为底数，n为幂</span>
<span class="token keyword">double</span> <span class="token function">my_pow</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">double</span> ans<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    
    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        x <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span>x<span class="token punctuation">;</span>
        n <span class="token operator">=</span> <span class="token operator">-</span>n<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        ans<span class="token operator">*=</span>x<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>普通幂需要计算<code>n</code>次乘法。</p>
<h2 id="原理-实现"><a class="markdownIt-Anchor" href="#原理-实现"></a> 原理、实现</h2>
<p>例如计算<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>3</mn><mn>9</mn></msup></mrow><annotation encoding="application/x-tex">3^9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">3</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable width="100%"><mtr><mtd width="50%"></mtd><mtd><mrow><mn>9</mn><mo>=</mo><mn>100</mn><msub><mn>1</mn><mn>2</mn></msub><mspace linebreak="newline"></mspace><mtext> </mtext><mspace linebreak="newline"></mspace><msup><mn>3</mn><mn>9</mn></msup><mo>=</mo><msup><mn>3</mn><mrow><mn>100</mn><msub><mn>1</mn><mn>2</mn></msub></mrow></msup><mspace linebreak="newline"></mspace><mo>=</mo><msup><mn>3</mn><mrow><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mn>0</mn></msup><mo>+</mo><mn>0</mn><mo>∗</mo><msup><mn>2</mn><mn>1</mn></msup><mo>+</mo><mn>0</mn><mo>∗</mo><msup><mn>2</mn><mn>2</mn></msup><mo>+</mo><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mn>3</mn></msup></mrow></msup><mspace linebreak="newline"></mspace><mo>=</mo><mo stretchy="false">(</mo><msup><mn>3</mn><mrow><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mn>0</mn></msup></mrow></msup><mo stretchy="false">)</mo><mo stretchy="false">(</mo><msup><mn>3</mn><mrow><mn>0</mn><mo>∗</mo><msup><mn>2</mn><mn>1</mn></msup></mrow></msup><mo stretchy="false">)</mo><mo stretchy="false">(</mo><msup><mn>3</mn><mrow><mn>0</mn><mo>∗</mo><msup><mn>2</mn><mn>2</mn></msup></mrow></msup><mo stretchy="false">)</mo><mo stretchy="false">(</mo><msup><mn>3</mn><mrow><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mn>3</mn></msup></mrow></msup><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mtext> </mtext><mspace linebreak="newline"></mspace><mo stretchy="false">(</mo><msup><mn>3</mn><mrow><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mn>0</mn></msup></mrow></msup><mo stretchy="false">)</mo><mo stretchy="false">(</mo><msup><mn>3</mn><mrow><mn>0</mn><mo>∗</mo><msup><mn>2</mn><mn>1</mn></msup></mrow></msup><mo stretchy="false">)</mo><mo stretchy="false">(</mo><msup><mn>3</mn><mrow><mn>0</mn><mo>∗</mo><msup><mn>2</mn><mn>2</mn></msup></mrow></msup><mo stretchy="false">)</mo><mo stretchy="false">(</mo><msup><mn>3</mn><mrow><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mn>3</mn></msup></mrow></msup><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mo>=</mo><mo stretchy="false">(</mo><msup><mn>3</mn><mrow><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mn>0</mn></msup></mrow></msup><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">(</mo><msup><mn>3</mn><mrow><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mn>3</mn></msup></mrow></msup><mo stretchy="false">)</mo></mrow></mtd><mtd width="50%"></mtd><mtd><mtext>(1)</mtext></mtd></mtr></mtable><annotation encoding="application/x-tex">9 =1001_{2} 
\\	
\space 
\\
3^9 = 3^{1001_2} 
\\= 3^{1*2^0+0*2^1+0*2^2+1*2^3} \\
= (3^{1*2^0})(3^{0*2^1})(3^{0*2^2})(3^{1*2^3}) 
\\ 
\space
\\
(3^{1*2^0})(3^{0*2^1})(3^{0*2^2})(3^{1*2^3})\\=(3^{1*2^0})(1)(1)(3^{1*2^3}) \tag{1}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">9</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.79444em;vertical-align:-0.15em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mspace"> </span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">3</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">3</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span><span class="mord mtight">0</span><span class="mord mtight"><span class="mord mtight">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0369199999999998em;vertical-align:0em;"></span><span class="mord"><span class="mord">3</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.0369199999999998em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">∗</span><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span><span class="mbin mtight">+</span><span class="mord mtight">0</span><span class="mbin mtight">∗</span><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mbin mtight">+</span><span class="mord mtight">0</span><span class="mbin mtight">∗</span><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mbin mtight">+</span><span class="mord mtight">1</span><span class="mbin mtight">∗</span><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.2869199999999998em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord">3</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.0369199999999998em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">∗</span><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mopen">(</span><span class="mord"><span class="mord">3</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.0369199999999998em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span><span class="mbin mtight">∗</span><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mopen">(</span><span class="mord"><span class="mord">3</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.0369199999999998em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span><span class="mbin mtight">∗</span><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mopen">(</span><span class="mord"><span class="mord">3</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.0369199999999998em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">∗</span><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mspace"> </span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1.2869199999999998em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord">3</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.0369199999999998em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">∗</span><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mopen">(</span><span class="mord"><span class="mord">3</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.0369199999999998em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span><span class="mbin mtight">∗</span><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mopen">(</span><span class="mord"><span class="mord">3</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.0369199999999998em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span><span class="mbin mtight">∗</span><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mopen">(</span><span class="mord"><span class="mord">3</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.0369199999999998em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">∗</span><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.2869199999999998em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord">3</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.0369199999999998em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">∗</span><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord"><span class="mord">3</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.0369199999999998em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">∗</span><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span><span class="tag"><span class="strut" style="height:1.2869199999999998em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">1</span></span><span class="mord">)</span></span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable width="100%"><mtr><mtd width="50%"></mtd><mtd><mrow><mfrac><msup><mn>3</mn><msup><mn>2</mn><mi>n</mi></msup></msup><msup><mn>3</mn><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup></msup></mfrac><mo>=</mo><mfrac><msup><mn>3</mn><mrow><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>∗</mo><mn>2</mn></mrow></msup><msup><mn>3</mn><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup></msup></mfrac><mo>=</mo><msup><mn>3</mn><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup></msup></mrow></mtd><mtd width="50%"></mtd><mtd><mtext>(2)</mtext></mtd></mtr></mtable><annotation encoding="application/x-tex">\dfrac{3^{2^n}}{3^{2^{n-1}}} = \frac{3^{2^{n-1}*2}}{3^{2^{n-1}}}={3^{2^{n-1}}} \tag{2}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.2584em;vertical-align:-0.70142em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.55698em;"><span style="top:-2.29858em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord">3</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.81142em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord">3</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.87998em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7385428571428572em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.70142em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.36534em;vertical-align:-0.70142em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.66392em;"><span style="top:-2.29858em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord">3</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.81142em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord">3</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9869199999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mbin mtight">∗</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.70142em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0369199999999998em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord">3</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.0369199999999998em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="tag"><span class="strut" style="height:2.36534em;vertical-align:-0.70142em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">2</span></span><span class="mord">)</span></span></span></span></span></span></p>
<p>我们把幂数转换为二进制，（2）式可以得出，数列 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>3</mn><msup><mn>2</mn><mi>n</mi></msup></msup></mrow><annotation encoding="application/x-tex">3^{2^n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.87998em;vertical-align:0em;"></span><span class="mord"><span class="mord">3</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.87998em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7385428571428572em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>的前一项的平方=下一项。</p>
<p>此时代码。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//x为底数，n为幂</span>
<span class="token keyword">double</span> <span class="token function">q_pow</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

    <span class="token keyword">double</span> ans<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        x <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span>x<span class="token punctuation">;</span>
        n <span class="token operator">=</span> <span class="token operator">-</span>n<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span>ans<span class="token operator">*=</span>x<span class="token punctuation">;</span>  <span class="token comment">//如果当前的位是1，则乘数列的对应项。</span>
        x<span class="token operator">*=</span>x<span class="token punctuation">;</span>  <span class="token comment">//根据（2）式计算下一项</span>
        n<span class="token operator">>>=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看出来，快速幂计算了<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mo>∗</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding="application/x-tex">2*log_2n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">n</span></span></span></span>次。</p>
<p>可以看出快速幂可显著减少乘法的运算次数。</p>
]]></content>
      <categories>
        <category>math</category>
      </categories>
      <tags>
        <tag>math</tag>
      </tags>
  </entry>
  <entry>
    <title>没必要的软路由</title>
    <url>/soft-router-is-joker/</url>
    <content><![CDATA[<h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2>
<p>小学到初二，家里的网线从宽带我世界的电话拨号，升级到了光纤，我的游戏事业也如日中天，形势一片大好之际，我爸妈把网线掐了，直到高中毕业，在此期间我攻坚克难、不畏艰险，先后破解了邻居家的WiFi密码，掉包率极高，在电竞黄金期，摧毁了我的电竞梦想。</p>
<p>毕业后，第一次租房30m宽带，100块才能使用50m，恰好当时拿下了switch，下个塞尔达都要等一天，看直播不能玩游戏。直接给我整破防了。。。</p>
<p>家里一定要有好的网络体验！</p>
<p>以下是我认为好的网络体验。</p>
<ul>
<li>switch等学习机能全速下载</li>
<li>全家设备能透明进行科学上网</li>
<li>网络延迟要低，dns不能泄露</li>
<li>稳定！稳定！稳定！</li>
</ul>
<h2 id="不值得的软路由"><a class="markdownIt-Anchor" href="#不值得的软路由"></a> 不值得的软路由</h2>
<p>混迹在各个论坛，经常会刷到软路由、n1等等帖子，通过这些帖子的描述，软路由其实就是一个功耗低一点的小电脑，通常会刷成openwrt、爱快这些系统，光猫网线连上它而后一起放入弱电箱，软路由再连路由器。</p>
<p><img data-src="https://static.bysegfault.com/images/20240429231321.png" alt="Pasted image 20240429231321.png" /></p>
<h3 id="软路由玩法"><a class="markdownIt-Anchor" href="#软路由玩法"></a> 软路由玩法</h3>
<p>软路由的配置可以自定义，通常要比路由器的配置高很多，举个例子，这些老哥通常会整一个x86的cpu、4g内存、128g存储的配置。然后在软路由里面安装docker、科学上网等工具，充当一个小服务器使用。</p>
<p>比如它安装了科学上网，因为路由器的数据包要经过它，在软路由这一跳，会完成科学代理操作，这就实现了家中网络都能无感科学上网。</p>
<p>功耗低费电少，cpu性能好，加上家里带宽一般都比较大，docker里面跑一些薅羊毛脚本，挂载alist等网盘，亦或是各种骚操作，完成可以充当服务器使用。</p>
<hr />
<p>每每看到这些帖子，我都忍不住想要去捡点这些垃圾，猛猛吃上几口。直到我了解到近年来mtk的arm cpu愈发强大，今非昔比。</p>
<h2 id="硬路由足矣"><a class="markdownIt-Anchor" href="#硬路由足矣"></a> 硬路由足矣！</h2>
<p>硬路由其实就是我们平时所使用的路由器，早期路由器的cpu十分拉跨，忙中偷闲基本不可能，处理网络数据包都费劲。现在路由器cpu已经足够好了，且支持硬件加速。如此一来，软路由多了一跳，还没硬件加速，岂不是多次一举。</p>
<p><img data-src="https://static.bysegfault.com/images/20240430100254.png" alt="Pasted image 20240429231321.png" /></p>
<h2 id="硬路由玩法"><a class="markdownIt-Anchor" href="#硬路由玩法"></a> 硬路由玩法</h2>
<p>硬路由出厂的系统，基本都是基于openwrt做的深度魔改，主打一个稳定。想要安装科学上网等插件，是不可能滴。因此必须获得它的ssh权限，才能做老系统不敢做之事。</p>
<p>本科期间搞了一台红米ax6，那台路由器，刷了openwrt之后，上网体验也是极好的，运行一些插件后，cpu完全能妥妥应对，只是没有2.5G口、不能玩docker等（因为存储小，无法扩容），略感遗憾。</p>
<p>23年8月痛下死手，买了TP的6088，512MB运存， 64MB闪存，2个2.5G口，4个千兆，一个USB，配置在700的价位还算不错。usb接口可以插上ssd来增加存储，之后就能使用docker了。</p>
<p>到手第一天，根据6088vpn漏洞，刷了<code>ImmortalWrt</code>，加上了一块128g的ssd，装了docker一些乱起八糟的插件，体验上并不好，毕竟只有512MB内存，加上很多插件存在一些bug，引起cpu飙升。</p>
<p>在路由器上跑docker，是不可取的，all in one + 中心化，一旦路由器某个服务出现问题，家里直接没网。最终只保留了<code>mosdns，wireguard，homeproxy</code>以及自己用shell写的ddns。十分稳定，mtk确实可以，平均负载基本都是0。</p>
<p><img data-src="https://static.bysegfault.com/images/20240430103013.png" alt="Pasted image 20240430103013.png" /></p>
<h3 id="插件吐槽"><a class="markdownIt-Anchor" href="#插件吐槽"></a> 插件吐槽</h3>
<p>这里不得不插一嘴，插件的选择，其实openwrt很稳定的，搞懂之后，结合自己的路由器和一些老哥的前车之鉴做一些小调整，上网体验没得说。</p>
<p>很多不稳定是插件导致的，比如最早我使用的openclash，因为fakeip导致平时网络工具经常无法正常使用，像ping等，折腾了许久配置，前前后后redirect等方案都在openclash上进行了尝试，然而还是会在使用几天后，莫名的国内访问延迟上涨，跳点大。甚至去读了一部分metaclash源码，写的很一般。后来换成了pw，pw更是卧龙凤雏，开启大陆优化，国内延迟会降到没开pw时的大小，和openclash一样，大概2天左右，就会跳点变大，cpu飙升。<br />
结合日志，加上cpu和内存根本没到瓶颈，也不是mosdns的问题，不得其解。</p>
<p>后来看到了sing-box内核，简单测试了一下，占用和性能都比clash要好，就选择了基于sing-box的homeproxy，仅仅踩了一些分流的坑，界面上也要简洁很多。国内速度和没开代理一样，用的bwg gia hy2，没感觉有晚高峰什么的，一直很流畅稳定。<br />
（分流的坑是因为GPT网页开启了http/3，如果不开启udp服务器代理或者不禁用它，就无法正常使用。</p>
<hr />
<p>docker的需求都交给了腾讯云，通过ipv6 wireguard回家访问，而且硬路由还有硬件加速，实在想不出，软路由有什么好的，还多了一跳。</p>
<h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2>
<p>路由器今非昔比，路由器有10胜，软路由有10败。</p>
<p>路由器有硬件加速，软路由没有，此乃一胜。<br />
路由器已经一胜了，软路由零胜，此乃二胜。<br />
路由器已经二胜了，软路由零胜，此乃三胜。<br />
路由器已经三胜了，软路由零胜，此乃四胜。<br />
路由器已经四胜了，软路由零胜，此乃五胜。<br />
路由器已经五胜了，软路由零胜，此乃六胜。<br />
路由器已经六胜了，软路由零胜，此乃七胜。<br />
路由器已经七胜了，软路由零胜，此乃八胜。<br />
路由器已经八胜了，软路由零胜，此乃九胜。<br />
路由器已经九胜了，软路由零胜，此乃十胜。</p>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>openwrt</tag>
        <tag>log</tag>
      </tags>
  </entry>
  <entry>
    <title>vector日志采集-快速开始</title>
    <url>/vector-record-tool/</url>
    <content><![CDATA[<blockquote>
<p>本文默认已经有一丢丢lua基础</p>
</blockquote>
<h2 id="vector-采集流程"><a class="markdownIt-Anchor" href="#vector-采集流程"></a> vector 采集流程</h2>
<p><img data-src="https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/20230910222313.png" alt="" /></p>
<p>vector官网给出的三步走战略，结合具体配置，设置采集源头—&gt;进行数据转换—&gt;保存转换好的数据。</p>
<pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token comment"># 从哪采集</span>
<span class="token punctuation">[</span><span class="token table class-name">sources.generate_syslog</span><span class="token punctuation">]</span>
<span class="token key property">type</span> <span class="token punctuation">=</span> <span class="token string">"demo_logs"</span>
<span class="token key property">format</span> <span class="token punctuation">=</span> <span class="token string">"syslog"</span>
<span class="token key property">count</span> <span class="token punctuation">=</span> <span class="token number">100</span>

<span class="token comment"># 数据转换</span>
<span class="token punctuation">[</span><span class="token table class-name">transforms.remap_syslog</span><span class="token punctuation">]</span>
<span class="token key property">inputs</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span> <span class="token string">"generate_syslog"</span><span class="token punctuation">]</span>  <span class="token comment"># 转换的输入来自generate_syslog过程的返回值</span>
<span class="token key property">type</span> <span class="token punctuation">=</span> <span class="token string">"remap"</span>
<span class="token key property">source</span> <span class="token punctuation">=</span> <span class="token string">'''
  structured = parse_syslog!(.message)
  . = merge(., structured)
'''</span>

<span class="token comment">#保存到哪</span>
<span class="token punctuation">[</span><span class="token table class-name">sinks.emit_syslog</span><span class="token punctuation">]</span>
<span class="token key property">inputs</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"remap_syslog"</span><span class="token punctuation">]</span> <span class="token comment"># 保存的输入来自remap_syslog过程的返回值</span>
<span class="token key property">type</span> <span class="token punctuation">=</span> <span class="token string">"console"</span>          <span class="token comment"># 把结果直接输出到终端上</span>
<span class="token key property">encoding.codec</span> <span class="token punctuation">=</span> <span class="token string">"json"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这相当的友好，除了toml配置，你还能使用<code>json</code>或者<s>需要游标卡尺的</s><code>yaml</code>。</p>
<h2 id="采集实战"><a class="markdownIt-Anchor" href="#采集实战"></a> 采集实战</h2>
<p>采集源头（sources）和 保存到哪（sinks）设置起来很容易，官网给出了相关的文档，你能看到很多sources、sink以及我们即将重点实战的数据转换（transforms）。</p>
<h3 id="实战案例背景"><a class="markdownIt-Anchor" href="#实战案例背景"></a> 实战案例背景</h3>
<p>假设有一个程序会通过syslog输出日志，我们需要采集含有<code>ohayo</code>字符串的日志，并把它保存到一个文件中。</p>
<p>采集源头：syslog<br />
数据转换需求：含有<code>ohayo</code>字符串的日志<br />
保存：文件</p>
<h3 id="vector-采集配置"><a class="markdownIt-Anchor" href="#vector-采集配置"></a> vector 采集配置</h3>
<p>采集源头，监听本机的<code>/dev/log</code>套接字，syslog与vector会通过这个套接字进行进程间通信。</p>
<pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">sources.syslog_1</span><span class="token punctuation">]</span>
<span class="token key property">type</span> <span class="token punctuation">=</span> <span class="token string">"socket"</span>      <span class="token comment"># 类型采用套接字方式</span>
<span class="token key property">mode</span> <span class="token punctuation">=</span> <span class="token string">"unix_stream"</span> <span class="token comment"># 采用unix流的方式</span>
<span class="token key property">path</span> <span class="token punctuation">=</span> <span class="token string">"/dev/log"</span>    <span class="token comment"># 监听套接字路径</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>数据转换，这里我使用的是lua，vector官网在极力推它们的remap，甚至给出<code>lua5.4比remap慢了60% &amp;&amp; lua只能在运行时才会出现问题，这不安全</code>的恐怖言论。<br />
O(2n)、O(3n)都是O(n)，长板凳、矮板凳都是板凳。根据剃刀原理…这就是我选lua的理由。</p>
<p>PS: remap在面对格式规范的日志输出，要比lua更加方便。而且在启动vector时会进行静态检查。</p>
<p>让我们先看一下，lua怎么在vector中转换数据的吧！下图是官网文档。<br />
<img data-src="https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/Pasted%20image%2020230908191517.png" alt="Pasted image 20230908191517.png" /></p>
<p>vector需要我们在配置中注册三个函数，<code>init | process | shutdown</code>，<code>第一条日志</code>来的时候，会执行<code>init</code>函数，然后会执行<code>process</code>，当转换结束时，会执行<code>shutdown</code>。<br />
注意，init只有在第一条日志来的时候才执行，shutdown在关闭时执行，而process在每条日志来的时候都会执行。</p>
<p>结合配置格式填写如下</p>
<pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">transforms.milestone_syslog_2</span><span class="token punctuation">]</span>
  <span class="token comment"># General</span>
<span class="token key property">type</span> <span class="token punctuation">=</span> <span class="token string">"lua"</span> <span class="token comment"># 转换类型lua</span>
<span class="token key property">version</span> <span class="token punctuation">=</span> <span class="token string">"2"</span> <span class="token comment"># 转换api版本，1已经被弃用了。</span>
<span class="token key property">inputs</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"milestone_syslog_1"</span><span class="token punctuation">]</span> <span class="token comment"># 从采集源头获取数据</span>
<span class="token key property">search_dirs</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"scripts"</span><span class="token punctuation">]</span>       <span class="token comment"># lua导包的搜寻路径。这里是相对路径./scripts</span>
<span class="token key property">source</span> <span class="token punctuation">=</span> <span class="token string">"rd = require('record')"</span>  <span class="token comment"># 引入资源，这里面可以写代码哦</span>
<span class="token key property">hooks.process</span> <span class="token punctuation">=</span> <span class="token string">"rd.process"</span>       <span class="token comment"># 注册 process函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token comment">-- @filename record.lua</span>
<span class="token keyword">local</span> M <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> M<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> emit<span class="token punctuation">)</span>
	<span class="token keyword">if</span> string<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>log<span class="token punctuation">.</span>message<span class="token punctuation">)</span> <span class="token keyword">then</span>
		<span class="token function">emit</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>

<span class="token keyword">return</span> M<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>解释一下，vector会把每一个从source采集日志，包装成一个table，日志的内容可以用<code>event.log.message</code>获取，<code>emit</code>函数会把<code>event</code>结构的table发送到sink存储层进行保存。<br />
保存的内容是 <code>event.log</code>，这个table的格式如下。<br />
<img data-src="https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/20230910221924.png" alt="image.png" /></p>
<p>接着设置保存，从转换层（transform）拿到数据，编码成text，设置保存路径即可。</p>
<pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">sinks.milestone_record_file</span><span class="token punctuation">]</span>
<span class="token key property">type</span> <span class="token punctuation">=</span> <span class="token string">"file"</span>
<span class="token key property">inputs</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"milestone_syslog_2"</span><span class="token punctuation">]</span>
<span class="token key property">idle_timeout_secs</span> <span class="token punctuation">=</span> <span class="token number">30</span>
<span class="token key property">encoding.codec</span> <span class="token punctuation">=</span> <span class="token string">"text"</span>
<span class="token key property">path</span> <span class="token punctuation">=</span> <span class="token string">"/tmp/vector-%Y-%m-%d.log"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>完整配置文件如下</p>
<pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">sources.syslog_1</span><span class="token punctuation">]</span>
<span class="token key property">type</span> <span class="token punctuation">=</span> <span class="token string">"socket"</span>      <span class="token comment"># 类型采用套接字方式</span>
<span class="token key property">mode</span> <span class="token punctuation">=</span> <span class="token string">"unix_stream"</span> <span class="token comment"># 采用unix流的方式</span>
<span class="token key property">path</span> <span class="token punctuation">=</span> <span class="token string">"/dev/log"</span>    <span class="token comment"># 监听套接字路径</span>

<span class="token punctuation">[</span><span class="token table class-name">transforms.milestone_syslog_2</span><span class="token punctuation">]</span>
  <span class="token comment"># General</span>
<span class="token key property">type</span> <span class="token punctuation">=</span> <span class="token string">"lua"</span> <span class="token comment"># 转换类型lua</span>
<span class="token key property">version</span> <span class="token punctuation">=</span> <span class="token string">"2"</span> <span class="token comment"># 转换api版本，1已经被弃用了。</span>
<span class="token key property">inputs</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"milestone_syslog_1"</span><span class="token punctuation">]</span> <span class="token comment"># 从采集源头获取数据</span>
<span class="token key property">search_dirs</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"scripts"</span><span class="token punctuation">]</span>       <span class="token comment"># lua导包的搜寻路径。这里是相对路径./scripts</span>
<span class="token key property">source</span> <span class="token punctuation">=</span> <span class="token string">"rd = require('record')"</span>  <span class="token comment"># 引入资源，这里面可以写代码哦,这个lua文件是自己写的哦。</span>
<span class="token key property">hooks.process</span> <span class="token punctuation">=</span> <span class="token string">"rd.process"</span>       <span class="token comment"># 注册 process函数</span>

<span class="token punctuation">[</span><span class="token table class-name">sinks.milestone_record_file</span><span class="token punctuation">]</span>
<span class="token key property">type</span> <span class="token punctuation">=</span> <span class="token string">"file"</span>
<span class="token key property">inputs</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"milestone_syslog_2"</span><span class="token punctuation">]</span>
<span class="token key property">idle_timeout_secs</span> <span class="token punctuation">=</span> <span class="token number">30</span>
<span class="token key property">encoding.codec</span> <span class="token punctuation">=</span> <span class="token string">"text"</span>
<span class="token key property">path</span> <span class="token punctuation">=</span> <span class="token string">"/tmp/vector-%Y-%m-%d.log"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>sudo vector --config xxx.toml</code>就可以进行采集了。</p>
<hr />
<h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2>
<p>如果你对lua有一定了解，那么这篇文章就够了，你可以在转换层做全部事情。BTW，官网文档对各种API写的相当全，比较不错的参看。本文对快速开始使用vector来说已经足够了，如果你的日志是标准内容，请首选remap，快是真的快。</p>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>vector日志采集</tag>
      </tags>
  </entry>
  <entry>
    <title>log-是时候迈向新阶段了！</title>
    <url>/journal/day_1/</url>
    <content><![CDATA[<p>就在昨天晚上，我正在床上津津有味的看一篇有关快速幂的博文，这小菜一碟～，简单简单，小小快速幂可笑可笑。往下一划，发现这个博主还写了一篇「快速取模」的文章，死去的回忆开始攻击我。</p>
<p>计算机是如何实现加减乘除、取模运算？</p>
<p>只记得这是计算机组成原理的东西，完蛋了。</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/61FFA961-08C5-4C57-816A-8A5CF398CD93.jpeg" alt="61FFA961-08C5-4C57-816A-8A5CF398CD93" /></p>
<p>我没有养成计算机思考思维！</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">cout<span class="token operator">&lt;&lt;</span><span class="token number">7</span><span class="token operator">/</span><span class="token number">4</span><span class="token operator">&lt;&lt;</span>endl
  <span class="token operator">&lt;&lt;</span><span class="token operator">-</span><span class="token number">7</span><span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">;</span>
<span class="token comment">//out</span>
<span class="token comment">// 3</span>
<span class="token comment">// -1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>WTF</code>，计算机组成原理，从「数字电路」和「模拟电路」一步步把计算机构建出来，电路基础又依赖于「离散数学」和「物理学」的部分知识。OK梳理完毕。</p>
<p>这是自自学python的第三次迈向新阶段。</p>
<h2 id="impossible-mission"><a class="markdownIt-Anchor" href="#impossible-mission"></a> impossible mission</h2>
<ul>
<li>[x] 电路</li>
<li>[x] 物理和数学</li>
<li>[x] 计算机组成原理</li>
</ul>
<p>一个星期，达到看到代码能想到硬件实现、电路。</p>
<h2 id="后续"><a class="markdownIt-Anchor" href="#后续"></a> 后续</h2>
<p>马上就要开始毕业设计了，完成这次的mission，争取记录一下毕业设计的一些东西。</p>
]]></content>
      <categories>
        <category>journal</category>
      </categories>
      <tags>
        <tag>journal</tag>
      </tags>
  </entry>
  <entry>
    <title>学习Git</title>
    <url>/learning/git-learning/</url>
    <content><![CDATA[<p>最近也是产出高峰期耶~</p>
<p>咱的电脑是一个对于<strong>物理学</strong>学生十分够用<s>拉跨</s>的笔电。</p>
<p>在我大二下学期，平时从不耍脾气的它，硬盘坏了，咱的代码自然是未能渡劫。</p>
<img data-src="https://cdn.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/image-20220512180313240.png" alt="image-20220512180313240" style="zoom: 8%;" />
<p>有了上次教训之后嘞，时隔3个月，好吧，半年。终于开始学一手Git，来解决一下这个问题了。</p>
<p>下面的内容是看的git官网下的book。</p>
<hr />
<h2 id=""><a class="markdownIt-Anchor" href="#"></a> </h2>
<h1 id="为什么学习git"><a class="markdownIt-Anchor" href="#为什么学习git"></a> 为什么学习Git</h1>
<p>Git就是用来解决版本控制，和避免像我刚刚那样，硬盘坏了，再也回不去了。</p>
<p>传统的版本控制，把东西上传到一台机器上面，所有人通过SSH登取出来就好，但是可能会出现咱电脑的硬盘耍小脾气的情况。</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/image-20220512181105529.png" alt="传统的版本控制" /></p>
<p>Git是分布式的版本控制。就是说，服务器宕机了，在任何一个fork的主机上都可恢复数据。好耶~</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/image-20220512181358000.png" alt="分布式的版本控制" /></p>
<h1 id="git的工作流程"><a class="markdownIt-Anchor" href="#git的工作流程"></a> git的工作流程</h1>
<p>流程官网写的实在太好了！落泪~<s>忍不住copy</s></p>
<p>git有三种状态 <strong>已提交（committed）</strong>、<strong>已修改（modified）</strong> 和 <strong>已暂存（staged）</strong>。</p>
<ul>
<li>已修改表示修改了文件，但还没保存到数据库中。</li>
<li>已暂存表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。</li>
<li>已提交表示数据已经安全地保存在本地数据库中。</li>
</ul>
<p>这会让我们的 Git 项目拥有三个阶段：工作区、暂存区以及 Git 目录。</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/image-20220512184737778.png" alt="image-20220512184737778" /></p>
<p>工作区是对项目的某个版本独立提取出来的内容。 这些从 Git 仓库的压缩数据库中提取出来的文件，放在磁盘上供你使用或修改。</p>
<p>暂存区是一个文件，保存了下次将要提交的文件列表信息，一般在 Git 仓库目录中。 按照 Git 的术语叫做“索引”，不过一般说法还是叫“暂存区”。</p>
<p>Git 仓库目录是 Git 用来保存项目的元数据和对象数据库的地方。 这是 Git 中最重要的部分，从其它计算机克隆仓库时，复制的就是这里的数据。</p>
<p>基本的 Git 工作流程如下：</p>
<ol>
<li>在工作区中修改文件。</li>
<li>将你想要下次提交的更改选择性地暂存，这样只会将更改的部分添加到暂存区。</li>
<li>提交更新，找到暂存区的文件，将快照永久性存储到 Git 目录。</li>
</ol>
<p>如果 Git 目录中保存着特定版本的文件，就属于 <strong>已提交</strong> 状态。 如果文件已修改并放入暂存区，就属于 <strong>已暂存</strong> 状态。 如果自上次检出后，作了修改但还没有放到暂存区域，就是 <strong>已修改</strong> 状态。</p>
<h2 id="版本控制快照的创建"><a class="markdownIt-Anchor" href="#版本控制快照的创建"></a> 版本控制快照的创建</h2>
<blockquote>
<p>快照可以理解为简单的备份</p>
</blockquote>
<p>有些版本是这样储存的</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/image-20220512183249206.png" alt="image-20220512183249206" /></p>
<p>Git是这样的</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/image-20220512183441894.png" alt="image-20220512183441894" /></p>
<p>不管文件改变没，都会在快照中备份，但是为了效率，如果文件没改变，git会备份一个指向源文件的指针。</p>
<h2 id="全部本地化"><a class="markdownIt-Anchor" href="#全部本地化"></a> 全部本地化</h2>
<p>git拉取的是全部的镜像，所以当咱想要查看某个版本的文件时，在本地查看就好啦~</p>
<h2 id="校验"><a class="markdownIt-Anchor" href="#校验"></a> 校验</h2>
<p>git会在存储数据前，对所有的文件进行sha-1的hash转换，git的索引就是这个hash值，o（1）的时间复杂度查找哦~</p>
<p>这个校验，也会让文件即使发生一个空格的变化，也会被记录下来。好耶~</p>
<h1 id="配置git"><a class="markdownIt-Anchor" href="#配置git"></a> 配置git</h1>
<p>git会记录每个用户的上传等信息，因此，需要配置信息。</p>
<p>正如官网所说</p>
<blockquote>
<p>安装完 Git 之后，要做的第一件事就是设置你的用户名和邮件地址。 这一点很重要，因为每一个 Git 提交都会使用这些信息，它们会写入到你的每一次提交中，不可更改</p>
</blockquote>
<h2 id="用户信息"><a class="markdownIt-Anchor" href="#用户信息"></a> 用户信息</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"zhu-jiyuan"</span>
<span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token number">848433033</span>@qq.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>–global表示的是全局配置。</p>
<p>咱可以用下面的命令，来看配置在哪</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--list</span> --show-origin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img data-src="https://cdn.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/image-20220512205411242.png" alt="image-20220512205411242" /></p>
<p>列出全部的配置列表（包含全局和局部</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--list</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>官网中提示道：你可能会看到重复的变量名，因为 Git 会从不同的文件中读取同一个配置（例如：<code>/etc/gitconfig</code> 与 <code>~/.gitconfig</code>）。 这种情况下，Git 会使用它找到的每一个变量的最后一个配置。</p>
<p>你可以通过输入 <code>git config &lt;key&gt;</code>： 来检查 Git 的某一项配置</p>
<pre class="line-numbers language-console" data-language="console"><code class="language-console">$ git config user.name
John Doe<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<table>
<thead>
<tr>
<th>Note</th>
<th>由于 Git 会从多个文件中读取同一配置变量的不同值，因此你可能会在其中看到意料之外的值而不知道为什么。 此时，你可以查询 Git 中该变量的 <strong>原始</strong> 值，它会告诉你哪一个配置文件最后设置了该值：<code>$ git config --show-origin rerere.autoUpdate file:/home/johndoe/.gitconfig	false</code></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h1 id="获取帮助"><a class="markdownIt-Anchor" href="#获取帮助"></a> 获取帮助</h1>
<p>若你使用 Git 时需要获取帮助，有三种等价的方法可以找到 Git 命令的综合手册（manpage）：</p>
<pre class="line-numbers language-console" data-language="console"><code class="language-console">$ git help &lt;verb&gt;
$ git &lt;verb&gt; --help
$ man git-&lt;verb&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>例如，要想获得 <code>git config</code> 命令的手册，执行</p>
<pre class="line-numbers language-console" data-language="console"><code class="language-console">$ git help config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这些命令很棒，因为你随时随地可以使用而无需联网。 如果你觉得手册或者本书的内容还不够用，你可以尝试在 Freenode IRC 服务器 <a href="https://freenode.net/">https://freenode.net</a> 上的 <code>#git</code> 或 <code>#github</code> 频道寻求帮助。 这些频道经常有上百人在线，他们都精通 Git 并且乐于助人。</p>
<p>此外，如果你不需要全面的手册，只需要可用选项的快速参考，那么可以用 <code>-h</code> 选项获得更简明的 “help” 输出：</p>
<pre class="line-numbers language-console" data-language="console"><code class="language-console">$ git add -h
usage: git add [&lt;options&gt;] [--] &lt;pathspec&gt;...

    -n, --dry-run         dry run
    -v, --verbose         be verbose

    -i, --interactive     interactive picking
    -p, --patch           select hunks interactively
    -e, --edit            edit current diff and apply
    -f, --force           allow adding otherwise ignored files
    -u, --update          update tracked files
    --renormalize         renormalize EOL of tracked files (implies -u)
    -N, --intent-to-add   record only the fact that the path will be added later
    -A, --all             add changes from all tracked and untracked files
    --ignore-removal      ignore paths removed in the working tree (same as --no-all)
    --refresh             don&#39;t add, only refresh the index
    --ignore-errors       just skip files which cannot be added because of errors
    --ignore-missing      check if - even missing - files are ignored in dry run
    --chmod (+|-)x        override the executable bit of the listed files<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我也不想抄，可是它<s>叫我哥哥诶</s>写的太好了。</p>
]]></content>
      <categories>
        <category>note</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>简单的数学tex</title>
    <url>/learning/tex-math/</url>
    <content><![CDATA[<h1 id="tex中的数学表示"><a class="markdownIt-Anchor" href="#tex中的数学表示"></a> Tex中的数学表示</h1>
<h2 id="官网文档"><a class="markdownIt-Anchor" href="#官网文档"></a> 官网文档</h2>
<ul>
<li>
<p><a href="https://katex.org/docs/supported.html">katex数学支持函数</a></p>
</li>
<li>
<p><a href="https://katex.org/docs/support_table.html">katex数学详细文档</a></p>
</li>
</ul>
<p>👆👆👆所有的数学公式、特殊符号均可在上面找到。</p>
<h2 id="表示方法"><a class="markdownIt-Anchor" href="#表示方法"></a> 表示方法</h2>
<h3 id="行内显示"><a class="markdownIt-Anchor" href="#行内显示"></a> 行内显示</h3>
<p><code>$内容$</code><br />
<code>$a+b^2$</code> = <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>+</mo><msup><mi>b</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">a + b^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></p>
<h3 id="独立块显示"><a class="markdownIt-Anchor" href="#独立块显示"></a> 独立块显示</h3>
<pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token equation string">$$<span class="token equation-command regex">\begin</span> &#123;array&#125;&#123;c&#125; 
<span class="token equation-command regex">\nabla</span> <span class="token equation-command regex">\times</span> <span class="token equation-command regex">\vec</span> &#123;<span class="token equation-command regex">\mathbf</span> &#123;B&#125;&#125; -<span class="token equation-command regex">\,</span> <span class="token equation-command regex">\frac</span>1c<span class="token equation-command regex">\,</span> <span class="token equation-command regex">\frac</span> &#123;<span class="token equation-command regex">\partial</span><span class="token equation-command regex">\vec</span> &#123;<span class="token equation-command regex">\mathbf</span> &#123;E&#125;&#125;&#125;&#123;<span class="token equation-command regex">\partial</span> t&#125; &amp; = <span class="token equation-command regex">\frac</span> &#123;4<span class="token equation-command regex">\pi</span>&#125;&#123;c&#125;<span class="token equation-command regex">\vec</span> &#123;<span class="token equation-command regex">\mathbf</span> &#123;j&#125;&#125;    <span class="token equation-command regex">\nabla</span> <span class="token equation-command regex">\cdot</span> <span class="token equation-command regex">\vec</span> &#123;<span class="token equation-command regex">\mathbf</span> &#123;E&#125;&#125; &amp; = 4 <span class="token equation-command regex">\pi</span> <span class="token equation-command regex">\rho</span> <span class="token equation-command regex">\\</span> <span class="token equation-command regex">\nabla</span> <span class="token equation-command regex">\times</span> <span class="token equation-command regex">\vec</span> &#123;<span class="token equation-command regex">\mathbf</span> &#123;E&#125;&#125;<span class="token equation-command regex">\,</span> +<span class="token equation-command regex">\,</span> <span class="token equation-command regex">\frac</span>1c<span class="token equation-command regex">\,</span> <span class="token equation-command regex">\frac</span> &#123;<span class="token equation-command regex">\partial</span><span class="token equation-command regex">\vec</span> &#123;<span class="token equation-command regex">\mathbf</span> &#123;B&#125;&#125;&#125;&#123;<span class="token equation-command regex">\partial</span> t&#125; &amp; = <span class="token equation-command regex">\vec</span> &#123;<span class="token equation-command regex">\mathbf</span> &#123;0&#125;&#125; <span class="token equation-command regex">\\</span> <span class="token equation-command regex">\nabla</span> <span class="token equation-command regex">\cdot</span> <span class="token equation-command regex">\vec</span> &#123;<span class="token equation-command regex">\mathbf</span> &#123;B&#125;&#125; &amp; = 0 
<span class="token equation-command regex">\end</span> &#123;array&#125;$$</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.15999999999999992em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">∇</mi><mo>×</mo><mover accent="true"><mi mathvariant="bold">B</mi><mo>⃗</mo></mover><mo>−</mo><mtext> </mtext><mfrac><mn>1</mn><mi>c</mi></mfrac><mtext> </mtext><mfrac><mrow><mi mathvariant="normal">∂</mi><mover accent="true"><mi mathvariant="bold">E</mi><mo>⃗</mo></mover></mrow><mrow><mi mathvariant="normal">∂</mi><mi>t</mi></mrow></mfrac></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>=</mo><mfrac><mrow><mn>4</mn><mi>π</mi></mrow><mi>c</mi></mfrac><mover accent="true"><mi mathvariant="bold">j</mi><mo>⃗</mo></mover><mi mathvariant="normal">∇</mi><mo>⋅</mo><mover accent="true"><mi mathvariant="bold">E</mi><mo>⃗</mo></mover></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>=</mo><mn>4</mn><mi>π</mi><mi>ρ</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">∇</mi><mo>×</mo><mover accent="true"><mi mathvariant="bold">E</mi><mo>⃗</mo></mover><mtext> </mtext><mo>+</mo><mtext> </mtext><mfrac><mn>1</mn><mi>c</mi></mfrac><mtext> </mtext><mfrac><mrow><mi mathvariant="normal">∂</mi><mover accent="true"><mi mathvariant="bold">B</mi><mo>⃗</mo></mover></mrow><mrow><mi mathvariant="normal">∂</mi><mi>t</mi></mrow></mfrac></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>=</mo><mover accent="true"><mn mathvariant="bold">0</mn><mo>⃗</mo></mover></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">∇</mi><mo>⋅</mo><mover accent="true"><mi mathvariant="bold">B</mi><mo>⃗</mo></mover></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin {array}{c} \nabla \times \vec {\mathbf {B}} -\, \frac1c\, \frac {\partial\vec {\mathbf {E}}}{\partial t} &amp; = \frac {4\pi}{c}\vec {\mathbf {j}}    \nabla \cdot \vec {\mathbf {E}} &amp; = 4 \pi \rho \\ \nabla \times \vec {\mathbf {E}}\, +\, \frac1c\, \frac {\partial\vec {\mathbf {B}}}{\partial t} &amp; = \vec {\mathbf {0}} \\ \nabla \cdot \vec {\mathbf {B}} &amp; = 0 \end {array}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.1938640000000005em;vertical-align:-1.846932em;"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.3469320000000002em;"><span style="top:-4.346932000000001em;"><span class="pstrut" style="height:3.072377em;"></span><span class="mord"><span class="mord">∇</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9691099999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathbf">B</span></span></span></span><span style="top:-3.25511em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.15216em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">c</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.072377em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal mtight">t</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord accent mtight"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9691099999999999em;"><span style="top:-2.714em;"><span class="pstrut" style="height:2.714em;"></span><span class="mord mtight"><span class="mord mtight"><span class="mord mathbf mtight">E</span></span></span></span><span style="top:-2.96911em;"><span class="pstrut" style="height:2.714em;"></span><span class="accent-body" style="left:-0.15216em;"><span class="overlay mtight" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-2.9145549999999996em;"><span class="pstrut" style="height:3.072377em;"></span><span class="mord"><span class="mord">∇</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9691099999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathbf">E</span></span></span></span><span style="top:-3.25511em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.15216em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">c</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.072377em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal mtight">t</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord accent mtight"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9691099999999999em;"><span style="top:-2.714em;"><span class="pstrut" style="height:2.714em;"></span><span class="mord mtight"><span class="mord mtight"><span class="mord mathbf mtight">B</span></span></span></span><span style="top:-2.96911em;"><span class="pstrut" style="height:2.714em;"></span><span class="accent-body" style="left:-0.15216em;"><span class="overlay mtight" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-1.585445em;"><span class="pstrut" style="height:3.072377em;"></span><span class="mord"><span class="mord">∇</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9691099999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathbf">B</span></span></span></span><span style="top:-3.25511em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.15216em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.846932em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.3469320000000002em;"><span style="top:-4.346932000000001em;"><span class="pstrut" style="height:3.072377em;"></span><span class="mord"><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">π</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9774399999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathbf">j</span></span></span></span><span style="top:-3.26344em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="mord">∇</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9691099999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathbf">E</span></span></span></span><span style="top:-3.25511em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.15216em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span><span style="top:-2.9145549999999996em;"><span class="pstrut" style="height:3.072377em;"></span><span class="mord"><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.92744em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathbf">0</span></span></span></span><span style="top:-3.21344em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span><span style="top:-1.585445em;"><span class="pstrut" style="height:3.072377em;"></span><span class="mord"><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.846932em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:2.3469320000000002em;"><span style="top:-4.346932000000001em;"><span class="pstrut" style="height:3.072377em;"></span><span class="mord"><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">4</span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="mord mathnormal">ρ</span></span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></span></p>
<h1 id="常用"><a class="markdownIt-Anchor" href="#常用"></a> 常用</h1>
<h2 id="上-下标"><a class="markdownIt-Anchor" href="#上-下标"></a> 上、下标</h2>
<p><code>^</code>上标，后面如果很长，要用把内容放到<code>&#123;&#125;</code>里。</p>
<p><code>_</code>下标，后面如果很长，要用把内容放到<code>&#123;&#125;</code>里。</p>
<pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token equation string">$a^2+b^&#123;20&#125;$</span>

<span class="token equation string">$a+b^&#123;x+y+z^2&#125;$</span>


<span class="token equation string">$H_&#123;2&#125;O$</span>

<span class="token equation string">$a_1,a_2,a_3$</span>

<span class="token equation string">$a_&#123;2n+1&#125;$</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mn>2</mn></msup><mo>+</mo><msup><mi>b</mi><mn>20</mn></msup></mrow><annotation encoding="application/x-tex">a^2+b^{20}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span></span></p>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>+</mo><msup><mi>b</mi><mrow><mi>x</mi><mo>+</mo><mi>y</mi><mo>+</mo><msup><mi>z</mi><mn>2</mn></msup></mrow></msup></mrow><annotation encoding="application/x-tex">a+b^{x+y+z^2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9869199999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9869199999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mbin mtight">+</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>H</mi><mn>2</mn></msub><mi>O</mi></mrow><annotation encoding="application/x-tex">H_{2}O</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span></span></span></span></p>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">a_1,a_2,a_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p>
<h2 id="求导向量"><a class="markdownIt-Anchor" href="#求导向量"></a> 求导&amp;&amp;向量</h2>
<pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">一阶导数
<span class="token equation string">$f'$</span>
二阶导数
<span class="token equation string">$f''$</span>

矢量表示
<span class="token equation string">$<span class="token equation-command regex">\vec</span>&#123;F&#125;$</span>

<span class="token equation string">$<span class="token equation-command regex">\vec</span>&#123;a&#125;+<span class="token equation-command regex">\vec</span>&#123;b&#125;=<span class="token equation-command regex">\vec</span>&#123;c&#125;$</span>


<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>一阶导数<br />
<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>f</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow><annotation encoding="application/x-tex">f&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.946332em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span><br />
二阶导数<br />
<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>f</mi><mrow><mo mathvariant="normal">′</mo><mo mathvariant="normal">′</mo></mrow></msup></mrow><annotation encoding="application/x-tex">f&#x27;&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.946332em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>矢量表示<br />
<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>F</mi><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{F}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9663299999999999em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663299999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.15216em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span></p>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>a</mi><mo>⃗</mo></mover><mo>+</mo><mover accent="true"><mi>b</mi><mo>⃗</mo></mover><mo>=</mo><mover accent="true"><mi>c</mi><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{a} + \vec{b} = \vec{c}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.79733em;vertical-align:-0.08333em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9774399999999999em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9774399999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">b</span></span></span><span style="top:-3.26344em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.714em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">c</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.17994em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span></p>
<h2 id="矩阵行列式"><a class="markdownIt-Anchor" href="#矩阵行列式"></a> 矩阵&amp;&amp;行列式</h2>
<p>矩阵有很多种表示，详细见<a href="https://katex.org/docs/supported.html">官网</a>。</p>
<p>这里用的是MIT公开课中的书写方法。</p>
<pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token equation string">$$<span class="token equation-command regex">\begin</span>&#123;bmatrix&#125;
a &amp; b <span class="token equation-command regex">\\</span>   &lt;==这里的「<span class="token equation-command regex">\\</span>」为换行的意思
c &amp; d
<span class="token equation-command regex">\end</span>&#123;bmatrix&#125;$$</span>

<span class="token equation string">$$<span class="token equation-command regex">\begin</span>&#123;bmatrix&#125;
a &amp; b &amp; f <span class="token equation-command regex">\\</span>
c &amp; d &amp; g
<span class="token equation-command regex">\end</span>&#123;bmatrix&#125;$$</span>

行列式如下
<span class="token equation string">$$<span class="token equation-command regex">\begin</span>&#123;vmatrix&#125;
a &amp; b <span class="token equation-command regex">\\</span>
c &amp; d
<span class="token equation-command regex">\end</span>&#123;vmatrix&#125;$$</span>

<span class="token equation string">$$<span class="token equation-command regex">\begin</span>&#123;vmatrix&#125;
a &amp; b <span class="token equation-command regex">\\</span>
c &amp; d
<span class="token equation-command regex">\end</span>&#123;vmatrix&#125;=a*d-b*c$$</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>a</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>b</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>c</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>d</mi></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><annotation encoding="application/x-tex">\begin{bmatrix}
a &amp; b \\
c &amp; d
\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">b</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>a</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>b</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>f</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>c</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>d</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>g</mi></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><annotation encoding="application/x-tex">\begin{bmatrix}
a &amp; b &amp; f \\
c &amp; d &amp; g
\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">b</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo fence="true">∣</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>a</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>b</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>c</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>d</mi></mstyle></mtd></mtr></mtable><mo fence="true">∣</mo></mrow><annotation encoding="application/x-tex">\begin{vmatrix}
a &amp; b \\
c &amp; d
\end{vmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.42999em;vertical-align:-0.9500199999999999em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4799700000000002em;"><span style="top:-1.65598em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.25698em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.85798em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.87897em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.47997em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500199999999999em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">b</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4799700000000002em;"><span style="top:-1.65598em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.25698em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.85798em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.87897em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.47997em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500199999999999em;"><span></span></span></span></span></span></span></span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mrow><mo fence="true">∣</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>a</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>b</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>c</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>d</mi></mstyle></mtd></mtr></mtable><mo fence="true">∣</mo></mrow><mo>=</mo><mi>a</mi><mo>∗</mo><mi>d</mi><mo>−</mo><mi>b</mi><mo>∗</mo><mi>c</mi></mrow><annotation encoding="application/x-tex">\begin{vmatrix}
a &amp; b \\
c &amp; d
\end{vmatrix}=a*d-b*c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.42999em;vertical-align:-0.9500199999999999em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4799700000000002em;"><span style="top:-1.65598em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.25698em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.85798em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.87897em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.47997em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500199999999999em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">b</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4799700000000002em;"><span style="top:-1.65598em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.25698em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.85798em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.87897em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.47997em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500199999999999em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">c</span></span></span></span></span></p>
<h2 id="三角函数物理符号"><a class="markdownIt-Anchor" href="#三角函数物理符号"></a> 三角函数&amp;&amp;物理符号</h2>
<pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token equation string">$$
<span class="token equation-command regex">\sin</span>&#123;a&#125; <span class="token equation-command regex">\\</span>
<span class="token equation-command regex">\cos</span>&#123;a&#125; <span class="token equation-command regex">\\</span>
<span class="token equation-command regex">\tan</span>&#123;a&#125; <span class="token equation-command regex">\\</span>
<span class="token equation-command regex">\arcsin</span>&#123;a&#125;<span class="token equation-command regex">\\</span>
<span class="token equation-command regex">\arccos</span>&#123;a&#125;<span class="token equation-command regex">\\</span>
<span class="token equation-command regex">\arctan</span>&#123;a&#125;
$$</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>sin</mi><mo>⁡</mo><mi>a</mi><mspace linebreak="newline"></mspace><mi>cos</mi><mo>⁡</mo><mi>a</mi><mspace linebreak="newline"></mspace><mi>tan</mi><mo>⁡</mo><mi>a</mi><mspace linebreak="newline"></mspace><mi>arcsin</mi><mo>⁡</mo><mi>a</mi><mspace linebreak="newline"></mspace><mi>arccos</mi><mo>⁡</mo><mi>a</mi><mspace linebreak="newline"></mspace><mi>arctan</mi><mo>⁡</mo><mi>a</mi></mrow><annotation encoding="application/x-tex">\sin{a} \\
\cos{a} \\
\tan{a} \\
\arcsin{a}\\
\arccos{a}\\
\arctan{a}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66786em;vertical-align:0em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mop">tan</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.66786em;vertical-align:0em;"></span><span class="mop">arcsin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mop">arccos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mop">arctan</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span></span></span></span></span></span></p>
<pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token equation string">$$
<span class="token equation-command regex">\alpha</span> <span class="token equation-command regex">\\</span>
<span class="token equation-command regex">\delta</span> <span class="token equation-command regex">\\</span>
<span class="token equation-command regex">\gamma</span> <span class="token equation-command regex">\\</span>
<span class="token equation-command regex">\theta</span> <span class="token equation-command regex">\\</span>
<span class="token equation-command regex">\pi</span> <span class="token equation-command regex">\\</span>
<span class="token equation-command regex">\Pi</span><span class="token equation-command regex">\\</span>
<span class="token equation-command regex">\rho</span> <span class="token equation-command regex">\\</span>
<span class="token equation-command regex">\upsilon</span> <span class="token equation-command regex">\\</span>
<span class="token equation-command regex">\omega</span>

$$</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>α</mi><mspace linebreak="newline"></mspace><mi>δ</mi><mspace linebreak="newline"></mspace><mi>γ</mi><mspace linebreak="newline"></mspace><mi>θ</mi><mspace linebreak="newline"></mspace><mi>π</mi><mspace linebreak="newline"></mspace><mi mathvariant="normal">Π</mi><mspace linebreak="newline"></mspace><mi>ρ</mi><mspace linebreak="newline"></mspace><mi>υ</mi><mspace linebreak="newline"></mspace><mi>ω</mi></mrow><annotation encoding="application/x-tex">\alpha \\
\delta \\
\gamma \\
\theta \\
\pi \\
\Pi\\
\rho \\
\upsilon \\
\omega
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Π</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">ρ</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">υ</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span></span></span></span></span></p>
<pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token equation string">$<span class="token equation-command regex">\sin</span>^2&#123;<span class="token equation-command regex">\theta</span>&#125; + <span class="token equation-command regex">\cos</span>^2&#123;<span class="token equation-command regex">\theta</span>&#125; = 1$</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mo><mi>sin</mi><mo>⁡</mo></mo><mn>2</mn></msup><mi>θ</mi><mo>+</mo><msup><mo><mi>cos</mi><mo>⁡</mo></mo><mn>2</mn></msup><mi>θ</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\sin^2{\theta} + \cos^2{\theta} = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.955198em;vertical-align:-0.08333em;"></span><span class="mop"><span class="mop">sin</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.871868em;"><span style="top:-3.12076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mop"><span class="mop">cos</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></p>
<h2 id="对数分数"><a class="markdownIt-Anchor" href="#对数分数"></a> 对数&amp;&amp;分数</h2>
<pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token equation string">$$
<span class="token equation-command regex">\ln</span>&#123;2&#125; <span class="token equation-command regex">\\</span>
e^&#123;2&#125; <span class="token equation-command regex">\\</span>
<span class="token equation-command regex">\log</span>_&#123;2&#125;4

<span class="token equation-command regex">\sqrt</span>&#123;3&#125;<span class="token equation-command regex">\\</span>
<span class="token equation-command regex">\sqrt</span>[5]&#123;x&#125;
$$</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>ln</mi><mo>⁡</mo><mn>2</mn><mspace linebreak="newline"></mspace><msup><mi>e</mi><mn>2</mn></msup><mspace linebreak="newline"></mspace><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mn>4</mn><mspace linebreak="newline"></mspace><msqrt><mn>3</mn></msqrt><mspace linebreak="newline"></mspace><mroot><mi>x</mi><mn>5</mn></mroot></mrow><annotation encoding="application/x-tex">\ln{2} \\
e^{2} \\
\log_{2}4\\

\sqrt{3}\\
\sqrt[5]{x}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mop">ln</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">2</span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.93858em;vertical-align:-0.24414em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.08390500000000001em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.956095em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord">3</span></span></span><span style="top:-2.916095em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702
c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14
c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54
c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10
s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429
c69,-144,104.5,-217.7,106.5,-221
l0 -0
c5.3,-9.3,12,-14,20,-14
H400000v40H845.2724
s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7
c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z
M834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.08390500000000001em;"><span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.190845em;"></span><span class="mord sqrt"><span class="root"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7172060000000001em;"><span style="top:-2.8949860000000003em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size6 size1 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8491550000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathnormal">x</span></span></span><span style="top:-2.809155em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702
c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14
c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54
c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10
s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429
c69,-144,104.5,-217.7,106.5,-221
l0 -0
c5.3,-9.3,12,-14,20,-14
H400000v40H845.2724
s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7
c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z
M834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.190845em;"><span></span></span></span></span></span></span></span></span></span></p>
<pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token equation string">$$
<span class="token equation-command regex">\frac</span>&#123;1&#125;&#123;e&#125;<span class="token equation-command regex">\\</span>
<span class="token equation-command regex">\frac</span>&#123;<span class="token equation-command regex">\sin</span>&#123;a&#125;&#125;&#123;<span class="token equation-command regex">\cos</span>&#123;a&#125;&#125; = <span class="token equation-command regex">\tan</span>&#123;a&#125;<span class="token equation-command regex">\\</span>
<span class="token equation-command regex">\frac</span>&#123;1&#125;&#123;x^2+y^2&#125;
$$</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mfrac><mn>1</mn><mi>e</mi></mfrac><mspace linebreak="newline"></mspace><mfrac><mrow><mi>sin</mi><mo>⁡</mo><mi>a</mi></mrow><mrow><mi>cos</mi><mo>⁡</mo><mi>a</mi></mrow></mfrac><mo>=</mo><mi>tan</mi><mo>⁡</mo><mi>a</mi><mspace linebreak="newline"></mspace><mfrac><mn>1</mn><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><msup><mi>y</mi><mn>2</mn></msup></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{e}\\
\frac{\sin{a}}{\cos{a}} = \tan{a}\\
\frac{1}{x^2+y^2}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">e</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:2.03086em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3448600000000002em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mop">tan</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:2.20188em;vertical-align:-0.8804400000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<h2 id="积分条件"><a class="markdownIt-Anchor" href="#积分条件"></a> 积分&amp;&amp;条件</h2>
<pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token equation string">$$
<span class="token equation-command regex">\int</span>&#123;x&#125;dx = x^2 +C<span class="token equation-command regex">\\</span>
<span class="token equation-command regex">\iint</span>&#123;xy&#125;dxdy<span class="token equation-command regex">\\</span>
<span class="token equation-command regex">\iiint</span>&#123;xyz&#125;dxdydz
$$</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo>∫</mo><mi>x</mi><mi>d</mi><mi>x</mi><mo>=</mo><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mi>C</mi><mspace linebreak="newline"></mspace><mo>∬</mo><mrow><mi>x</mi><mi>y</mi></mrow><mi>d</mi><mi>x</mi><mi>d</mi><mi>y</mi><mspace linebreak="newline"></mspace><mo>∭</mo><mrow><mi>x</mi><mi>y</mi><mi>z</mi></mrow><mi>d</mi><mi>x</mi><mi>d</mi><mi>y</mi><mi>d</mi><mi>z</mi></mrow><annotation encoding="application/x-tex">\int{x} dx = x^2 +C\\
\iint{xy} dxdy\\
\iiint{xyz} dxdydz
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.22225em;vertical-align:-0.86225em;"></span><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011249999999999316em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:2.222em;vertical-align:-0.862em;"></span><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0009999999999999454em;">∬</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:2.222em;vertical-align:-0.862em;"></span><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0009999999999999454em;">∭</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span></span></span></p>
<pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token equation string">$$
F(n)=<span class="token equation-command regex">\begin</span>&#123;dcases&#125;
1 &amp; <span class="token equation-command regex">\text</span>&#123;if&#125;<span class="token equation-command regex">\quad</span> n=0,1 <span class="token equation-command regex">\\</span>
n*F(n-1) &amp; <span class="token equation-command regex">\text</span>&#123;if&#125; <span class="token equation-command regex">\quad</span> n>=1
<span class="token equation-command regex">\end</span>&#123;dcases&#125;<span class="token equation-command regex">\\</span><span class="token equation-command regex">\\</span>
F(n) = <span class="token equation-command regex">\Pi</span>_&#123;<span class="token equation-command regex">\substack</span>&#123;i=1&#125;&#125;^&#123;n&#125;n
$$</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mtext>if</mtext><mspace width="1em"/><mi>n</mi><mo>=</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>n</mi><mo>∗</mo><mi>F</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mtext>if</mtext><mspace width="1em"/><mi>n</mi><mo>&gt;</mo><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr></mtable></mrow><mspace linebreak="newline"></mspace><mspace linebreak="newline"></mspace><mi>F</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><msubsup><mi mathvariant="normal">Π</mi><mstyle scriptlevel="1"><mtable rowspacing="0.1em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="1" displaystyle="false"><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr></mtable></mstyle><mi>n</mi></msubsup><mi>n</mi></mrow><annotation encoding="application/x-tex">F(n)=\begin{dcases}
1 &amp; \text{if}\quad n=0,1 \\
n*F(n-1) &amp; \text{if} \quad n&gt;=1
\end{dcases}\\\\
F(n) = \Pi_{\substack{i=1}}^{n}n
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">if</span></span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">if</span></span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0802239999999999em;vertical-align:-0.365832em;"></span><span class="mord"><span class="mord">Π</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-2.453em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.66976em;"><span style="top:-2.71024em;"><span class="pstrut" style="height:2.7em;"></span><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.16976em;"><span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.365832em;"><span></span></span></span></span></span></span><span class="mord mathnormal">n</span></span></span></span></span></p>
]]></content>
      <categories>
        <category>note</category>
      </categories>
      <tags>
        <tag>math</tag>
        <tag>tex</tag>
      </tags>
  </entry>
  <entry>
    <title>单调栈</title>
    <url>/leetcode/monotonousStack/</url>
    <content><![CDATA[<h1 id="question"><a class="markdownIt-Anchor" href="#question"></a> Question</h1>
<p>nums1 中数字 x 的 下一个更大元素 是指 x 在 nums2 中对应位置 右侧 的 第一个 比 x 大的元素。</p>
<p>给你两个 没有重复元素 的数组 nums1 和 nums2 ，下标从 0 开始计数，其中nums1 是 nums2 的子集。</p>
<p>对于每个 0 &lt;= i &lt; nums1.length ，找出满足 nums1[i] == nums2[j] 的下标 j ，并且在 nums2 确定 nums2[j] 的 下一个更大元素 。如果不存在下一个更大元素，那么本次查询的答案是 -1 。</p>
<p>返回一个长度为 nums1.length 的数组 ans 作为答案，满足 ans[i] 是如上所述的 下一个更大元素 。</p>
<p>示例 1：</p>
<p>输入：nums1 = [4,1,2], nums2 = [1,3,4,2].<br />
输出：[-1,3,-1]<br />
解释：nums1 中每个值的下一个更大元素如下所述：</p>
<ul>
<li>4 ，用加粗斜体标识，nums2 = [1,3,4,2]。不存在下一个更大元素，所以答案是 -1 。</li>
<li>1 ，用加粗斜体标识，nums2 = [1,3,4,2]。下一个更大元素是 3 。</li>
<li>2 ，用加粗斜体标识，nums2 = [1,3,4,2]。不存在下一个更大元素，所以答案是 -1 。<br />
示例 2：</li>
</ul>
<p>输入：nums1 = [2,4], nums2 = [1,2,3,4].<br />
输出：[3,-1]<br />
解释：nums1 中每个值的下一个更大元素如下所述：</p>
<ul>
<li>2 ，用加粗斜体标识，nums2 = [1,2,3,4]。下一个更大元素是 3 。</li>
<li>4 ，用加粗斜体标识，nums2 = [1,2,3,4]。不存在下一个更大元素，所以答案是 -1 。</li>
</ul>
<p>提示：</p>
<p>1 &lt;= nums1.length &lt;= nums2.length &lt;= 1000<br />
0 &lt;= nums1[i], nums2[i] &lt;= 104<br />
nums1和nums2中所有整数 互不相同<br />
nums1 中的所有整数同样出现在 nums2 中</p>
<h1 id="单调栈"><a class="markdownIt-Anchor" href="#单调栈"></a> 单调栈</h1>
<p>只要是这类问题，找下一个最小，就可以使用单调栈。</p>
<p>举个栗子</p>
<p><code>list = [1,6,4,2,5]</code></p>
<p>对应每个数的下一个更大元素</p>
<table>
<thead>
<tr>
<th style="text-align:center">list</th>
<th style="text-align:center">1</th>
<th style="text-align:center">6</th>
<th style="text-align:center">4</th>
<th style="text-align:center">2</th>
<th style="text-align:center">5</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">ans</td>
<td style="text-align:center">6</td>
<td style="text-align:center">-1</td>
<td style="text-align:center">5</td>
<td style="text-align:center">5</td>
<td style="text-align:center">-1</td>
</tr>
</tbody>
</table>
<p>单调栈就可以得到ans数组啦。</p>
<p>把<code>list</code>逆序依次放入stack中</p>
<hr />
<p>放5时</p>
<p>stack = []</p>
<p>因为stack为空，所以没有元素比5大，此时ans[4] = -1</p>
<p>再把5入栈</p>
<hr />
<p>放2时</p>
<p>stack = [5]</p>
<p>因为栈顶元素5&gt;2，直接ans[3] = 5</p>
<p>再把2入栈</p>
<hr />
<p>放4时</p>
<p>stack = [5,2]</p>
<p>4&gt;栈顶元素2，让2出栈</p>
<p>此时 stack = [5]</p>
<p>4&lt;栈顶元素5，直接ans[2] = 5</p>
<p>再把4入栈</p>
<hr />
<p>放6时</p>
<p>stack = [5,4]</p>
<p>因为6大于栈顶元素4</p>
<p>4出栈</p>
<p>因为6大于栈顶元素5</p>
<p>5出栈</p>
<p>stack = []</p>
<p>栈空，所以6没有更大的元素，ans[1] = -1</p>
<p>把6压入栈</p>
<p>…</p>
<p>以上就是单调栈的全部了</p>
<h1 id="answer"><a class="markdownIt-Anchor" href="#answer"></a> Answer</h1>
<h2 id="bf"><a class="markdownIt-Anchor" href="#bf"></a> BF</h2>
<p>暴力法</p>
<p>时间复杂度O(n^2)</p>
<p>空间复杂度O(1)</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">nextGreaterElement</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums1<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        vector <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ans<span class="token punctuation">;</span>
        ans<span class="token punctuation">.</span><span class="token function">reserve</span><span class="token punctuation">(</span>nums1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>a<span class="token operator">:</span>nums1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>nums2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>nums2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                        <span class="token keyword">if</span><span class="token punctuation">(</span>nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                            ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token keyword">break</span><span class="token punctuation">;</span>
                        <span class="token punctuation">&#125;</span>
                    <span class="token punctuation">&#125;</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span>nums2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
            

        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="单调栈-2"><a class="markdownIt-Anchor" href="#单调栈-2"></a> 单调栈</h2>
<p>利用hash表事先一次遍历，把num2数组的下一个更大找出来。</p>
<p>然后遍历num1，依次再hash表里查询即可。</p>
<p>时间复杂度O(n+m)，空间复杂度O(m),m是num2的长度，n是num1的长度。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">nextGreaterElement</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums1<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

        stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>s<span class="token punctuation">;</span>
        unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> hash<span class="token punctuation">;</span>
        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>ans<span class="token punctuation">;</span>
        ans<span class="token punctuation">.</span><span class="token function">reserve</span><span class="token punctuation">(</span>nums1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>nums2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">></span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span>s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            hash<span class="token punctuation">[</span>nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span>a<span class="token operator">:</span>nums1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>hash<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="练习"><a class="markdownIt-Anchor" href="#练习"></a> 练习</h1>
<p><a href="https://leetcode.cn/problems/final-prices-with-a-special-discount-in-a-shop/">1475. 商品折扣后的最终价格</a></p>
<p><a href="https://leetcode.cn/problems/next-greater-element-i/">496. 下一个更大元素 I</a></p>
]]></content>
      <categories>
        <category>leetcode</category>
        <category>单调栈</category>
      </categories>
      <tags>
        <tag>单调栈</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客更新</title>
    <url>/log/hexo-log/</url>
    <content><![CDATA[<h2 id="更新动机"><a class="markdownIt-Anchor" href="#更新动机"></a> 更新动机</h2>
<p>一直没找到写作、UI都让我感觉很舒服的主题。</p>
<p>之前的主题很好看，有很多插件，更多的是用来写「笔记」或者「练习题」，因为写作很不方便，而且时不时渲染会出错，每次都要写好久，就有了这次的换主题。</p>
<h2 id="以后安排"><a class="markdownIt-Anchor" href="#以后安排"></a> 以后安排</h2>
<p>之前的hexo主题，会写以后的错题、考试等等。<br />
这个主题会记录数学、分享等等，同时会接着改造。</p>
]]></content>
      <categories>
        <category>log</category>
      </categories>
      <tags>
        <tag>log</tag>
      </tags>
  </entry>
  <entry>
    <title>配置ssh密钥登录</title>
    <url>/log/ssh-config/</url>
    <content><![CDATA[<p>win 下使用xshell等软件连接服务器很便捷，换了Mac之后，感觉terminal就可以完成目前我的全部需求，这种情况下，使用公私钥对登陆，很方便、很有必要！</p>
<h2 id="配置公私钥对"><a class="markdownIt-Anchor" href="#配置公私钥对"></a> 配置公私钥对</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">
<span class="token builtin class-name">cd</span> ~/.ssh

<span class="token comment"># Comment最好填邮箱，这样服务器管理起来比较方便</span>
ssh-keygen <span class="token parameter variable">-t</span> ed25519 <span class="token parameter variable">-C</span> <span class="token string">"Comment"</span>

<span class="token comment"># 把公钥上传到服务器</span>
ssh-copy-id <span class="token parameter variable">-i</span> 公钥文件名 用户名@服务器ip

<span class="token comment"># 把私钥添加到ssh列表中</span>
ssh-add <span class="token parameter variable">-K</span> 私钥文件名
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol>
<li>进入ssh配置文件夹下</li>
<li>生成公私钥对</li>
<li>把公钥上传到服务器</li>
<li>把私钥添加到ssh列表中</li>
</ol>
<h2 id="给服务器起别名"><a class="markdownIt-Anchor" href="#给服务器起别名"></a> 给服务器起别名</h2>
<p>起别名，可以帮助我们更方便的使用ssh、scp等工具。</p>
<p><code>touch ~/.ssh/config</code>创建配置文件。<br />
比如我要给我的路由器起别名<code>openwrt</code>，仅仅需要在<code>~/.ssh/config</code>下填写如下。</p>
<pre class="line-numbers language-config" data-language="config"><code class="language-config">Host openwrt
    HostName openwrt.lan
    User root
    Port 255
    IdentityFIle ~&#x2F;.ssh&#x2F;server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>现在就可以使用<code>ssh openwrt</code>对路由器进行访问啦！</p>
<p>config的配置详情可以去看<code>man ssh_config</code>手册，里面很详细的介绍了config的配置参数等。</p>
<h2 id="change-log"><a class="markdownIt-Anchor" href="#change-log"></a> Change log</h2>
<ul>
<li>2023.09.24 追加如何给服务器起别名</li>
</ul>
]]></content>
      <categories>
        <category>MacBook</category>
        <category>ssh</category>
      </categories>
      <tags>
        <tag>soft</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu一些应用</title>
    <url>/share/install-app/</url>
    <content><![CDATA[<h2 id="背景"><a class="markdownIt-Anchor" href="#背景"></a> 背景</h2>
<p>在公司实习时，用的环境是Linux，之前配置的大多是Linux服务器相关的比较多，忽略了很多应用带来的体验。于是打算写一下自己平时比较喜欢的几个Linux应用，方便以后自己配置环境。</p>
<p>本文使用的环境是wsl2.0下的Ubuntu22.04.</p>
<h2 id="oh-my-zsh"><a class="markdownIt-Anchor" href="#oh-my-zsh"></a> oh-my-zsh</h2>
<p>oh-my-zsh是zsh终端的插件，可以给zsh换主题，加强zsh的体验。<br />
Ubuntu默认是使用的bash，需要先安装zsh。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">zsh</span> <span class="token parameter variable">-y</span>

<span class="token comment">#安装oh-my-zsh</span>
<span class="token function">sh</span> <span class="token parameter variable">-c</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span class="token variable">)</span></span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在安装过程中，你可能需要科学上网，这里我用的是clash lan代理。<br />
比如默认使用的是bash终端。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> ~/.bashrc

<span class="token comment">#在最后一行添加，具体根据clash配置调整</span>
<span class="token assign-left variable">host_ip</span><span class="token operator">=</span><span class="token number">192.168</span>.1.104
<span class="token builtin class-name">export</span> <span class="token assign-left variable">http_proxy</span><span class="token operator">=</span><span class="token string">"http://<span class="token variable">$host_ip</span>:7890"</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">https_proxy</span><span class="token operator">=</span><span class="token string">"http://<span class="token variable">$host_ip</span>:7890"</span>

<span class="token comment">#重写加载终端</span>
<span class="token builtin class-name">source</span> ~/.bashrc
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这样之后再安装zsh等等，也可以给zsh配置中加入这条。</p>
<p>我最喜欢的主题是<code>gentoo</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> ~/.zshrc
<span class="token comment">#把theme换成gentoo</span>
<span class="token assign-left variable">ZSH_THEME</span><span class="token operator">=</span><span class="token string">"gentoo"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><img data-src="https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go@master/img/Pasted%20image%2020230527173150.png" alt="Pasted image 20230527173150" /></p>
<p>简洁美观，还显示git分支。</p>
<h2 id="安装lua"><a class="markdownIt-Anchor" href="#安装lua"></a> 安装lua</h2>
<p>推荐使用lua官网<a href="http://www.lua.org/download.html">Lua: download</a>进行安装，以确保安装的是最新版本。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-R</span> <span class="token parameter variable">-O</span> http://www.lua.org/ftp/lua-5.4.6.tar.gz
<span class="token function">tar</span> zxf lua-5.4.6.tar.gz
<span class="token builtin class-name">cd</span> lua-5.4.6
<span class="token function">make</span> linux <span class="token builtin class-name">test</span>
<span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="安装luarocks"><a class="markdownIt-Anchor" href="#安装luarocks"></a> 安装luarocks</h2>
<p>luarocks是lua一个很好用的第三方包管理工具，推荐官网安装<a href="https://luarocks.org/#quick-start">LuaRocks - The Lua package manager</a>以确保是最新版本。</p>
<p>因为我是自己编译安装的lua，和apt等命令行安装的路径可能不同，这里要知道lua的安装路径是哪里，不然luarocks不能和lua匹配，各种问题接踵而来。<br />
<img data-src="https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go@master/img/Pasted%20image%2020230527174202.png" alt="Pasted image 20230527174202" /><br />
在安装lua时可以看到安装目录。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://luarocks.org/releases/luarocks-3.9.2.tar.gz
<span class="token function">tar</span> zxpf luarocks-3.9.2.tar.gz
<span class="token builtin class-name">cd</span> luarocks-3.9.2

<span class="token comment">#安装需要的第三方软件</span>
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">unzip</span> <span class="token parameter variable">-y</span>
<span class="token comment">#设置为和lua一样的安装路径（在同一级文件夹下）</span>
./configure --with-lua<span class="token operator">=</span>/usr/local --with-lua-include<span class="token operator">=</span>/usr/local/include
<span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以安装penlight库进行一些测试</p>
<pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">vim test<span class="token punctuation">.</span>lua

<span class="token keyword">local</span> class <span class="token operator">=</span> require <span class="token string">"pl.class"</span>
class<span class="token punctuation">.</span><span class="token function">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">function</span> Dog<span class="token punctuation">:</span><span class="token function">_init</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
<span class="token keyword">end</span>

<span class="token keyword">function</span> Dog<span class="token punctuation">:</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"wow,wow,wow, i am "</span> <span class="token operator">..</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
<span class="token keyword">end</span>

<span class="token keyword">local</span> i <span class="token operator">=</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token string">"zhu"</span><span class="token punctuation">)</span>

i<span class="token punctuation">:</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>app</tag>
      </tags>
  </entry>
  <entry>
    <title>c++的四大区</title>
    <url>/CS/cpp/c-five-zone/</url>
    <content><![CDATA[<p>今天开始学习使用c++，之前一直使用python比较多。语言各有千秋，只有最合适。好啦，现在到了使用c++的时候惹。希望我能够喜欢上这个语言。</p>
<p>let’s go!😽</p>
<h2 id="内存四大区"><a class="markdownIt-Anchor" href="#内存四大区"></a> 内存四大区</h2>
<p>编程语言的内存管理，都是类似的，以c++为例，分为以下四大区</p>
<ul>
<li>代码区</li>
<li>全局区</li>
<li>栈区</li>
<li>堆区</li>
</ul>
<p>每个区域都有不同的生命周期，咳咳咳，想要更好的编程，当然要好好学习内存管理。</p>
<p>这块内容像学习心法一样，之修外，而不修内功，会走火入魔，同时不能更好、更快的学习新的东西，对编程语言也了解不够深入。</p>
<h3 id="代码区"><a class="markdownIt-Anchor" href="#代码区"></a> 代码区</h3>
<p>代码区，顾名思义，这是存放代码的地方，但是cpu只认识指令。</p>
<p>编译器在编译代码后，会把代码翻译成二进制指令集合，代码区就是存放这些指令集合的。</p>
<p>所以代码区是不能更改的，代码区公用一份内存空间，为了节省空间啦。比如，代码中很多地方都有用到一个函数，但是这个函数在代码区只有一份。c++很抠门的。</p>
<p>代码区，在程序运行的时候，会优先加载到内存中哟。</p>
<h3 id="全局区"><a class="markdownIt-Anchor" href="#全局区"></a> 全局区</h3>
<p>c++的全局区，不同于一些编程语言，全局区包含常量，静态变量，全局变量等等。十分强大。</p>
<p>全局区的这些东西，同样在编译阶段都会加载完成。</p>
<p>程序运行时，与代码区一同先加载到内存之中。</p>
<ul>
<li>常量，包含字符串常量，数字常量等等</li>
<li>静态变量，在编译时就会运行加载，并且只运行一次，存在全局区。</li>
<li>全局变量，有程序员自己定义的变量，作用在全局区，所有的东西都能访问到它。</li>
</ul>
<h3 id="栈区"><a class="markdownIt-Anchor" href="#栈区"></a> 栈区</h3>
<p>栈区，是编译器的管理的内存，所有的临时变量都会储存在这里，交给编译器管理，十分方便，缺点栈的深度有限，有时候，我们需要使用大量递归，会栈溢出。</p>
<h3 id="堆区"><a class="markdownIt-Anchor" href="#堆区"></a> 堆区</h3>
<p>堆区又程序员手动管理，例如c语言的malloc或者是c++的new，都是在堆区申请的内存，需要手动管理。</p>
<ul>
<li>优点，操作更加灵活方便。给予程序员很高的权限。</li>
<li>缺点，增加了程序员的心智负担，内存往往没有得到很好的控制。</li>
</ul>
]]></content>
      <categories>
        <category>CS</category>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>note</tag>
        <tag>cpp</tag>
      </tags>
  </entry>
  <entry>
    <title>栈、队列和数组</title>
    <url>/CS/dataStruct/stackQueueArray/</url>
    <content><![CDATA[<h1 id="stack"><a class="markdownIt-Anchor" href="#stack"></a> stack</h1>
<h2 id="顺序栈"><a class="markdownIt-Anchor" href="#顺序栈"></a> 顺序栈</h2>
<p>利用数组，进行栈的操作</p>
<p>（待补充</p>
<h2 id="链式栈"><a class="markdownIt-Anchor" href="#链式栈"></a> 链式栈</h2>
<p>利用链表，进行栈的操作，基本不用担心栈溢出。但是需要手动释放结点内存。</p>
<p>这里用进栈用头插法。</p>
<p>（待补充</p>
<h1 id="queue"><a class="markdownIt-Anchor" href="#queue"></a> queue</h1>
<h2 id="顺序队列"><a class="markdownIt-Anchor" href="#顺序队列"></a> 顺序队列</h2>
<p>使用数组实现，有假溢出的情况，空间利用率低。</p>
<h2 id="循环队列"><a class="markdownIt-Anchor" href="#循环队列"></a> 循环队列</h2>
<p>解决了假溢出，空出一个空间判断队列是否已满。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">queue</span><span class="token punctuation">&#123;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>q<span class="token punctuation">,</span>qSize<span class="token punctuation">;</span>
    <span class="token comment">//尾指针，头指针</span>
    <span class="token keyword">int</span> top<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>end<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    
    <span class="token comment">//初始化队列长度</span>
    <span class="token function">queue</span><span class="token punctuation">(</span><span class="token keyword">int</span> qSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token operator">-></span>qSize <span class="token operator">=</span> qSize<span class="token punctuation">;</span>
        q <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>qSize<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">int</span> <span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> q<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            cerr <span class="token operator">&lt;&lt;</span> <span class="token string">"Empty queue"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">int</span> ans <span class="token operator">=</span> q<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>
        top<span class="token operator">=</span> <span class="token punctuation">(</span>top<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>qSize<span class="token punctuation">;</span>
        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isOversize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            cerr <span class="token operator">&lt;&lt;</span> <span class="token string">"Oh! my size is max."</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        q<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
        end <span class="token operator">=</span> <span class="token punctuation">(</span>end<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>qSize<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">bool</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> top<span class="token operator">==</span>end<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//end+1是否等于top</span>
    <span class="token keyword">bool</span> <span class="token function">isOversize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>end<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>qSize<span class="token operator">==</span>top<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    queue <span class="token function">myQueue</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">//5个存储空间最多只能放4个数，所以会overSize提醒</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        myQueue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    cout<span class="token operator">&lt;&lt;</span>myQueue<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    myQueue<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout<span class="token operator">&lt;&lt;</span>myQueue<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    myQueue<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout<span class="token operator">&lt;&lt;</span>myQueue<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    myQueue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">521</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    myQueue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1314</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout<span class="token operator">&lt;&lt;</span>myQueue<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    myQueue<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout<span class="token operator">&lt;&lt;</span>myQueue<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    myQueue<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout<span class="token operator">&lt;&lt;</span>myQueue<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    myQueue<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout<span class="token operator">&lt;&lt;</span>myQueue<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="链队"><a class="markdownIt-Anchor" href="#链队"></a> 链队</h2>
<p>用链表实现队列，不用担心队列长度是否已满。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>


<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">node</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> val<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    node<span class="token operator">*</span> next <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>

    <span class="token function">node</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
    <span class="token function">node</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">val</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">node</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">,</span>node<span class="token operator">*</span> next<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">val</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">next</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">queue</span><span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    node <span class="token operator">*</span> head <span class="token operator">=</span> <span class="token keyword">new</span> node<span class="token punctuation">;</span>
    node<span class="token operator">*</span> front <span class="token operator">=</span> head<span class="token punctuation">;</span>
    node<span class="token operator">*</span> end <span class="token operator">=</span> head<span class="token punctuation">;</span>

    <span class="token function">queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        node <span class="token operator">*</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">node</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        end<span class="token operator">-></span>next <span class="token operator">=</span> temp<span class="token punctuation">;</span>
        end <span class="token operator">=</span> end<span class="token operator">-></span>next<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

	<span class="token comment">//	只需front的next只需下一个的下一个</span>
    <span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            clog<span class="token operator">&lt;&lt;</span><span class="token string">"Empty queue"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        node<span class="token operator">*</span> t <span class="token operator">=</span> front<span class="token operator">-></span>next<span class="token punctuation">;</span>
        front<span class="token operator">-></span>next <span class="token operator">=</span> t<span class="token operator">-></span>next<span class="token punctuation">;</span>
        <span class="token comment">//如果只有一个结点，要把end=front</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">==</span>end<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            end <span class="token operator">=</span> front<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">delete</span> t<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">int</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            clog<span class="token operator">&lt;&lt;</span><span class="token string">"Empty queue"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> front<span class="token operator">-></span>next<span class="token operator">-></span>val<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">bool</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> front<span class="token operator">==</span>end<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        node<span class="token operator">*</span> t <span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>front<span class="token operator">-></span>next<span class="token operator">!=</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            t <span class="token operator">=</span> front<span class="token operator">-></span>next<span class="token punctuation">;</span>
            front<span class="token operator">-></span>next <span class="token operator">=</span> t<span class="token operator">-></span>next<span class="token punctuation">;</span>
            <span class="token keyword">delete</span> t<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        end <span class="token operator">=</span> front<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>



<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    queue me<span class="token punctuation">;</span>
    
    me<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    me<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1213</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    me<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">429</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout<span class="token operator">&lt;&lt;</span>me<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    me<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout<span class="token operator">&lt;&lt;</span>me<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    me<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1213</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    me<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">429</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    me<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1213</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    me<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">429</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    me<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    me<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout<span class="token operator">&lt;&lt;</span>me<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>CS</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串匹配</title>
    <url>/CS/dataStruct/stringAndKMP/</url>
    <content><![CDATA[<h1 id="子串匹配问题"><a class="markdownIt-Anchor" href="#子串匹配问题"></a> 子串匹配问题</h1>
<p>子串匹配又叫模式串匹配</p>
<p>例如 <code>ab</code> 是 <code>sdabc</code>的子串，<code>ab</code>又称为模式串，<code>sdabc</code>又成为主串。</p>
<p>怎么样判断一个字符串是另一个字符串的子串，在文档中的查找、匹配等待都会用到。</p>
<h2 id="bf"><a class="markdownIt-Anchor" href="#bf"></a> BF</h2>
<p>利用滑动窗口，一步一步与主串进行比较，不对，让主串后移一位，重新与模式串进行比较。直到模式串完全匹配</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">bf</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> patten<span class="token punctuation">,</span> <span class="token keyword">const</span> string<span class="token operator">&amp;</span>str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> j<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>patten<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> patten<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>patten<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span>str<span class="token punctuation">[</span>j<span class="token operator">+</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span>patten<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>时间复杂度O(mn)</p>
<h2 id="kmp"><a class="markdownIt-Anchor" href="#kmp"></a> KMP</h2>
<p>可以先看，维基百科中的介绍</p>
<p>这里代码实现主要难在next数组求解上，这里引用一下b站的一张图片，来解释next数组求解第二种情况，有时间可以看一下up的视频。</p>
<p><img data-src="https://s2.loli.net/2022/08/30/oswj4h1KYORkaBr.png" alt="image-20220830170135048" /></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>



<span class="token comment">/*next 中数字的含义
* -1 当前与匹配字符串，不同，需要匹配的主串移动，再与模式串重新比
* other 让j回到 other 处，再与主串进行比对。
* 
*/</span>
vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> pattern<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> next<span class="token punctuation">;</span>
    <span class="token comment">//字符串多长，next数组就多长，</span>
    next<span class="token punctuation">.</span><span class="token function">reserve</span><span class="token punctuation">(</span>pattern<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//因为一个next肯定是-1，所以将j=-1，i=0</span>
    <span class="token comment">//i代表模式串中当前所要计算next的位置</span>
    <span class="token comment">//j代表最大的前缀尾</span>
    <span class="token keyword">int</span> j<span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>i<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    next<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* 
    * 举例说明
    * 当计算next[4]时，如果pattern[3]与next[3]的最大前后缀最后面的下一个字符相同，那么next[4] = next[3]+1
    * 如果不相等，而next[i]含义就是找到以pattern[i-1]结尾的最大前后缀，所以比较pattern中 i与next[j]的值
    * loop
    */</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>pattern<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">||</span>pattern<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>pattern<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            next<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
            i<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
            j <span class="token operator">=</span> next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> next<span class="token punctuation">;</span>


<span class="token punctuation">&#125;</span>

<span class="token comment">//返回result</span>
<span class="token keyword">class</span> <span class="token class-name">result</span><span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">bool</span> res<span class="token punctuation">&#123;</span><span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> index<span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

result <span class="token function">isSubstring</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> pattern<span class="token punctuation">,</span> <span class="token keyword">const</span> string<span class="token operator">&amp;</span> str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    result res<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>pattern<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>=</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> j<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> next <span class="token operator">=</span> <span class="token function">getNext</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>pattern<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            i<span class="token operator">++</span><span class="token punctuation">;</span>
            j<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
            j <span class="token operator">=</span> next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                i<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span>pattern<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            res<span class="token punctuation">.</span>res <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            res<span class="token punctuation">.</span>index <span class="token operator">=</span> i<span class="token operator">-</span>j<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    string pattern <span class="token operator">=</span> <span class="token string">"abaabcaba"</span><span class="token punctuation">;</span>



    string s <span class="token operator">=</span> <span class="token string">"bcabsd"</span><span class="token punctuation">;</span>
    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ans <span class="token operator">=</span> <span class="token function">getNext</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>a<span class="token operator">:</span> ans<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        cout<span class="token operator">&lt;&lt;</span>a<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    result res <span class="token operator">=</span> <span class="token function">isSubstring</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> pattern<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        cout<span class="token operator">&lt;&lt;</span> res<span class="token punctuation">.</span>index<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3>
<ol>
<li>
<p><a href="https://www.bilibili.com/video/BV16X4y137qw">b站next求解</a></p>
</li>
<li>
<p><a href="https://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html">字符串匹配的KMP算法(阮一峰)</a></p>
</li>
<li>
<p><a href="https://zh.m.wikipedia.org/zh-sg/KMP%E7%AE%97%E6%B3%95">KMP维基百科</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>CS</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-八大设计原则（一）</title>
    <url>/CS/dosign_pattern/dosign-pattern-1/</url>
    <content><![CDATA[<p align="center"><img data-src="https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go@master/img/20230423000022.png" height=300px width=300px></p>
<blockquote>
<p>「你所用的面向对象，空有招式，但无内涵」</p>
</blockquote>
<p>只学招式，不学心法，武功瓶颈难以突破，更有甚者潜心修炼，数十年如一日，却不及他人一个月，走火入魔，此举实在是得不偿失。<br />
你是否想如同杨过那样，年纪轻轻就已经成为武林大侠，即使郭靖一样的资质，也可以在短期内，上能九天揽月，下能五洋抓鳖。是的，你妹看错！<br />
<img data-src="https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go@master/img/20230423003635.png" alt="image.png" /></p>
<p><img data-src="https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go@master/img/20230423192658.png" alt="image.png" /></p>
<h2 id="设计模式"><a class="markdownIt-Anchor" href="#设计模式"></a> 设计模式</h2>
<p>只要你学过java、python或者是cpp等任意一门面向对象语言，23种设计模式代码部分都能看懂。代码部分都能理解，直接开始上手干它，不就完了吗？非也非也，小伙子，这些代码只是辅助理解23种设计模式是如何解决日常编程问题的，其中真经要诀不可得也。<br />
所以嘞，在学习设计模式时，我们要关注『 如何使用设计模式八大原则分析问题，解决问题』，而不是用什么设计模式。</p>
<p>如能理解八大原则，坚持数日，大事可成矣。</p>
<h2 id="依赖倒置原则dip"><a class="markdownIt-Anchor" href="#依赖倒置原则dip"></a> 依赖倒置原则（DIP）</h2>
<ol>
<li>高层模块（稳定）不应该依赖于低层模块（变化），二者都应该依赖于抽象</li>
<li>抽象不应该依赖于实现细节（变化），实现细节应该依赖于抽象（稳定）</li>
</ol>
<h2 id="开放封闭原则ocp"><a class="markdownIt-Anchor" href="#开放封闭原则ocp"></a> 开放封闭原则（OCP）</h2>
<ol>
<li>对扩展开放，对更改封闭</li>
<li>类模块应该是可扩展的，但是不可修改的</li>
</ol>
<h2 id="单一职责原则srp"><a class="markdownIt-Anchor" href="#单一职责原则srp"></a> 单一职责原则（SRP）</h2>
<ol>
<li>一个类应该仅有一个引起他变化的原因</li>
<li>变化的方向隐含着类的职责</li>
</ol>
<h2 id="liskov替换原则lsp"><a class="markdownIt-Anchor" href="#liskov替换原则lsp"></a> Liskov替换原则（LSP）</h2>
<ol>
<li>子类必须能够替换它们的基类（IS-A）</li>
<li>继承表达类型抽象</li>
</ol>
<h2 id="接口隔离原则isp"><a class="markdownIt-Anchor" href="#接口隔离原则isp"></a> 接口隔离原则（ISP）</h2>
<ol>
<li>不应该强迫客户程序依赖它们不用的方法</li>
<li>接口应该小而完备</li>
</ol>
<h2 id="优先使用对象组合而不是类继承"><a class="markdownIt-Anchor" href="#优先使用对象组合而不是类继承"></a> 优先使用对象组合，而不是类继承</h2>
<ol>
<li>类继承通常为“白箱复用”，对象组合通常为“黑箱复用”</li>
<li>继承在某种程度上继承了很多基类的函数，破坏了封装性，子类父类的耦合度过高</li>
<li>用对象组合只要求被组合的对象具有良好的接口定义即可</li>
</ol>
<h2 id="封装变化点"><a class="markdownIt-Anchor" href="#封装变化点"></a> 封装变化点</h2>
<ol>
<li>使用封装来创建对象之间的分界点，让设计者可以在分界点的一侧进行修改，而不会对另一侧产生不良影响，实现对象之间的松耦合。</li>
</ol>
<h2 id="针对接口编程不要针对实现编程"><a class="markdownIt-Anchor" href="#针对接口编程不要针对实现编程"></a> 针对接口编程，不要针对实现编程</h2>
<ol>
<li>不将变量类型声明为某个特定的具体类，而声明为某个接口类</li>
<li>客户程序无需知晓对象的具体类型，只需要知道对象所具有的接口即可</li>
<li>减少系统中各部分的依赖关系，从而实现“高内聚、低耦合”的类设计方案</li>
</ol>
<hr />
<p>在以后的分析中，比如代码，要先看违背了哪些原则，再去看哪些变化、哪些稳定，之后利用23种方法，问题便迎刃而解。</p>
]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>cpp</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-23种（二）</title>
    <url>/CS/dosign_pattern/dosign-pattern-2/</url>
    <content><![CDATA[<h1 id="组件协同模式"><a class="markdownIt-Anchor" href="#组件协同模式"></a> 组件协同模式</h1>
<p>现代软件专业分工之后的第一个结果是「框架与应用程序的划分」，「组件协作」模式通过晚期绑定，来实现框架与应用程序之间的松耦合，是二者之间协作时的常用模式。<br />
下面是组件协同模式的三种典型模式。</p>
<h2 id="template-method模板方法"><a class="markdownIt-Anchor" href="#template-method模板方法"></a> Template Method（模板方法）</h2>
<p>模板方法，就像高中老师讲的做题步骤一样，比如高考卷里的圆锥曲线题。</p>
<ol>
<li>先设直线方程</li>
<li>把直线方程代入圆锥曲线</li>
<li>利用求根公式的定理，算出<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>1</mn></msub><mo>∗</mo><msub><mi>x</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">x_{1}+x_{2},x_{1}*x_{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.6597200000000001em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li>
<li>…<br />
很多时候，题目都可以用这样一个通用的模板方法来解决，只需换掉一丢丢的不同，大致步骤都是一样。</li>
</ol>
<p>在代码编程中，模板方法就使用的相当多，通常，子类只需要重写父类给出的「可重写的方法」即可。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//base class</span>
<span class="token keyword">class</span> <span class="token class-name">Library</span><span class="token punctuation">&#123;</span>

<span class="token keyword">public</span><span class="token operator">:</span>

    <span class="token comment">//稳定 template method</span>

    <span class="token keyword">void</span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

        <span class="token function">Step1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">Step2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//支持变化 ==> 虚函数的多态调用</span>

            <span class="token function">Step3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">&#125;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

            <span class="token function">Step4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//支持变化 ==> 虚函数的多态调用</span>

        <span class="token punctuation">&#125;</span>
        <span class="token function">Step5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">&#125;</span>

    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Library</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>

<span class="token keyword">protected</span><span class="token operator">:</span>

    <span class="token keyword">void</span> <span class="token function">Step1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//稳定</span>

        <span class="token comment">//.....</span>

    <span class="token punctuation">&#125;</span>
    <span class="token keyword">void</span> <span class="token function">Step3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//稳定</span>

        <span class="token comment">//.....</span>

    <span class="token punctuation">&#125;</span>
    <span class="token keyword">void</span> <span class="token function">Step5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//稳定</span>

        <span class="token comment">//.....</span>

    <span class="token punctuation">&#125;</span>

    <span class="token keyword">virtual</span> <span class="token keyword">bool</span> <span class="token function">Step2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//变化</span>

    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Step4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//变化</span>

<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这个例子中base类给出了两个纯虚函数，我们可以override这两个函数，做一些符合自己的变化。</p>
<p>在调用的时候只需如下即可。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	Library <span class="token operator">*</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Application</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Application 是Library的子类，并且重写了两个纯虚虚函数</span>
	app<span class="token operator">-></span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>熟悉安卓开发的同学，应该非常熟悉，很多时候，都是重写一个函数，例如生命周期的resume，stop函数等等，系统会自动调用，你重写之后的方法，是不是很神奇嘞，其中的奥秘就是这样捏。</p>
<h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3>
<p><strong>定义：「定义一个操作中的算法的骨架（稳定），而将一些步骤延迟（变化）到子类中。Template Method使得子类可以不改变（复用）一个算法的结构即可重定义（override重写）该算法的某些特定步骤」</strong></p>
<p>下面是它的结构图。<br />
<img data-src="https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go@master/img/20230424215309.png" alt="image.png" /><br />
模板方法是不是很好用，不要你调用我！让我来调用你。</p>
<h2 id="strategy策略模式"><a class="markdownIt-Anchor" href="#strategy策略模式"></a> Strategy（策略模式）</h2>
<p>策略模式特别像模板方法。举个栗子，就能马上明白。</p>
<p>比如应用程序切换语言。<br />
语言可能以后还会添加，可能有些人会这样写程序。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">enum</span> <span class="token class-name">Language</span><span class="token punctuation">&#123;</span>
	ZH_CN<span class="token punctuation">,</span>
	ENGLISH
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	Language cur_set_lang <span class="token operator">=</span> <span class="token function">get_cur_lang</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>cur_set_lang<span class="token operator">==</span>ZH_CN<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">//中文处理</span>
	<span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>cur_set_lang<span class="token operator">==</span>ENGLISH<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">//英文处理</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>试想一下，我们现在要增加另一门语言，比如台湾繁体。在上述代码里，就要在枚举类型中添加，同时还要在main函数中的if判断中增加新的处理。<br />
当项目大起来时，直接修改，往往会令人抓狂。这十分的不优雅。</p>
<p>策略模式，就可以很好的解决这个问题。<br />
可以看出来，每个if中都要对相应的语言做处理，我们可以给它抽象出来。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Language</span><span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
	<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Language</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>天啊，看到这里，相比你已经知道了后续部分了，没错就像模板方法一样。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//中文类cpp文件</span>
<span class="token keyword">class</span> <span class="token class-name">Chinese</span><span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Language</span></span><span class="token punctuation">&#123;</span>
	<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">override</span><span class="token punctuation">&#123;</span>
		<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">//中文处理</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Chinese</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">//相关资源释放</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">//英文类cpp文件</span>
<span class="token keyword">class</span> <span class="token class-name">English</span><span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Language</span></span><span class="token punctuation">&#123;</span>
	<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">override</span><span class="token punctuation">&#123;</span>
		<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">//英文处理</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">English</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">//相关资源释放</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如此这般，添加新语言，只需要创建一个新的class类文件即可，避免了直接在源码上修改。<br />
调用过程也变的简洁明了。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//值得一提的是，一般会与工厂方法一起使用，因为工厂方法还没介绍，先不要啦。</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	Language<span class="token operator">*</span> cur_set_lang <span class="token operator">=</span> <span class="token function">get_cur_lang</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	cur_set_lang<span class="token operator">-></span><span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="总结-2"><a class="markdownIt-Anchor" href="#总结-2"></a> 总结</h3>
<p><strong>定义：「定义一系列算法，把它们一个个封装起来，并且使他们可互相替换（变化）。该模式使得算法可独立于使用它的客户程序（稳定）而变化（扩展，子变化）。」</strong></p>
<p>结构如下<br />
<img data-src="https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go@master/img/20230424225921.png" alt="image.png" /><br />
策略模式，可以很好的解决if else 这种没有止境或者不确定后续是否还会添加其他选项的代码，实在是妙啊。</p>
<h2 id="observe-event观察者模式"><a class="markdownIt-Anchor" href="#observe-event观察者模式"></a> Observe | Event（观察者模式）</h2>
<p>观察者一般都是站在第三方角度上，observe中文有着「观察」的意思，而Event有着「事件」的意思，从字面意思上直观了解，不是那么容易懂。举个例子，当一个程序跑起来了，我们想看一下中间过程中发生的情况，这时我们就可以插入一段「代码（像Log）」可以让我们观察程序中间过程中的执行情况，也可以把这个观察，说成一种事件，「观察程序中间过程」事件。</p>
<p>比如一个分割文件的程序，我们想加一个进度条来显示实时进度，先来看一个简单的例子。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//main.cpp</span>
<span class="token keyword">class</span> <span class="token class-name">MainForm</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Form</span></span>

<span class="token punctuation">&#123;</span>

    TextBox<span class="token operator">*</span> txtFilePath<span class="token punctuation">;</span>

    TextBox<span class="token operator">*</span> txtFileNumber<span class="token punctuation">;</span>

    ProgressBar<span class="token operator">*</span> progressBar<span class="token punctuation">;</span>

  

<span class="token keyword">public</span><span class="token operator">:</span>

    <span class="token keyword">void</span> <span class="token function">Button1_Click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

        string filePath <span class="token operator">=</span> txtFilePath<span class="token operator">-></span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>txtFileNumber<span class="token operator">-></span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        FileSplitter <span class="token function">splitter</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> number<span class="token punctuation">,</span> progressBar<span class="token punctuation">)</span><span class="token punctuation">;</span>
        splitter<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在上面这段代码里，我们像<code>FileSplitter</code>类中传入了一个进度条实例来显示进度。<br />
如果我们的<code>FileSplitter</code>类如下。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//FileSplitter.cpp</span>
<span class="token keyword">class</span> <span class="token class-name">FileSplitter</span>

<span class="token punctuation">&#123;</span>

    string m_filePath<span class="token punctuation">;</span>

    <span class="token keyword">int</span> m_fileNumber<span class="token punctuation">;</span>

    ProgressBar<span class="token operator">*</span> m_progressBar<span class="token punctuation">;</span>

<span class="token keyword">public</span><span class="token operator">:</span>

    <span class="token function">FileSplitter</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> filePath<span class="token punctuation">,</span> <span class="token keyword">int</span> fileNumber<span class="token punctuation">,</span> ProgressBar<span class="token operator">*</span> progressBar<span class="token punctuation">)</span> <span class="token operator">:</span>

        <span class="token function">m_filePath</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">,</span>

        <span class="token function">m_fileNumber</span><span class="token punctuation">(</span>fileNumber<span class="token punctuation">)</span><span class="token punctuation">,</span>

        <span class="token function">m_progressBar</span><span class="token punctuation">(</span>progressBar<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

    <span class="token punctuation">&#125;</span>

    <span class="token keyword">void</span> <span class="token function">split</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>


        <span class="token comment">//1.读取大文件</span>
        <span class="token comment">//2.分批次向小文件中写入</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m_fileNumber<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

            <span class="token comment">//...</span>

            <span class="token keyword">float</span> progressValue <span class="token operator">=</span> m_fileNumber<span class="token punctuation">;</span>

            progressValue <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> progressValue<span class="token punctuation">;</span>

            m_progressBar<span class="token operator">-></span><span class="token function">setValue</span><span class="token punctuation">(</span>progressValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这样写没毛病，让我们试想一下，如果此时我们再加一个进度条，比如在终端上打印进度信息，或者再加几个观察进度程序，如此上面的<code>FileSplitter</code>类将不能满足我们的要求。</p>
<p>『我们有时需要让一个类引起的变化，通知到其他一个或多个类。 』</p>
<p>继续之前的例子，按照我们的要求，当<code>FileSplitter</code>类变化时，其中我们加入的多个进度条类也会发生变化，也就是说<code>FileSplitter</code>类变化会通知其他进度条类。<br />
<img data-src="https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go@master/img/20230425214659.png" alt="image.png" /></p>
<p>这些需要<code>FileSplitter</code>类应该具有一些共同的函数等，可以把这些东西给抽象为一个接口。<br />
例如这样</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">IProgress</span><span class="token punctuation">&#123;</span>

<span class="token keyword">public</span><span class="token operator">:</span>

    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">DoProgress</span><span class="token punctuation">(</span><span class="token keyword">float</span> value<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">IProgress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>此时<code>FileSplitter</code>类就要这样修改了</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">FileSplitter</span>

<span class="token punctuation">&#123;</span>

    string m_filePath<span class="token punctuation">;</span>

    <span class="token keyword">int</span> m_fileNumber<span class="token punctuation">;</span>

    List<span class="token operator">&lt;</span>IProgress<span class="token operator">*</span><span class="token operator">></span>  m_iprogressList<span class="token punctuation">;</span> <span class="token comment">// 抽象通知机制，支持多个观察者</span>

<span class="token keyword">public</span><span class="token operator">:</span>

    <span class="token function">FileSplitter</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> filePath<span class="token punctuation">,</span> <span class="token keyword">int</span> fileNumber<span class="token punctuation">)</span> <span class="token operator">:</span>

        <span class="token function">m_filePath</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">,</span>

        <span class="token function">m_fileNumber</span><span class="token punctuation">(</span>fileNumber<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

    <span class="token punctuation">&#125;</span>


    <span class="token keyword">void</span> <span class="token function">split</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

        <span class="token comment">//1.读取大文件</span>
        <span class="token comment">//2.分批次向小文件中写入</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m_fileNumber<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

            <span class="token comment">//...</span>
            <span class="token keyword">float</span> progressValue <span class="token operator">=</span> m_fileNumber<span class="token punctuation">;</span>

            progressValue <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> progressValue<span class="token punctuation">;</span>

            <span class="token function">onProgress</span><span class="token punctuation">(</span>progressValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//发送通知</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">void</span> <span class="token function">addIProgress</span><span class="token punctuation">(</span>IProgress<span class="token operator">*</span> iprogress<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

        m_iprogressList<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>iprogress<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">&#125;</span>


    <span class="token keyword">void</span> <span class="token function">removeIProgress</span><span class="token punctuation">(</span>IProgress<span class="token operator">*</span> iprogress<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

        m_iprogressList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>iprogress<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>


<span class="token keyword">protected</span><span class="token operator">:</span>

    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">onProgress</span><span class="token punctuation">(</span><span class="token keyword">float</span> value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

        <span class="token keyword">auto</span> itor<span class="token operator">=</span>m_iprogressList<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>itor <span class="token operator">!=</span> m_iprogressList<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>

            <span class="token punctuation">(</span><span class="token operator">*</span>itor<span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">DoProgress</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//更新进度条</span>

            itor<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们用一个<code>vector</code>容器存储需要通知的类，这些需要通知的类，需要继承<code>IProgress</code>接口，并且实现其中的纯虚函数，如此，我们就可以这样很方便的完成需求。<br />
调用如下</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">MainForm</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Form</span><span class="token punctuation">,</span> <span class="token keyword">public</span> <span class="token class-name">IProgress</span></span>

<span class="token punctuation">&#123;</span>

    TextBox<span class="token operator">*</span> txtFilePath<span class="token punctuation">;</span>

    TextBox<span class="token operator">*</span> txtFileNumber<span class="token punctuation">;</span>
    ProgressBar<span class="token operator">*</span> progressBar<span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>

    <span class="token keyword">void</span> <span class="token function">Button1_Click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

        string filePath <span class="token operator">=</span> txtFilePath<span class="token operator">-></span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>txtFileNumber<span class="token operator">-></span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ConsoleNotifier cn<span class="token punctuation">;</span>
        FileSplitter <span class="token function">splitter</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>

        splitter<span class="token punctuation">.</span><span class="token function">addIProgress</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//订阅通知</span>

        splitter<span class="token punctuation">.</span><span class="token function">addIProgress</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cn<span class="token punctuation">)</span>； <span class="token comment">//订阅通知</span>

        splitter<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        splitter<span class="token punctuation">.</span><span class="token function">removeIProgress</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">&#125;</span>

    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">DoProgress</span><span class="token punctuation">(</span><span class="token keyword">float</span> value<span class="token punctuation">)</span><span class="token keyword">override</span><span class="token punctuation">&#123;</span>

        progressBar<span class="token operator">-></span><span class="token function">setValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">ConsoleNotifier</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">IProgress</span></span> <span class="token punctuation">&#123;</span>

<span class="token keyword">public</span><span class="token operator">:</span>

    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">DoProgress</span><span class="token punctuation">(</span><span class="token keyword">float</span> value<span class="token punctuation">)</span><span class="token keyword">override</span><span class="token punctuation">&#123;</span>

        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"."</span><span class="token punctuation">;</span>

    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="总结-3"><a class="markdownIt-Anchor" href="#总结-3"></a> 总结</h3>
<p><strong>定义：「定义对象间的一种一对多（变化）的依赖关系，以便当一个对象（subject）的状态发生改变时，所有依赖于它的对象都得到通知并自动更新。」</strong></p>
<p>结构如下<br />
<img data-src="https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go@master/img/20230425215654.png" alt="image.png" /></p>
<p>是不是有种学到啦的感觉，观察者模式，可以让一个类通知许多类的改变，仅仅把这些的共同地方抽象出来，就可以让 代码变的健壮起来。</p>
<hr />
<h1 id="单一职责模式"><a class="markdownIt-Anchor" href="#单一职责模式"></a> 单一职责模式</h1>
<p>在软件组件的设计中，如果责任划分的不清晰，使用继承得到的结果往往是随着需求的变化，子类急剧膨胀，同时充斥着重复代码，这时候的关键是<strong>划清责任</strong>。</p>
<p>下面介绍两种经典的单一职责模式可以很快帮助我们理解。</p>
<h2 id="decorator装饰器模式"><a class="markdownIt-Anchor" href="#decorator装饰器模式"></a> Decorator（装饰器模式）</h2>
<p>比如我们要做一个基于TCP的文件传输的小工具，IO方面，我们肯定需要处理文件流、网络流，甚至可能需要对这些流进行加密，或者对流进行缓存。</p>
<p>那么如果我们这些写，先抽象一个<code>Stream</code>的抽象类，包含<code>read(),seek(),write()</code> 三种方法。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Stream</span><span class="token punctuation">&#123;</span>
<span class="token keyword">public</span>：
    <span class="token keyword">virtual</span> <span class="token keyword">char</span> <span class="token function">Read</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Seek</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Write</span><span class="token punctuation">(</span><span class="token keyword">char</span> data<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>很容易就会想到文件流、网络流继承<code>Stream</code>。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">FileStream</span><span class="token punctuation">&#123;</span>
<span class="token keyword">public</span>：
    <span class="token keyword">virtual</span> <span class="token keyword">char</span> <span class="token function">Read</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Seek</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Write</span><span class="token punctuation">(</span><span class="token keyword">char</span> data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">NetworkStream</span><span class="token punctuation">&#123;</span>
<span class="token keyword">public</span>：
    <span class="token keyword">virtual</span> <span class="token keyword">char</span> <span class="token function">Read</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Seek</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Write</span><span class="token punctuation">(</span><span class="token keyword">char</span> data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>假设现在我们需要加密流和缓存流，新手一般会这样写。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">CryptoFileStream</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">FileStream</span></span><span class="token punctuation">&#123;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">virtual</span> <span class="token keyword">char</span> <span class="token function">Read</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token comment">//额外的加密操作...</span>
        <span class="token class-name">FileStream</span><span class="token double-colon punctuation">::</span><span class="token function">Read</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读文件流</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Seek</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token comment">//额外的加密操作...</span>
        <span class="token class-name">FileStream</span><span class="token double-colon punctuation">::</span><span class="token function">Seek</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//定位文件流</span>
        <span class="token comment">//额外的加密操作...</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Write</span><span class="token punctuation">(</span>byte data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token comment">//额外的加密操作...</span>
        <span class="token class-name">FileStream</span><span class="token double-colon punctuation">::</span><span class="token function">Write</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//写文件流</span>
        <span class="token comment">//额外的加密操作...</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">CryptoNetworkStream</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token operator">:</span><span class="token keyword">public</span> <span class="token class-name">NetworkStream</span></span><span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">virtual</span> <span class="token keyword">char</span> <span class="token function">Read</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token comment">//额外的加密操作...</span>
        <span class="token class-name">NetworkStream</span><span class="token double-colon punctuation">::</span><span class="token function">Read</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读网络流</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Seek</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token comment">//额外的加密操作...</span>
        <span class="token class-name">NetworkStream</span><span class="token double-colon punctuation">::</span><span class="token function">Seek</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//定位网络流</span>
        <span class="token comment">//额外的加密操作...</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Write</span><span class="token punctuation">(</span>byte data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token comment">//额外的加密操作...</span>
        <span class="token class-name">NetworkStream</span><span class="token double-colon punctuation">::</span><span class="token function">Write</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//写网络流</span>
        <span class="token comment">//额外的加密操作...</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">//-------------------</span>
<span class="token comment">//缓存流</span>
<span class="token keyword">class</span> <span class="token class-name">BufferFileStream</span><span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">FileStream</span></span><span class="token punctuation">&#123;</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">BufferNetworkStream</span><span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">FileStream</span></span><span class="token punctuation">&#123;</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>现在，回头看一下代码，很明显，每当我们去添加一个扩展功能类，比如反转流，这样就要再继承 <code>FileStream、NetworkStream</code>写两个类，或者当我们去添加一个流，比如内存流，这样就要继承内存流去写很多扩展类。</p>
<p>假设，<code>FileStream、NetworkStream</code>这样的类有<strong>N</strong>个，加密流这样的扩展有<strong>M</strong>个，那么一共要写<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>+</mo><mi>N</mi><mo>+</mo><mi>N</mi><mo>∗</mo><mi>M</mi></mrow><annotation encoding="application/x-tex">1+N+N*M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span>个。<br />
<img data-src="https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go@master/img/Pasted%20image%2020230427013929.png" alt="Pasted image 20230427013929" /><br />
不难发现，在扩展类中，实现的东西都相同，很容易联系到多态。那么扩展类就可以写成下面这样，比如<code>CryptoStream</code>类。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">CryptoStream</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Stream</span></span><span class="token punctuation">&#123;</span>
Stream<span class="token operator">*</span> stream<span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
	<span class="token function">CryptoStream</span><span class="token punctuation">(</span>Stream<span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">stream</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>	
	<span class="token punctuation">&#125;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">char</span> <span class="token function">Read</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token comment">//额外的加密操作...</span>
        stream<span class="token operator">-></span><span class="token function">Read</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读文件流</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Seek</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token comment">//额外的加密操作...</span>
        stream<span class="token operator">-></span><span class="token function">Seek</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//定位文件流</span>
        <span class="token comment">//额外的加密操作...</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Write</span><span class="token punctuation">(</span>byte data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token comment">//额外的加密操作...</span>
        stream<span class="token operator">-></span><span class="token function">Write</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//写文件流</span>
        <span class="token comment">//额外的加密操作...</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如此我们就可以省下很多重复的代码，只需要<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>+</mo><mi>N</mi><mo>+</mo><mi>M</mi></mrow><annotation encoding="application/x-tex">1+N+M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span>，非常nice。但是当我写出<code>BufferStream</code>类时，你会发现这其中又可以提出来共同的成员。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">BufferStream</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Stream</span></span><span class="token punctuation">&#123;</span>
Stream<span class="token operator">*</span> stream<span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
	<span class="token function">BufferStream</span><span class="token punctuation">(</span>Stream<span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">stream</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>	
	<span class="token punctuation">&#125;</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到<code>stream</code>这个成员变量重复了，可以把这个给抽出来，单独写成一个类。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">DecoratorStream<span class="token operator">:</span> <span class="token keyword">public</span> Stream<span class="token punctuation">&#123;</span>
<span class="token keyword">protected</span><span class="token operator">:</span>
    Stream<span class="token operator">*</span> stream<span class="token punctuation">;</span><span class="token comment">//...</span>
    <span class="token function">DecoratorStream</span><span class="token punctuation">(</span>Stream <span class="token operator">*</span> stm<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">stream</span><span class="token punctuation">(</span>stm<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这样在以后写扩展类时，继承这个<code>DecoratorStream</code>，既可以清楚意图，又减少了代码的重复。<br />
例如<code>BufferStream</code>类就可以写成下面这样。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">BufferStream</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">DecoratorStream</span></span><span class="token punctuation">&#123;</span>

<span class="token keyword">public</span><span class="token operator">:</span>

    <span class="token function">BufferStream</span><span class="token punctuation">(</span>Stream<span class="token operator">*</span> stm<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">DecoratorStream</span><span class="token punctuation">(</span>stm<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

    <span class="token punctuation">&#125;</span>

    <span class="token comment">//...</span>

<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>调用程序如下</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">Process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token comment">//运行时装配</span>
    FileStream<span class="token operator">*</span> s1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">FileStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    CryptoStream<span class="token operator">*</span> s2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">CryptoStream</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    BufferStream<span class="token operator">*</span> s3<span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">BufferedStream</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    BufferStream<span class="token operator">*</span> s4<span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">BufferedStream</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="总结-4"><a class="markdownIt-Anchor" href="#总结-4"></a> 总结</h3>
<p>定义：动态（组合）地给一个对象增加一些额外的职责。就增加功能而言，Decorator模式比生成子类（继承）更为灵活（消除重复代码&amp;减少子类个数）</p>
<p>结构如下<br />
<img data-src="https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go@master/img/Pasted%20image%2020230428012216.png" alt="Pasted image 20230428012216" /><br />
<strong>仔细想想，其实CryptoFileStream继承FileStream是不合理的，因为前者仅仅是后者的一个扩展，并没有is a的关系，也不朝着同一个方向变化。</strong></p>
<h2 id="bridge桥模式"><a class="markdownIt-Anchor" href="#bridge桥模式"></a> Bridge（桥模式）</h2>
<p>桥模式与装饰器模式十分相似，都是为了解决继承使得类数量爆炸增长的问题。</p>
<p>举个例子，现在要开发一个即时通讯软件，新手一般会先抽象一个类。<br />
比如</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Messager</span><span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Login</span><span class="token punctuation">(</span>string username<span class="token punctuation">,</span> string password<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">SendMessage</span><span class="token punctuation">(</span>string message<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">SendPicture</span><span class="token punctuation">(</span>Image image<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">PlaySound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">DrawShape</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">WriteText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Messager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这很不错，PC和mobile端继承Messager，后续再继承pc类开发pc上的不同版本，例如lite，prefect版本等等。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">PCMessagerBase</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Messager</span></span><span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">PlaySound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token comment">//**********</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">DrawShape</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token comment">//*********</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">WriteText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token comment">//**********</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token comment">//**********</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">MobileMessagerBase</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Messager</span></span><span class="token punctuation">&#123;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>接着写一下PC端的版本。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">PCMessagerLite</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">PCMessagerBase</span></span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Login</span><span class="token punctuation">(</span>string username<span class="token punctuation">,</span> string password<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">PCMessagerBase</span><span class="token double-colon punctuation">::</span><span class="token function">Connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//........</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">SendMessage</span><span class="token punctuation">(</span>string message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">PCMessagerBase</span><span class="token double-colon punctuation">::</span><span class="token function">WriteText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//........</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">SendPicture</span><span class="token punctuation">(</span>Image image<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">PCMessagerBase</span><span class="token double-colon punctuation">::</span><span class="token function">DrawShape</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//........</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

  
  
  

<span class="token keyword">class</span> <span class="token class-name">PCMessagerPerfect</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">PCMessagerBase</span></span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Login</span><span class="token punctuation">(</span>string username<span class="token punctuation">,</span> string password<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">PCMessagerBase</span><span class="token double-colon punctuation">::</span><span class="token function">PlaySound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//********</span>
        <span class="token class-name">PCMessagerBase</span><span class="token double-colon punctuation">::</span><span class="token function">Connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//........</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">SendMessage</span><span class="token punctuation">(</span>string message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">PCMessagerBase</span><span class="token double-colon punctuation">::</span><span class="token function">PlaySound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//********</span>
        <span class="token class-name">PCMessagerBase</span><span class="token double-colon punctuation">::</span><span class="token function">WriteText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//........</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">SendPicture</span><span class="token punctuation">(</span>Image image<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">PCMessagerBase</span><span class="token double-colon punctuation">::</span><span class="token function">PlaySound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//********</span>
        <span class="token class-name">PCMessagerBase</span><span class="token double-colon punctuation">::</span><span class="token function">DrawShape</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//........</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这仅仅是PC端的，如果算上mobile端，又要加上两个业务类，加一个Linux平台，可能就要一个Linux base类，和两个业务类。<br />
假如有N个平台，M个版本 ，那么总共就要写<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>+</mo><mi>N</mi><mo>+</mo><mi>N</mi><mo>∗</mo><mi>M</mi></mrow><annotation encoding="application/x-tex">1+N+N*M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span>个类，想想就十分可怕。</p>
<p>学习过上一节，很自然就会想「能不能使用多态来代替这个继承」。</p>
<p>首先我们先把<code>Messager</code>类分开，因为pc base类与mobile base类，仅仅实现了基础的部分，并没有实现login这些功能。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Messager</span><span class="token punctuation">&#123;</span>
<span class="token keyword">protected</span><span class="token operator">:</span>
     MessagerImp<span class="token operator">*</span> messagerImp<span class="token punctuation">;</span><span class="token comment">//...</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Login</span><span class="token punctuation">(</span>string username<span class="token punctuation">,</span> string password<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">SendMessage</span><span class="token punctuation">(</span>string message<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">SendPicture</span><span class="token punctuation">(</span>Image image<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Messager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

  
<span class="token keyword">class</span> <span class="token class-name">MessagerImp</span><span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">PlaySound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">DrawShape</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">WriteText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">virtual</span> <span class="token function">MessagerImp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>下面只需让pc base类与mobile base类去实现MessagerImp接口，而业务类继承<code>Messager</code>类。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">PCMessagerImp</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">MessagerImp</span></span><span class="token punctuation">&#123;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">PlaySound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token comment">//**********</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">DrawShape</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token comment">//**********</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">WriteText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token comment">//**********</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token comment">//**********</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>


<span class="token keyword">class</span> <span class="token class-name">MobileMessagerImp</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">MessagerImp</span></span><span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">MessagerLite</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Messager</span></span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Login</span><span class="token punctuation">(</span>string username<span class="token punctuation">,</span> string password<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        messagerImp<span class="token operator">-></span><span class="token function">Connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//........</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">SendMessage</span><span class="token punctuation">(</span>string message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        messagerImp<span class="token operator">-></span><span class="token function">WriteText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//........</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">SendPicture</span><span class="token punctuation">(</span>Image image<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        messagerImp<span class="token operator">-></span><span class="token function">DrawShape</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//........</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">MessagerPerfect</span>  <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Messager</span> 
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Login</span><span class="token punctuation">(</span><span class="token class-name">string</span> <span class="token class-name">username</span><span class="token punctuation">,</span> <span class="token class-name">string</span> <span class="token class-name">password</span><span class="token punctuation">)</span></span><span class="token punctuation">&#123;</span>
        messagerImp<span class="token operator">-></span><span class="token function">PlaySound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//********</span>
        messagerImp<span class="token operator">-></span><span class="token function">Connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//........</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">SendMessage</span><span class="token punctuation">(</span>string message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        messagerImp<span class="token operator">-></span><span class="token function">PlaySound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//********</span>
        messagerImp<span class="token operator">-></span><span class="token function">WriteText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//........</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">SendPicture</span><span class="token punctuation">(</span>Image image<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        messagerImp<span class="token operator">-></span><span class="token function">PlaySound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//********</span>
        messagerImp<span class="token operator">-></span><span class="token function">DrawShape</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//........</span>

    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这样类的数量就缩短到了<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>+</mo><mi>N</mi><mo>+</mo><mi>M</mi></mrow><annotation encoding="application/x-tex">1+N+M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span>.<br />
调用主程序，可以写成如下格式。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">PCMessagerImp <span class="token operator">*</span> pc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">PCMessagerImp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Messager<span class="token operator">*</span> mp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">MessagerPerfect</span><span class="token punctuation">(</span>pc<span class="token punctuation">)</span><span class="token punctuation">;</span>
Messager<span class="token operator">*</span> ml <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">MessagerLite</span><span class="token punctuation">(</span>pc<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="总结-5"><a class="markdownIt-Anchor" href="#总结-5"></a> 总结</h3>
<p><strong>定义：将抽象部分（业务功能）与实现部分（平台实现）分离，使它们都可以独立地变化。</strong></p>
<p>结构如下<br />
<img data-src="https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go@master/img/Pasted%20image%2020230428224539.png" alt="Pasted image 20230428224539" /><br />
桥模式与装饰器模式，都有异曲同工之妙，都是将继承换为多态，总而避免了类数量的急剧增长。</p>
<hr />
<h1 id="对象创建模式"><a class="markdownIt-Anchor" href="#对象创建模式"></a> 对象创建模式</h1>
<p>通过“对象创建” 模式绕开new，来避免对象创建（new）过程中所导致的紧耦合（依赖具体类），从而支持对象创建的稳定。它是接口抽象之后的第一步工作。</p>
<p>简单来说，就是让这个类文件中new的对象，像virtual函数那样，晚绑定。<br />
也就是依赖倒置原则，不依赖与实现，应该依赖与抽象。</p>
<p>如果一个类文件中，有一处实现，那么可能在以后的过程中，就要去改这个类文件。</p>
]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>cpp</tag>
      </tags>
  </entry>
  <entry>
    <title>科学上网&amp;基本的网络服务器&amp;内网穿透</title>
    <url>/CS/linux/CustomServerInit/</url>
    <content><![CDATA[<h1 id="科学上网vpn的搭建"><a class="markdownIt-Anchor" href="#科学上网vpn的搭建"></a> 科学上网VPN的搭建</h1>
<p>v2一键脚本</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#首先用firewall-cmd开v2的端口</span>
firewall-cmd <span class="token parameter variable">--permanent</span> <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --add-port<span class="token operator">=</span>v2端口/tcp

<span class="token comment">#安装curl</span>
<span class="token function">sudo</span> <span class="token function">apt</span> update
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">curl</span> <span class="token parameter variable">-y</span>

<span class="token comment">#以下脚本二选一</span>
<span class="token function">bash</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token function">curl</span> <span class="token parameter variable">-Ls</span> https://raw.githubusercontent.com/vaxilu/x-ui/master/install.sh<span class="token punctuation">)</span>  <span class="token comment">#带面板，要多开个面板端口，ip+端口访问面板，进行v2设置。</span>

<span class="token function">bash</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token function">curl</span> <span class="token parameter variable">-s</span> <span class="token parameter variable">-L</span> https://git.io/v2ray.sh<span class="token punctuation">)</span><span class="token comment">#不带面板，省端口</span>


<span class="token comment">#加速器的安装</span>

<span class="token function">wget</span> --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh <span class="token operator">&amp;&amp;</span> <span class="token function">chmod</span> +x bbr.sh <span class="token operator">&amp;&amp;</span> ./bbr.sh

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="基本服务器的安装"><a class="markdownIt-Anchor" href="#基本服务器的安装"></a> 基本服务器的安装</h1>
<h2 id="samba服务器跨系统平台传输文件"><a class="markdownIt-Anchor" href="#samba服务器跨系统平台传输文件"></a> samba服务器（跨系统平台传输文件）</h2>
<p>家里的per电脑可以用来做nas。贼方便。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> upgrade 
<span class="token function">sudo</span> <span class="token function">apt-get</span> update 

<span class="token comment">#安装samba服务器</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> samba samba-common

<span class="token comment">#创建共享目录</span>
<span class="token function">sudo</span> <span class="token function">mkdir</span> /home/zhujiyuan

<span class="token function">sudo</span> <span class="token function">chmod</span> <span class="token number">777</span> /home/zhujiyuan

<span class="token comment">#添加samba用户（注意必须是linux下已经有的用户）</span>

<span class="token function">sudo</span> smbpasswd <span class="token parameter variable">-a</span> zhujiyuan

<span class="token comment">#配置smb文件</span>

<span class="token function">sudo</span> <span class="token function">vim</span> /etc/samba/smb.conf

<span class="token comment">#在文件最后面加上如下,这里可以自定义参考samba的文档</span>
<span class="token punctuation">[</span>share<span class="token punctuation">]</span>
comment <span class="token operator">=</span> share folder
browseable <span class="token operator">=</span> <span class="token function">yes</span>
path <span class="token operator">=</span> /home/zhujiyuan
create mask <span class="token operator">=</span> 0700
directory mask <span class="token operator">=</span> 0700
valid <span class="token function">users</span> <span class="token operator">=</span> linuxidc
force user <span class="token operator">=</span> linuxidc
force group <span class="token operator">=</span> linuxidc
public <span class="token operator">=</span> <span class="token function">yes</span>
available <span class="token operator">=</span> <span class="token function">yes</span>
writable <span class="token operator">=</span> <span class="token function">yes</span>

<span class="token comment">#把samba添加进防火墙白名单</span>
firewall-cmd --add-service<span class="token operator">=</span>samba <span class="token parameter variable">--permanent</span>

<span class="token comment">#重启samba服务器</span>
systemctl restart smbd

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img data-src="https://cdn.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/image-20220105225934309.png" alt="image-20220105225934309" /></p>
<h3 id="注意"><a class="markdownIt-Anchor" href="#注意"></a> 注意</h3>
<ul>
<li>windows下要先在设置中开启smb服务，才能访问</li>
<li>win+R键，输入\\ip即可。</li>
</ul>
<h2 id="apache服务器搭建网站的"><a class="markdownIt-Anchor" href="#apache服务器搭建网站的"></a> apache服务器(搭建网站的)</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update <span class="token operator">&amp;</span> <span class="token function">apt</span> <span class="token function">install</span> apache2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="内网穿透"><a class="markdownIt-Anchor" href="#内网穿透"></a> 内网穿透</h2>
<p>内网穿透是用来让家里的电脑，通过其他措施，使得其他设备可以通过公网找到它。</p>
<p>一般家里的网都是经过好几次NAT，使用frp这个开源的软件，可以帮助我们内网穿透。</p>
<h3 id="内网穿透流程"><a class="markdownIt-Anchor" href="#内网穿透流程"></a> 内网穿透流程</h3>
<p>通过服务器对局域网的设备进行端口映射。</p>
<h3 id="搭建步骤"><a class="markdownIt-Anchor" href="#搭建步骤"></a> 搭建步骤</h3>
<h4 id="一-搭建内网穿透服务器"><a class="markdownIt-Anchor" href="#一-搭建内网穿透服务器"></a> 一、搭建内网穿透服务器</h4>
<p>需要用一个有公网ip的服务器。</p>
<p>去github上下载合适的frp的软件包</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> <span class="token parameter variable">-xzvf</span> 软件包
<span class="token builtin class-name">cd</span> 软件包

<span class="token comment">#配置服务端文件</span>
<span class="token function">vim</span> frps.ini

<span class="token comment">#具体可参考官方文档</span>
<span class="token punctuation">[</span>common<span class="token punctuation">]</span>
 bind_port <span class="token operator">=</span> <span class="token number">7000</span> 
 authentication_method <span class="token operator">=</span> token
 token <span class="token operator">=</span> <span class="token comment">#连接密码</span>
 dashboard_port <span class="token operator">=</span> <span class="token number">7500</span>
<span class="token comment"># dashboard 用户名密码，可选，默认为空,这里是web配置</span>
 dashboard_user <span class="token operator">=</span> admin
 dashboard_pwd <span class="token operator">=</span> admin
 
 <span class="token comment">#启动服务</span>
 
 <span class="token function">sudo</span> ./frps <span class="token parameter variable">-c</span> ./frps.ini<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="二-配置客户端"><a class="markdownIt-Anchor" href="#二-配置客户端"></a> 二、配置客户端</h4>
<pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token comment">#这里我使用的win10，linux等操作系统大同小异</span>

<span class="token comment">#打开frpc.ini配置</span>
<span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">common</span><span class="token punctuation">]</span></span>
<span class="token key attr-name">server_addr</span> <span class="token punctuation">=</span> <span class="token value attr-value">服务器ip</span>
<span class="token key attr-name">server_port</span> <span class="token punctuation">=</span> <span class="token value attr-value">7000</span>
<span class="token key attr-name">token</span> <span class="token punctuation">=</span> <span class="token value attr-value">#密码，与服务端相同</span>

<span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">ssh</span><span class="token punctuation">]</span></span>
<span class="token key attr-name">type</span> <span class="token punctuation">=</span> <span class="token value attr-value">tcp</span>
<span class="token key attr-name">local_ip</span> <span class="token punctuation">=</span> <span class="token value attr-value">127.0.0.1</span>
<span class="token key attr-name">local_port</span> <span class="token punctuation">=</span> <span class="token value attr-value">22</span>
<span class="token key attr-name">remote_port</span> <span class="token punctuation">=</span> <span class="token value attr-value">7001</span>

<span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">web</span><span class="token punctuation">]</span></span>
<span class="token key attr-name">type</span> <span class="token punctuation">=</span> <span class="token value attr-value">tcp</span>
<span class="token key attr-name">local_ip</span> <span class="token punctuation">=</span> <span class="token value attr-value">127.0.0.1</span>
<span class="token key attr-name">local_port</span> <span class="token punctuation">=</span> <span class="token value attr-value">80</span>
<span class="token key attr-name">remote_port</span> <span class="token punctuation">=</span> <span class="token value attr-value">7002</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>cmd下，frp！启动！。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./frpc <span class="token parameter variable">-c</span> ./frpc.ini<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>用ipad随时随地通过服务器ip远程连接家里的电脑</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/image-20220105230626923.png" alt="image-20220105230626923" /></p>
<h3 id="三-安装nssm自启管理服务设置开机自启"><a class="markdownIt-Anchor" href="#三-安装nssm自启管理服务设置开机自启"></a> 三、安装nssm自启管理服务&amp;&amp;设置开机自启</h3>
<p>nssm是一款古老的window后台服务管理软件，偶然一次在chat-gpt上得知，使用上的体验超乎我的想象，居然还挺好用，只需要命令行操作就行。</p>
<p><a href="https://nssm.cc/download">官网下载nssm</a></p>
<p>在管理员权限下</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nssm <span class="token function">install</span> frpc <span class="token string">"路径<span class="token entity" title="\f">\f</span>rpc.exe"</span> <span class="token string">"-c 路径<span class="token entity" title="\f">\f</span>rpc.ini"</span>
nssm start frpc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>未完结，先撒花。</p>
]]></content>
      <categories>
        <category>CS</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux中的service</title>
    <url>/CS/linux/WritingService/</url>
    <content><![CDATA[<h2 id="服务编写"><a class="markdownIt-Anchor" href="#服务编写"></a> 服务编写</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /lib/systemd/system/服务名.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-ini" data-language="ini"><code class="language-ini">
<span class="token comment">#例如frp的服务端</span>

<span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">Unit</span><span class="token punctuation">]</span></span>
<span class="token key attr-name">Description</span><span class="token punctuation">=</span><span class="token value attr-value">fraps service</span>
<span class="token key attr-name">After</span><span class="token punctuation">=</span><span class="token value attr-value">network.target syslog.target</span>
<span class="token key attr-name">Wants</span><span class="token punctuation">=</span><span class="token value attr-value">network.target</span>

<span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">Service</span><span class="token punctuation">]</span></span>
<span class="token key attr-name">Type</span><span class="token punctuation">=</span><span class="token value attr-value">simple</span>
<span class="token key attr-name">ExecStart</span><span class="token punctuation">=</span><span class="token value attr-value">/root/frp/frps -c /root/frp/frps.ini  #此处安实际情况修改</span>

<span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">Install</span><span class="token punctuation">]</span></span>
<span class="token key attr-name">WantedBy</span><span class="token punctuation">=</span><span class="token value attr-value">multi-user.target</span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token comment">#客户端运行服务创建：vi /lib/systemd/system/frpc.service</span>

<span class="token comment">#qq机器人的服务</span>
<span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">Unit</span><span class="token punctuation">]</span></span>
<span class="token key attr-name">Description</span><span class="token punctuation">=</span><span class="token value attr-value">qqbot</span>

<span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">Service</span><span class="token punctuation">]</span></span>
<span class="token key attr-name">Type</span><span class="token punctuation">=</span><span class="token value attr-value">simple</span>
<span class="token key attr-name">ExecStart</span><span class="token punctuation">=</span><span class="token value attr-value">/root/push_qq/go-cqhttp</span>

<span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">Install</span><span class="token punctuation">]</span></span>
<span class="token key attr-name">WantedBy</span><span class="token punctuation">=</span><span class="token value attr-value">multi-user.target</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="设置开机自启"><a class="markdownIt-Anchor" href="#设置开机自启"></a> 设置开机自启</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl <span class="token builtin class-name">enable</span> frp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>CS</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>note</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux服务器初始化（个人自用）</title>
    <url>/CS/linux/linux_init/</url>
    <content><![CDATA[<h1 id="重置root密码"><a class="markdownIt-Anchor" href="#重置root密码"></a> 重置root密码</h1>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">passwd</span> root

<span class="token comment">#为了以后省去sudo输入密码。</span>
<span class="token function">sudo</span> visudo
<span class="token comment">#在文件最后加上</span>
用户名 <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span> NOPASSWD: ALL

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="安装vim并设置主编辑器"><a class="markdownIt-Anchor" href="#安装vim并设置主编辑器"></a> 安装vim并设置主编辑器</h1>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> <span class="token function">install</span> <span class="token function">vim</span> <span class="token parameter variable">-y</span>
select-editor<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><img data-src="https://cdn.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/image-20220421130919271.png" alt="image-20220421130919271" /></p>
<h2 id="给vi起别名"><a class="markdownIt-Anchor" href="#给vi起别名"></a> 给vi起别名</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"alias vi=vim"</span> <span class="token operator">>></span> /etc/profile
<span class="token builtin class-name">source</span> /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h1 id="修改apt的源"><a class="markdownIt-Anchor" href="#修改apt的源"></a> 修改apt的源</h1>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#先安装vim</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">vim</span> <span class="token parameter variable">-y</span>
<span class="token comment">#好习惯，先备份原来的</span>
<span class="token function">cp</span> /etc/apt/sources.list /etc/apt/sources.list.bak
<span class="token function">sudo</span> <span class="token function">vim</span> /etc/apt/sources.list

<span class="token comment">#把内容改成</span>
 deb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse
 deb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse
 deb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse
 deb-src http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse
 deb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse
 deb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse
 deb http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse
 deb-src http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse
 deb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse
 deb-src http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>更新软件列表</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update <span class="token operator">&amp;</span> <span class="token function">apt</span> upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h1 id="安装python"><a class="markdownIt-Anchor" href="#安装python"></a> 安装python</h1>
<p>其实这里主要是因为python的一些版本问题。如果没有问题，可跳过</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> python3
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> python3-pip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h1 id="安装ssh-xrdp-firewalld"><a class="markdownIt-Anchor" href="#安装ssh-xrdp-firewalld"></a> 安装ssh &amp; xrdp &amp; firewalld</h1>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">ssh</span>

<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> xrdp

<span class="token function">sudo</span> systemctl status xrdp
<span class="token function">sudo</span> adduser xrdp ssl-cert  
<span class="token function">sudo</span> systemctl restart xrdp

<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>CS</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>note</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>pyinstaller打包exe</title>
    <url>/CS/python/pyinstallerPacketExe/</url>
    <content><![CDATA[<h1 id="pyinstaller打包exe"><a class="markdownIt-Anchor" href="#pyinstaller打包exe"></a> pyinstaller打包exe</h1>
<p>python是一门解释性语言，所以当代码运行时，需要python.exe等解释器一句一句的对代码进行翻译（运行）。</p>
<p>（本篇重在阐述pyinstaller打包为什么会这么大，精简打包压缩流程）</p>
<h1 id="pyinstaller工具"><a class="markdownIt-Anchor" href="#pyinstaller工具"></a> pyinstaller工具</h1>
<p>pyinstaller可以很轻松把py程序打包成exe文件，还可以加ico图标。</p>
<h2 id="本质"><a class="markdownIt-Anchor" href="#本质"></a> 本质</h2>
<p>因为python终究是一门解释语言，依赖解释器环境，pyinstaller，其实打包的是一个可以运行脚本的环境（env）。这里包含python.exe这个脚本解释器，因此生成的exe文件一般都很大10m以上。</p>
<h2 id="我的痛点"><a class="markdownIt-Anchor" href="#我的痛点"></a> 我的痛点</h2>
<p>之前用过python打包过一些文件，大小还算可以接受，15m左右，直到今天，给同学写了一个GUI界面，用了PySide2、numpy、pandas。打包竟然到了100多m，这。。。属实给我蚌埠住了。</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/QQ%E6%88%AA%E5%9B%BE20220406222723.png" alt="" /></p>
<p>其实这里面打包了很多没有用的东西，归根到底，是全局环境的问题。</p>
<p>压缩打包之后，大小几乎就缩小了一半。</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/QQ%E6%88%AA%E5%9B%BE20220406223300.png" alt="" /></p>
<p>因为功能过于简单，其实这不大，如果功能开发的多的话，打包也不会大多少的。</p>
<h1 id="压缩打包解决方案"><a class="markdownIt-Anchor" href="#压缩打包解决方案"></a> 压缩打包解决方案</h1>
<p>上文分析了，py打包的主要原因是因为，全局环境太乱，太复杂，导致一些没有用的东西，也打包进了环境，这十分的憋屈。</p>
<p>我的解决流程如下：</p>
<ol>
<li>利用virtualenv创建一个全新的环境。</li>
<li>在全局环境中安装所要的库。</li>
<li>pyinstaller进行打包</li>
</ol>
<h2 id="1-virtualenv的安装以及使用"><a class="markdownIt-Anchor" href="#1-virtualenv的安装以及使用"></a> 1、virtualenv的安装以及使用</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> virtualenv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>virtualenv会放在python安装目录下的scripts的文件夹下哈。如果添加环境变量了，就可以直接使用啦</p>
<p>我们先创建一个新环境。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">virtualenv envname<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img data-src="https://cdn.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/QQ%E6%88%AA%E5%9B%BE20220406224602.png" alt="" /></p>
<p>进入school下可以看到，和python的全局环境差不多哈</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/QQ%E6%88%AA%E5%9B%BE20220406224742.png" alt="" /></p>
<p>Lib里可以看pip安装的包，scripts中可以看到pip安装的工具。</p>
<p>这里主要说一下这scripts下的工具哈。</p>
<p>使用cd命令进入到scripts中</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/image-20220406225001038.png" alt="" /></p>
<ul>
<li>pip这几个工具都是一样的，只是名字不一样而已啦，pip3.8这些名字只是为了区分不同python版本下的pip管理工具。这里的pip是新环境下的哈。</li>
<li>python.exe就是解释器哈。运行的时候用的。</li>
<li>activate这个可执行文件，是切换环境的哈，运行这个文件，可以进入虚拟环境。</li>
<li>deacticate这个文件可以退出虚拟环境。</li>
</ul>
<p>我们先进入到这个虚拟环境下哈。</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/QQ%E6%88%AA%E5%9B%BE20220406225553.png" alt="" /></p>
<p>看到这个后面出现虚拟环境的名字就说明进入到里面了哈。</p>
<p>现在我们打包一下这个schoolWifi的项目哈</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/QQ%E6%88%AA%E5%9B%BE20220406225733.png" alt="" /></p>
<p>这个项目只用到这俩个库哈我们先安装一下所用到的库。</p>
<p>re库是自带的，所以我们只需要安装requests库。</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/QQ%E6%88%AA%E5%9B%BE20220406225922.png" alt="" /></p>
<p>另外还需要装pyinstaller哈</p>
<p>cd命令切换到打包project的目录下</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pyinstaller <span class="token parameter variable">-w</span> <span class="token parameter variable">-F</span> <span class="token parameter variable">-i</span> xiao.ico main.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img data-src="https://cdn.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/QQ%E6%88%AA%E5%9B%BE20220406230308.png" alt="" /></p>
<p>此时已经很小很小了。</p>
<p>还能不能再小。</p>
<h2 id="压缩神器upx"><a class="markdownIt-Anchor" href="#压缩神器upx"></a> 压缩神器upx</h2>
<p>在上面的exe的基础上，upx还能再压缩exe，可谓是锦上添花。</p>
<h3 id="安装以及使用"><a class="markdownIt-Anchor" href="#安装以及使用"></a> 安装以及使用</h3>
<p>在github官网上下载upx对应系统的压缩包，解压到虚拟环境下的scripts下。</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/QQ%E6%88%AA%E5%9B%BE20220406231432.png" alt="" /></p>
<p>可以看到又进一步压缩了一点。实际上这个过程是加壳哈。</p>
]]></content>
      <categories>
        <category>CS</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>openwrt插件篇-openclash&amp;adguardhome</title>
    <url>/log/openwrt/openwrt-dns/</url>
    <content><![CDATA[<p>DNS（<strong>D</strong>omain <strong>N</strong>ame <strong>S</strong>ystem），网络域名系统。可以把它对应手机里的联系人，通过联系人的名字就可以找到电话号码，也能通过手机号找到对应联系人的信息，从而能够准确给特定人拨打电话或者发短信等等。而DNS会把网络域名转换成ip，也能把ip转换成网络域名。</p>
<p><img data-src="https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/20230903211232.png" alt="image.png" /></p>
<h2 id="adguardhome"><a class="markdownIt-Anchor" href="#adguardhome"></a> AdguardHome</h2>
<p>AdguardHome 是一个本地DNS转发器，同时能过滤广告或者网站等，<code>GitHub</code>开源。下文简称为ADHome。<br />
值得庆幸的是，ADHome在openwrt上也能用，首先说一下这个软件能带来哪些好处。</p>
<p>在上图，浏览一个网站时，会先进行DNS查询，获取网站的IP，这个过程十分慢，会极大影响上网体验，其次在我们连接到Wi-Fi上网时，很可能我们正在使用的设备DNS会被劫持，也就是说不是<code>8.8.8.8|1.1.1.1</code>等公共的DNS服务器，它可能是某个老油条自己搭建的一个，同时把你想访问的网站ip，换成他设定的，这就十分的危险了。</p>
<p>把DNS默认设置为ADHome的DNS服务端口，你的每一条DNS请求都会走ADHome的DNS服务，就可以防止DNS被劫持，同时为ADHome设置一些公共的DNS服务器上游，在收到DNS请求时，它会并发向这些上游DNS服务器请求，根据你的选择，可以返回最快的，也可以是其他情况。</p>
<p>如此说来，ADHome兼并smartdns等软件的功能，同时还具备过滤功能，可以设置黑名单来屏蔽广告等。没有理由不装！！！<a href="https://github.com/rufengsuixing/luci-app-adguardhome">openwrt链接</a></p>
<p><img data-src="https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/20230903214014.png" alt="image.png" /></p>
<p>以下是我的dns备用</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text"># 上游服务器
114.114.114.114
223.5.5.5
180.76.76.76
1.1.1.1
8.8.8.8
8.8.4.4
117.50.10.10
180.184.1.1
101.101.101.101
https://public.dns.iij.jp/dns-query
https://dns.google/dns-query
https://1.1.1.1/dns-query<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>去广告用的是anti-ad公开的广告库—&gt;<a href="https://anti-ad.net/easylist.txt">传送</a><br />
<img data-src="https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/20230903214228.png" alt="image.png" /></p>
<h2 id="openclash"><a class="markdownIt-Anchor" href="#openclash"></a> openclash</h2>
<p>openclash是clash的openwrt版本，安装完meta内核，基本和电脑端的规则兼容，一套规则，全平台使用，还是很不错滴。<br />
就不过多写这个了。</p>
<h2 id="openclashadhome"><a class="markdownIt-Anchor" href="#openclashadhome"></a> openclash+ADHome</h2>
<p>这才是硬路由的终极方案，openclash劫持53端口的DNS转发，同时将openclash的DNS上游设置为ADHome。<br />
如此一来，DNS请求—&gt;53端口DNS—&gt;openclash—&gt;ADHome。</p>
<p>openclash配置如下，其中8053为ADHome服务端口。<br />
<img data-src="https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/20230903215059.png" alt="image.png" /></p>
<p>ADHome配置如下<br />
<img data-src="https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/20230903215153.png" alt="image.png" /></p>
<h2 id="dns测速对比"><a class="markdownIt-Anchor" href="#dns测速对比"></a> DNS测速对比</h2>
<p>根据使用情况，smartdns与ADHome dns查询速度基本一致，这里对比的是smartdns与正常情况下的DNS。<br />
速率对比是玄学，主要用途是为了防止DNS被劫持。</p>
<p>正常情况如下<br />
<img data-src="https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/20230903215643.png" alt="image.png" /></p>
<p>使用smartdns情况如下<br />
<img data-src="https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/20230903215805.png" alt="image.png" /></p>
<p>尽管dns查询速度这块是玄学，实际使用上来说，提升是有的，搭配openclash秒开YouTube。</p>
<p>最后不得不说6088这款路由器，真滴强，openclash➕ADHome等应用一点压力都没。<br />
<img data-src="https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/20230903220047.png" alt="image.png" /></p>
<hr />
<p>想把博客从hexo转移到hugo，之前改的配置，都不记得改了那里，很难受，算了，先这样吧，等11.11买完新电脑，再迁移吧。</p>
]]></content>
      <categories>
        <category>openwrt</category>
        <category>log</category>
      </categories>
      <tags>
        <tag>openwrt</tag>
      </tags>
  </entry>
  <entry>
    <title>折腾红米ax6</title>
    <url>/log/openwrt/redmiAx6/</url>
    <content><![CDATA[<p>此篇记录一下前段时间折腾路由器的经历。哈哈哈哈哈，真是太爽了，路由器这东西，真上头。</p>
<p>📍</p>
<h1 id="选择路由器"><a class="markdownIt-Anchor" href="#选择路由器"></a> 选择路由器</h1>
<p>我选的是红米ax6，这款路由器，可以说是理财产品了，哈哈哈哈，价格一直涨，二手原价卖。就离谱。</p>
<p>我主要是看重它以下几点</p>
<ul>
<li>芯片好，高通的芯片，散热刚刚滴~</li>
<li>支持wifi6</li>
<li>穿墙也不错</li>
</ul>
<p>加上看好碰见小米商城有货，我直接手起刀落。</p>
<p>长个样子。</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/image-20220505005059497.png" alt="image-20220505005059497" /></p>
<h1 id="刷openwrt"><a class="markdownIt-Anchor" href="#刷openwrt"></a> 刷openwrt</h1>
<p>openwrt一个开源的路由器系统，可玩性强，深受“大家”喜爱，我也不例外，诶~，年轻就是折腾。</p>
<p>我用的openwrt是直接在恩山下载一个网友的。不得不说，英雄所见略同。这个网友和我一样，只有一个需求，就是能科学上网就行啦。</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/image-20220430210845243.png" alt="image-20220430210845243" /></p>
<p>插件这块大家可以自己装啦。</p>
<p>米家的固件实在是苦不堪言，红米ax6跑千M网和玩一样，根本没有压力。我选择openwrt更高的自由度。</p>
<h2 id="解锁ssh"><a class="markdownIt-Anchor" href="#解锁ssh"></a> 解锁SSH</h2>
<p>ax6最难刷机的原因就是SSH太难解。</p>
<p>我是参考的b站这位网友给的教程，解锁的。<a href="https://www.bilibili.com/video/BV1q94y1f7fj">视频链接</a></p>
<p>我不是特别喜欢这个视频的风格，所以这里我简单概括一下他说的这些东西。</p>
<ol>
<li>
<p>将AX6的固件降级为1.0.18版本</p>
</li>
<li>
<p>红米ax6解锁需要一个openwrt路由（能上网的）。</p>
</li>
<li>
<p>用虚拟机搭建一个openwrt系统的虚拟路由，就是开一个虚拟机。配置网络环境虚拟机网络环境</p>
</li>
<li>
<p>上传wireless.sh文件到虚拟机，执行 sh /root/wireless.sh</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#wireless.sh如下</span>
<span class="token comment">#!/bin/ash</span>
<span class="token comment"># SPDX-License-Identifier: GPL-3.0-only</span>
<span class="token comment">#</span>
<span class="token comment"># Copyright (C) 2020 yyjdelete</span>
<span class="token comment"># Copyright (C) 2021 Robert Marko &lt;robimarko@gmail.com></span>
<span class="token comment"># Copyright (C) 2021 Tianling Shen &lt;cnsztl@immortalwrt.org></span>
<span class="token comment">#</span>
<span class="token comment"># Original threads:</span>
<span class="token comment"># Redmi AX6 AX3000: https://www.right.com.cn/forum/thread-4060726-1-1.html</span>
<span class="token comment"># Xiaomi AX6000/AX9000: https://forum.openwrt.org/t/openwrt-support-for-xiaomi-ax9000/98908/34</span>

<span class="token assign-left variable">info_font</span><span class="token operator">=</span><span class="token string">"<span class="token entity" title="\033">\033</span>[36m[Info]<span class="token entity" title="\033">\033</span>[0m"</span>
<span class="token assign-left variable">success_font</span><span class="token operator">=</span><span class="token string">"<span class="token entity" title="\033">\033</span>[32m[Success]<span class="token entity" title="\033">\033</span>[0m"</span>
<span class="token assign-left variable">warning_font</span><span class="token operator">=</span><span class="token string">"<span class="token entity" title="\033">\033</span>[33m[Warning]<span class="token entity" title="\033">\033</span>[0m"</span>

<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token variable">$&#123;warning_font&#125;</span> Please make sure your router has wireless support!"</span>
<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token variable">$&#123;warning_font&#125;</span> Please make sure your router is restored to factory settings (not configured)!"</span>
<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token variable">$&#123;warning_font&#125;</span> Please make sure you've backed up the network and wireless settings!"</span>
<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token variable">$&#123;warning_font&#125;</span> Please make sure you've connected the router via *wired ethernet*!"</span>
<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token variable">$&#123;warning_font&#125;</span> Running this script will change your *network* settings!"</span>
<span class="token builtin class-name">read</span> <span class="token parameter variable">-p</span> <span class="token string">"Use Ctrl+C to exit or press enter key to continue..."</span>

<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">""</span>
<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token variable">$&#123;info_font&#125;</span> Adding xqsystem controller..."</span>
<span class="token function">cat</span> <span class="token operator">></span> <span class="token string">"/usr/lib/lua/luci/controller/admin/xqsystem.lua"</span> <span class="token operator">&lt;&lt;</span><span class="token string">EOF
module("luci.controller.admin.xqsystem", package.seeall)

function index()
    local page   = node("api")
    page.target  = firstchild()
    page.title   = ("")
    page.order   = 100
    page.index = true
    page   = node("api","xqsystem")
    page.target  = firstchild()
    page.title   = ("")
    page.order   = 100
    page.index = true
    entry(&#123;"api", "xqsystem", "token"&#125;, call("getToken"), (""), 103, 0x08)
end

local LuciHttp = require("luci.http")

function getToken()
    local result = &#123;&#125;
    result["code"] = 0
    result["token"] = "; nvram set ssh_en=1; nvram set uart_en=1; nvram set boot_wait=on; nvram commit; uci set wireless.@wifi-iface[0].key=\<span class="token variable"><span class="token variable">`</span>mkxqimage -I<span class="token punctuation">\</span><span class="token variable">`</span></span>; uci commit; sed -i 's/channel=.*/channel=<span class="token entity" title="\&quot;">\"</span>debug<span class="token entity" title="\&quot;">\"</span>/g' /etc/init.d/dropbear; /etc/init.d/dropbear start;"
    LuciHttp.write_json(result)
end
EOF</span>

<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token variable">$&#123;info_font&#125;</span> Changing network settings..."</span>
<span class="token builtin class-name">set</span> <span class="token parameter variable">-x</span>
<span class="token comment"># /etc/config/dhcp</span>
uci <span class="token builtin class-name">set</span> <span class="token assign-left variable">dhcp.lan.ra_management</span><span class="token operator">=</span><span class="token string">'1'</span>
uci del dhcp.lan.start
uci del dhcp.lan.limit
uci del dhcp.lan.leasetime
uci <span class="token builtin class-name">set</span> <span class="token assign-left variable">dhcp.lan.ignore</span><span class="token operator">=</span><span class="token string">'1'</span>
<span class="token comment"># /etc/config/network</span>
uci <span class="token builtin class-name">set</span> <span class="token assign-left variable">network.lan.ipaddr</span><span class="token operator">=</span><span class="token string">'169.254.31.1'</span>
uci <span class="token parameter variable">-q</span> commit
<span class="token builtin class-name">set</span> +x

<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token variable">$&#123;success_font&#125;</span> All settings are applied.<span class="token entity" title="\n">\n</span>"</span>
<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token variable">$&#123;info_font&#125;</span> Please now disconnect from this router, and connect to your Xiaomi/Redmi router."</span>
<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">""</span>
<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token variable">$&#123;info_font&#125;</span> For Xiaomi AX3000/AX6000/AX9000:"</span>
<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"       Open your browser, access the following URL:"</span>
<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"         http://192.168.31.1/cgi-bin/luci/;stok=&lt;STOK>/api/xqsystem/extendwifi_connect_inited_router?ssid=MEDIATEK-ARM-IS-GREAT&amp;password=ARE-YOU-OK&amp;admin_username=root&amp;admin_password=admin&amp;admin_nonce=xxx"</span>
<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">""</span>


<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">""</span>
<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token variable">$&#123;warning_font&#125;</span> Restarting network..."</span>
wifi reload <span class="token operator">></span><span class="token string">"/dev/null"</span> <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span>
/etc/init.d/network restart <span class="token operator">></span><span class="token string">"/dev/null"</span> <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>打开windows移动热点，这时候电脑就会多出来一个网卡（这个热点的）</p>
</li>
<li>
<p>把刚刚刷好的openwrt桥接到windows热点上。ps:热点必须联网</p>
</li>
<li>
<p>登录AX6，复制当前AX6后台链接中 “stock=” 后面的字符串；</p>
</li>
<li>
<p>替换链接中相应的数据后，复制到浏览器点击回车，解锁SSH；<br />
<a href="http://192.168.31.1/cgi-bin/luci/;stok=">http://192.168.31.1/cgi-bin/luci/;stok=</a><stock>/api/xqsystem/extendwifi_connect_inited_router?ssid=op&amp;password=12345678&amp;admin_username=root&amp;admin_password=password&amp;admin_nonce=xxx</p>
</li>
<li>
<p>提示解锁成功之后，再次登录ax6后台，5G频段路由密码，就是SSH密码了</p>
</li>
</ol>
<p>到这里SSH就解锁了。</p>
<h2 id="刷入openwrt"><a class="markdownIt-Anchor" href="#刷入openwrt"></a> 刷入openwrt</h2>
<p>红米ax6有两个系统分区，你在0区，就把openwrt刷到0区，反之刷到1区。</p>
<p>就是说，你在0分区刷，固件会上传到1分区。你在1分区刷，固件会上传到0分区。所以刷之前要切换分区先。</p>
<p>我这里没扩容，因为第一次刷的那个路由器变砖了，我在网上没找到很完善的扩容方案。不扩容只能刷30m以下的哈，超过会变砖，用小米官方的刷机软件可求回来。但是扩容刷机失败，不能用小米官网的刷机求了。。。</p>
<p>这样就不会出现变砖的情况了。</p>
<p>下面以1分区举例</p>
<ol>
<li>
<p>检测当前分区</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nvram get flag_last_success<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>切换分区</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nvram <span class="token builtin class-name">set</span> <span class="token assign-left variable">flag_last_success</span><span class="token operator">=</span><span class="token number">0</span>
nvram <span class="token builtin class-name">set</span> <span class="token assign-left variable">flag_boot_rootfs</span><span class="token operator">=</span><span class="token number">0</span>
nvram commit
<span class="token function">reboot</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>把openwrt的固件上传到/tmp下面，第一次上传.ubi后缀的文件的哈<img data-src="https://cdn.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/image-20220430212942511.png" alt="image-20220430212942511" /></p>
</li>
<li>
<p>刷入固件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ubiformat /dev/mtd13 <span class="token parameter variable">-y</span> <span class="token parameter variable">-f</span> /tmp/你上传的固件文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>切换分区</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nvram <span class="token builtin class-name">set</span> <span class="token assign-left variable">flag_last_success</span><span class="token operator">=</span><span class="token number">1</span>
nvram <span class="token builtin class-name">set</span> <span class="token assign-left variable">flag_boot_rootfs</span><span class="token operator">=</span><span class="token number">1</span>
nvram commit
<span class="token function">reboot</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
<p>结束。</p>
<p>剩下的就是切换不同系统的代码了</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">OP切换到小米系统
fw_setenv  flag_last_success <span class="token number">0</span>
fw_setenv flag_boot_rootfs <span class="token number">0</span>
<span class="token function">reboot</span>

小米系统切换到OP
nvram <span class="token builtin class-name">set</span> <span class="token assign-left variable">flag_last_success</span><span class="token operator">=</span><span class="token number">1</span>
nvram <span class="token builtin class-name">set</span> <span class="token assign-left variable">flag_boot_rootfs</span><span class="token operator">=</span><span class="token number">1</span>
nvram commit
<span class="token function">reboot</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img data-src="https://cdn.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/image-20220430213828289.png" alt="image-20220430213828289" /></p>
<p>我想解锁完ssh之后就已经实现完全自由啦。还有什么是比一个linux更自由的呢~</p>
<h1 id="接入校园网"><a class="markdownIt-Anchor" href="#接入校园网"></a> 接入校园网</h1>
<p>河南师范大学的校园网，狗的一，一个账号一个设备。这能行吗？？？咱就是说，一百个不同意。</p>
<p>ax6有两个频段，5G和2.4G，学校的也是分这俩个频段。</p>
<p>这里要科普一下这个5G和2.4G频段哈。这里是频率，不是我们手机上说的那个5G时代哈。</p>
<ul>
<li>
<p>5G频段在信号强距离时，抗干扰能力远大于2.4G，其下载速度和上传速度明显哈。</p>
</li>
<li>
<p>2.4G频段信号范围比较广哈，穿墙效果更好。</p>
</li>
</ul>
<p>其实从物理也可得出来啦，5G频段，频率大了，波长短了，衍射效果不好，粒子性更强。波长大的，会更易绕过墙壁等障碍物。</p>
<p>我所在的寝室校园网5G很好。</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/image-20220430222656166.png" alt="image-20220430222656166" /></p>
<p>我的方案是，用路由器的5G信道，连接到校园网5G网上，在ssh连接路由器，curl命令，发送一个post请求，完成web认证。之后用路由器的2.4G频段就可以上网了。</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/image-20220430222926530.png" alt="image-20220430222926530" /></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/image-20220430223040679.png" alt="image-20220430223040679" /></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/image-20220430223440228.png" alt="image-20220430223440228" /></p>
<p>在定时运行这个shell脚本，就可以让路由器一直使用学校的校园网啦。</p>
<p>速度与直连校园网无差别。十分nice</p>
<p>唉，先到这吧，学校没有ipv6，难受了，加上我的笔记本没法插网线，没法远程开机，难受~。让我们上了研究生再写这篇文章吧。</p>
]]></content>
      <categories>
        <category>log</category>
      </categories>
      <tags>
        <tag>log</tag>
      </tags>
  </entry>
  <entry>
    <title>用shell写一个ddns</title>
    <url>/log/openwrt/shell-ddns/</url>
    <content><![CDATA[<h2 id="ddns"><a class="markdownIt-Anchor" href="#ddns"></a> DDNS</h2>
<p>假设有这样一种场景，有台服务器的<code>IP</code>每个一段时间会变化，而我们访问这台机器时，就可能因为这台机器的<code>IP</code>发生了变化，导致不能访问，必须到那台机器上，获取到新的<code>IP</code>地址才能进行访问，这十分的痛苦。</p>
<p><code>DNS</code>可以把<code>IP</code>和<code>domain(域名)</code>进行映射，让我们可以通过域名就可以找到<code>IP</code>，然后对机器进行访问，如此一来，当服务器<code>IP</code>发生变化时，我们只需要把域名的<code>DNS</code>解析换成新的<code>IP</code>，其他设备用域名访问服务器，就感知不到<code>IP</code>发生了变化。可是手动档换<code>DNS</code>解析并不是一个好主意。</p>
<p><code>DDNS(Dynamic DNS)</code>可以动态解析<code>IP</code>，当检测到<code>IP</code>发生了变化，就会自动换<code>DNS</code>解析，竟有此等技术，方可高枕无忧。</p>
<h2 id="用shell实现一个simple-ddns"><a class="markdownIt-Anchor" href="#用shell实现一个simple-ddns"></a> 用shell实现一个simple DDNS</h2>
<p>DDNS实现方案很多，最简单粗暴的莫过于</p>
<ol>
<li>获取本地<code>IP</code></li>
<li>获取域名<code>IP</code></li>
<li>比较<code>IP</code>是否相同，如果相同就使用<code>API</code>更新<code>DNS</code></li>
<li>定时运行上面步骤</li>
</ol>
<p><code>shell</code>方案中所用工具</p>
<ul>
<li><code>dig｜nslookup</code>等<code>DNS</code>查询工具获取域名<code>IP</code> 。</li>
<li><code>ip｜ipconfig</code>等命令获取到本机<code>IP</code>。</li>
<li><code>curl</code>发送网络请求，进行更换<code>DNS</code>解析</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 这是ipv6的例子</span>

<span class="token assign-left variable">ipv6_address</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">ip</span> <span class="token parameter variable">-6</span> addr show br-lan <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'/inet6 .*global/&#123;gsub(/\/[0-9]+/, "", $2); print $2&#125;'</span><span class="token variable">)</span></span>

<span class="token assign-left variable">ipv6_older</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">dig</span> AAAA baidu.com +short<span class="token variable">)</span></span>

<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$ipv6_address</span>"</span> <span class="token operator">!=</span> <span class="token string">"<span class="token variable">$ipv6_older</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
        <span class="token builtin class-name">echo</span> <span class="token variable">$ipv6_address</span>
        <span class="token function">curl</span> <span class="token parameter variable">-u</span> <span class="token string">"xxx"</span>
<span class="token keyword">fi</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>最后再用<code>crontab -e</code>，添加一个定时任务，完结撒花。</p>
]]></content>
      <categories>
        <category>shell</category>
        <category>openwrt</category>
      </categories>
      <tags>
        <tag>shell</tag>
        <tag>DDNS</tag>
      </tags>
  </entry>
  <entry>
    <title>tl6088刷机之旅</title>
    <url>/log/openwrt/tl6088/</url>
    <content><![CDATA[<p>最近又换了一台路由器，TP-link-6088，因为上个月买了台switch，无论怎么换DNS，下载速度依旧感人至深。转手就把小米AX6000卖了，其实小米AX6000已经能满足我的日常的绝大需求，唯一缺点就是自由度不够，迟来的switch打破昔日的平静。</p>
<h2 id="为啥选择tl6088"><a class="markdownIt-Anchor" href="#为啥选择tl6088"></a> 为啥选择tl6088？</h2>
<p>对，这是个好问题，身为一个小垃圾佬，先后了解很多路由器，结合我的需求，要能刷openwrt，运行内存至少要512，CPU要好一些，处理网络数据包的同时，要留有余地去跑一些第三方服务。闪存要高一些，至少64。<br />
最重要的是价格一定要便宜！！！<br />
如此这般，候选路由器1号----红米ax6000，2号----tl6088，3号----tl6080。<br />
红米ax6000在配置上几乎与6088完全一样，加上是米家的路由器，再熟悉不过，可惜没有2.5G网口，惨遭淘汰。<br />
6088和6080，jd搞活动，价格相差不大，最终选择了6088，6百多拿下。</p>
<h2 id="刷机openwrt"><a class="markdownIt-Anchor" href="#刷机openwrt"></a> 刷机openwrt</h2>
<p>tp家的路由器和米家的不一样，我看很多论坛上说tp的刷机过程比较繁琐。之前玩的红米ax6，刷机已经很繁琐了。我敲，这不会又是一个通宵吧。</p>
<p>还好小马过河，实际比红米ax6省事不少，利用6088的vpn漏洞，注入刷机包，再通过tftp服务，把recover传入，整体过程一气呵成，大概20分钟，就刷完了。</p>
<p><img data-src="https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/20230827235738.png" alt="image.png" /></p>
<p>具体的参考文章可以看===&gt;<a href="https://blog.lishun.me/tl-xdr608x-openwrt-install">这篇文章</a>，作者很谨慎，传输的文件都加了md5验证文件唯一性，胆大心细，十分nice。</p>
<h2 id="配置openwrt"><a class="markdownIt-Anchor" href="#配置openwrt"></a> 配置openwrt</h2>
<p>家里的电线光猫，全国通用密码，直接8080端口找到老web地址，把宽带账号&amp;&amp;密码记下来，删除第三个路由模式，创建一个桥接模式，钩上端口，最后关闭光猫的DHCP。</p>
<p>openwrt这边就容易多了，我用的是wan6接口拨号上网，其他默认就行。最后设置完Wi-Fi密码，把国家代码改成AU，澳大利亚提高无线功率。</p>
<h3 id="插件"><a class="markdownIt-Anchor" href="#插件"></a> 插件</h3>
<p>openwrt最好玩儿的地方。</p>
<p>我目前安装的插件</p>
<ul>
<li>open clash</li>
<li>smartdns</li>
<li>upnp</li>
<li>uu加速器</li>
</ul>
<p>smartdns具有很好的dns查询效果，自己设置完上游dns后，网页打开能快不少，不是吹的。</p>
<p>smartdns作为openclash的上游dns，有很好的加速效果，upnp就不用多说了，必装插件，打游戏嗖嗖滴。</p>
<p>uu加速器，害，一个臭打游戏的插件，加速主机，要什么小黑盒，都没用。</p>
<hr />
<p>简单记录一下新路由器的之旅，openwrt还有很多地方不懂，这周会开始逐步搞懂，最后记录一个通用的图文配置，以备不时之需。</p>
<p>唉，这周之前不到2刀买的域名过期了，导致我一堆的服务都歇菜了，azure for student 订阅也没多少了，希望黑5能找到好机子，下周会先配置完nvim，然后研究一下ws协议等，没有这些东西，程序员简直没法生活啊。抽空会更新c语言&amp;&amp;汇编。</p>
]]></content>
      <categories>
        <category>openwrt</category>
        <category>log</category>
      </categories>
      <tags>
        <tag>openwrt</tag>
      </tags>
  </entry>
  <entry>
    <title>Quantumult X的JavaScript编写</title>
    <url>/soft/quantumultx/quantumult-x-and-js/</url>
    <content><![CDATA[<h1 id="b站签到"><a class="markdownIt-Anchor" href="#b站签到"></a> b站签到&gt;.&lt;</h1>
<h2 id="抓签到包"><a class="markdownIt-Anchor" href="#抓签到包"></a> 抓签到包</h2>
<p>F12，签到，找签到数据包</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/image-20220510170502967.png" alt="image-20220510170502967" /></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/image-20220510170538309.png" alt="image-20220510170538309" /></p>
<h2 id="编写脚本"><a class="markdownIt-Anchor" href="#编写脚本"></a> 编写脚本</h2>
<p>其实Quantumult X有自动生成脚本，但是面对复杂的，它是解决不了的啦。</p>
<p>下面是我写的一个类，可以方便以后进行操作哈。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">initEnv</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//读取Quantumult X数据库里面的数据</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">read</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> $prefs<span class="token punctuation">.</span><span class="token function">valueForKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
    <span class="token comment">//通知</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">notify</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">title<span class="token punctuation">,</span> subtitle<span class="token punctuation">,</span> message</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
		<span class="token function">$notify</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> subtitle<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token comment">//随机数</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">getRandom</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">min<span class="token punctuation">,</span>max</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token operator">+</span> min<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//延迟</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">sleep</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">milliseconds</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> date <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> currentDate <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>
            currentDate <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>currentDate <span class="token operator">-</span> date <span class="token operator">&lt;</span> milliseconds<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//get请求</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">get</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">options<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        options<span class="token punctuation">[</span><span class="token string">"method"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"GET"</span>
        $task<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
            <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token parameter">reason</span> <span class="token operator">=></span> <span class="token function">callback</span><span class="token punctuation">(</span>reason<span class="token punctuation">.</span>error<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//post请求</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">post</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">options<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        options<span class="token punctuation">[</span><span class="token string">"method"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"POST"</span>
        $task<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
            <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token parameter">reason</span> <span class="token operator">=></span> <span class="token function">callback</span><span class="token punctuation">(</span>reason<span class="token punctuation">.</span>error<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
    <span class="token comment">//结束</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">done</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
		<span class="token function">$done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>先在Quantumult X下创建一个js文件</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/image-20220510171348307.png" alt="image-20220510171348307" /></p>
<p>把刚刚的类复制到最下面，然后就可以写代码啦。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//先初始化一个类</span>
<span class="token keyword">const</span> $ <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">initEnv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>咱们开始写一个函数，完成签到的操作。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">dosign</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">"https://api.live.bilibili.com/xlive/web-ucenter/v1/sign/DoSign"</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
        <span class="token string-property property">"cookie"</span><span class="token operator">:</span><span class="token string">"自己的cookie"</span><span class="token punctuation">,</span>
        <span class="token string-property property">"user-agent"</span><span class="token operator">:</span><span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.54 Safari/537.36 Edg/101.0.1210.39"</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> myRequest <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">url</span><span class="token operator">:</span>url<span class="token punctuation">,</span>
        <span class="token literal-property property">headers</span><span class="token operator">:</span>headers
    <span class="token punctuation">&#125;</span>
	<span class="token comment">//发一个get请求</span>
    $<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>myRequest<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span>response</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">let</span> body <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>body<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        $<span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这个代表结束整个程序。</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token punctuation">&#125;</span>
<span class="token comment">//调用函数即可</span>
<span class="token function">dosign</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img data-src="https://cdn.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/image-20220510172959875.png" alt="image-20220510172959875" /></p>
<p>根据俩次的请求回应，我们修改一下签到函数。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">dosign</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">"https://api.live.bilibili.com/xlive/web-ucenter/v1/sign/DoSign"</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
        <span class="token string-property property">"cookie"</span><span class="token operator">:</span><span class="token string">"your cookie"</span><span class="token punctuation">,</span>
        <span class="token string-property property">"user-agent"</span><span class="token operator">:</span><span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.54 Safari/537.36 Edg/101.0.1210.39"</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> myRequest <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">url</span><span class="token operator">:</span>url<span class="token punctuation">,</span>
        <span class="token literal-property property">headers</span><span class="token operator">:</span>headers
    <span class="token punctuation">&#125;</span>

    $<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>myRequest<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span>response</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">let</span> body <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>body<span class="token punctuation">.</span>code<span class="token operator">===</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                $<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token string">"bili签到~"</span><span class="token punctuation">,</span>body<span class="token punctuation">.</span>data<span class="token punctuation">.</span>text<span class="token punctuation">,</span>body<span class="token punctuation">.</span>data<span class="token punctuation">.</span>specialText<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
                $<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token string">"bili签到~"</span><span class="token punctuation">,</span>body<span class="token punctuation">.</span>message<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        $<span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行结果如下</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/image-20220510173731266.png" alt="image-20220510173731266" /></p>
<h2 id="自动获取cookie"><a class="markdownIt-Anchor" href="#自动获取cookie"></a> 自动获取COOKIE</h2>
<p>Quantumult X内部有一个小型的数据库，也就是官网的数据持久化操作。</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/image-20220510174340728.png" alt="image-20220510174340728" /></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/image-20220510174424044.png" alt="image-20220510174424044" /></p>
<p>同时Quantumult X的rewrite操作可以运行js脚本，我们只需要，把cookie放入这里面就行啦。</p>
<h2 id="cookie存入函数"><a class="markdownIt-Anchor" href="#cookie存入函数"></a> cookie存入函数</h2>
<p>下面的代码是在Github上找到一个获取COOKIE的模板。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getCookie</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> currentC <span class="token operator">=</span> $request<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>Cookie<span class="token punctuation">;</span>
    <span class="token keyword">var</span> <span class="token function-variable function">existC</span> <span class="token operator">=</span> <span class="token parameter">key</span> <span class="token operator">=></span> $prefs<span class="token punctuation">.</span><span class="token function">valueForKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> <span class="token function-variable function">create</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">currentC<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=></span> $prefs<span class="token punctuation">.</span><span class="token function">setValueForKey</span><span class="token punctuation">(</span>currentC<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>currentC <span class="token operator">&amp;&amp;</span> <span class="token function">existC</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      currentC <span class="token operator">!=</span> <span class="token function">existC</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">?</span>
      <span class="token punctuation">(</span><span class="token function">create</span><span class="token punctuation">(</span>currentC<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">$notify</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">"更新Cookie成功"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"目前的cookie一致"</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
          currentC <span class="token operator">!=</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> 
          <span class="token punctuation">(</span><span class="token function">create</span><span class="token punctuation">(</span>currentC<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token function">$notify</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">"获取cookie成功"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> 
          <span class="token function">$notify</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">"获取Cookie失败"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token function">$done</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>编辑一个重写，当打开b站直播中心时自动运行，获取cookie，放入数据库中。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span>$request<span class="token punctuation">.</span>url<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"DoSign"</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">getCookie</span><span class="token punctuation">(</span><span class="token string">"BiliBili"</span><span class="token punctuation">,</span> <span class="token string">"biliCookie"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>



<span class="token keyword">function</span> <span class="token function">getCookie</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> currentC <span class="token operator">=</span> $request<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>Cookie<span class="token punctuation">;</span>
    <span class="token keyword">var</span> <span class="token function-variable function">existC</span> <span class="token operator">=</span> <span class="token parameter">key</span> <span class="token operator">=></span> $prefs<span class="token punctuation">.</span><span class="token function">valueForKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> <span class="token function-variable function">create</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">currentC<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=></span> $prefs<span class="token punctuation">.</span><span class="token function">setValueForKey</span><span class="token punctuation">(</span>currentC<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>currentC <span class="token operator">&amp;&amp;</span> <span class="token function">existC</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      currentC <span class="token operator">!=</span> <span class="token function">existC</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">?</span>
      <span class="token punctuation">(</span><span class="token function">create</span><span class="token punctuation">(</span>currentC<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">$notify</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">"更新Cookie成功"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"目前的cookie一致"</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
          currentC <span class="token operator">!=</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> 
          <span class="token punctuation">(</span><span class="token function">create</span><span class="token punctuation">(</span>currentC<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token function">$notify</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">"获取cookie成功"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> 
          <span class="token function">$notify</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">"获取Cookie失败"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">$done</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>挂到到重写上即可</p>
<pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">hostname &#x3D; api.live.bilibili.com

^https:\&#x2F;\&#x2F;api\.live\.bilibili\.com\&#x2F;xlive\&#x2F;web-ucenter\&#x2F;v1\&#x2F;sign\&#x2F;DoSign url script-request-header https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;zhu-jiyuan&#x2F;myJavaScripts&#x2F;master&#x2F;biliGetCookie.js<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h1 id="htu校园网web认证"><a class="markdownIt-Anchor" href="#htu校园网web认证"></a> HTU校园网web认证</h1>
<p>quantumult X 的网络请求是异步的，这对于咱一直没用过异步的孩子，多少有些痛苦。</p>
<p>由于这个脚本需要串行执行。</p>
<p>思路是这样的，先访问1.1.1.1，获取web认证的userip和认证ip，然后把获得的ip填入校园网认证表单中，发送POST请求，完成认证。</p>
<p>写了两种方式实现，仅供参考</p>
<h2 id="await串行"><a class="markdownIt-Anchor" href="#await串行"></a> await串行</h2>
<p>await会让等待异步执行完之后，再执行下面的代码。但是只能在异步函数中使用。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">
<span class="token keyword">const</span> $ <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">initEnv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> stuNo <span class="token operator">=</span> <span class="token string">"学号"</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> passwd <span class="token operator">=</span> <span class="token string">"密码"</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> ips <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>

<span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">await</span> <span class="token function">getIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ips<span class="token punctuation">)</span><span class="token punctuation">;</span>
    $<span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token keyword">function</span> <span class="token function">getIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">"http://1.1.1.1"</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> myquests <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">url</span><span class="token operator">:</span> url<span class="token punctuation">,</span>
        <span class="token literal-property property">headers</span><span class="token operator">:</span> headers
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        $<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>myquests<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span>response</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">let</span> body <span class="token operator">=</span> response<span class="token punctuation">.</span>body<span class="token punctuation">;</span>
                <span class="token comment">//console.log(body);</span>
                ips <span class="token operator">=</span> body<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(25[0-5]|2[0-4]\d|[0-1]\d&#123;2&#125;|[1-9]?\d)\.(25[0-5]|2[0-4]\d|[0-1]\d&#123;2&#125;|[1-9]?\d)\.(25[0-5]|2[0-4]\d|[0-1]\d&#123;2&#125;|[1-9]?\d)\.(25[0-5]|2[0-4]\d|[0-1]\d&#123;2&#125;|[1-9]?\d)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//console.log(ips);</span>
            <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">loginHtu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">"http://"</span><span class="token operator">+</span>ips<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"/portalAuthAction.do"</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> body <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
            <span class="token string-property property">"wlanuserip"</span><span class="token operator">:</span>ips<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token string-property property">"wlanacname"</span><span class="token operator">:</span><span class="token string">"HNSFDX_H3C-S8808-X"</span><span class="token punctuation">,</span>
            <span class="token string-property property">"chal_id"</span><span class="token operator">:</span><span class="token string">" "</span><span class="token punctuation">,</span>
            <span class="token string-property property">"chal_vector"</span><span class="token operator">:</span><span class="token string">" "</span><span class="token punctuation">,</span>
            <span class="token string-property property">"auth_type"</span><span class="token operator">:</span><span class="token string">"PAP"</span><span class="token punctuation">,</span>
            <span class="token string-property property">"seq_id"</span><span class="token operator">:</span><span class="token string">" "</span><span class="token punctuation">,</span>
            <span class="token string-property property">"req_id"</span><span class="token operator">:</span><span class="token string">" "</span><span class="token punctuation">,</span>
            <span class="token string-property property">"wlanacIp"</span><span class="token operator">:</span><span class="token string">"210.42.255.60"</span><span class="token punctuation">,</span>
            <span class="token string-property property">"ssid"</span><span class="token operator">:</span><span class="token string">" "</span><span class="token punctuation">,</span>
            <span class="token string-property property">"vlan"</span><span class="token operator">:</span><span class="token string">" "</span><span class="token punctuation">,</span>
            <span class="token string-property property">"mac"</span><span class="token operator">:</span><span class="token string">" "</span><span class="token punctuation">,</span>
            <span class="token string-property property">"message"</span><span class="token operator">:</span><span class="token string">" "</span><span class="token punctuation">,</span>
            <span class="token string-property property">"bank_acct"</span><span class="token operator">:</span><span class="token string">" "</span><span class="token punctuation">,</span>
            <span class="token string-property property">"isCookies"</span><span class="token operator">:</span><span class="token string">" "</span><span class="token punctuation">,</span>
            <span class="token string-property property">"version"</span><span class="token operator">:</span><span class="token string">"0"</span><span class="token punctuation">,</span>
            <span class="token string-property property">"authkey"</span><span class="token operator">:</span><span class="token string">"88----89"</span><span class="token punctuation">,</span>
            <span class="token string-property property">"url"</span><span class="token operator">:</span><span class="token string">" "</span><span class="token punctuation">,</span>
            <span class="token string-property property">"usertime"</span><span class="token operator">:</span><span class="token string">"0 "</span><span class="token punctuation">,</span>
            <span class="token string-property property">"listpasscode"</span><span class="token operator">:</span><span class="token string">"0"</span><span class="token punctuation">,</span>
            <span class="token string-property property">"listgetpass"</span><span class="token operator">:</span><span class="token string">"0"</span><span class="token punctuation">,</span>
            <span class="token string-property property">"getpasstype"</span><span class="token operator">:</span><span class="token string">"0"</span><span class="token punctuation">,</span>
            <span class="token string-property property">"randstr"</span><span class="token operator">:</span><span class="token string">"2880"</span><span class="token punctuation">,</span>
            <span class="token string-property property">"domain"</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">,</span>
            <span class="token string-property property">"isRadiusProxy"</span><span class="token operator">:</span><span class="token string">"false"</span><span class="token punctuation">,</span>
            <span class="token string-property property">"usertype"</span><span class="token operator">:</span><span class="token string">"0 "</span><span class="token punctuation">,</span>
            <span class="token string-property property">"isHaveNotice"</span><span class="token operator">:</span><span class="token string">"0"</span><span class="token punctuation">,</span>
            <span class="token string-property property">"times"</span><span class="token operator">:</span><span class="token string">"12"</span><span class="token punctuation">,</span><span class="token string-property property">" weizhi"</span><span class="token operator">:</span><span class="token string">"0"</span><span class="token punctuation">,</span><span class="token string-property property">" smsid"</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">,</span>
            <span class="token string-property property">"freeuser"</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">,</span>
            <span class="token string-property property">"freepasswd"</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">,</span>
            <span class="token string-property property">"listwxauth"</span><span class="token operator">:</span><span class="token string">"0"</span><span class="token punctuation">,</span>
            <span class="token string-property property">"templatetype"</span><span class="token operator">:</span><span class="token string">"1 "</span><span class="token punctuation">,</span>
            <span class="token string-property property">"tname"</span><span class="token operator">:</span><span class="token string">"shida_pc_portal_V1.1"</span><span class="token punctuation">,</span>
            <span class="token string-property property">"logintype"</span><span class="token operator">:</span><span class="token string">"0"</span><span class="token punctuation">,</span>
            <span class="token string-property property">"act"</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">,</span>
            <span class="token string-property property">"is189"</span><span class="token operator">:</span><span class="token string">"false"</span><span class="token punctuation">,</span>
            <span class="token string-property property">"terminalType"</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">,</span>
            <span class="token string-property property">"checkterminal"</span><span class="token operator">:</span><span class="token string">"true"</span><span class="token punctuation">,</span>
            <span class="token string-property property">"portalpageid"</span><span class="token operator">:</span><span class="token string">"101"</span><span class="token punctuation">,</span>
            <span class="token string-property property">"listfreeauth"</span><span class="token operator">:</span><span class="token string">"0"</span><span class="token punctuation">,</span>
            <span class="token string-property property">"viewlogin"</span><span class="token operator">:</span><span class="token string">"1"</span><span class="token punctuation">,</span>
            <span class="token string-property property">"userid"</span><span class="token operator">:</span>stuNo<span class="token punctuation">,</span>
            <span class="token string-property property">"authGroupId"</span><span class="token operator">:</span><span class="token string">" "</span><span class="token punctuation">,</span>
            <span class="token string-property property">"useridtemp"</span><span class="token operator">:</span>stuNo<span class="token punctuation">,</span>
            <span class="token string-property property">"passwd"</span><span class="token operator">:</span>passwd
        <span class="token punctuation">&#125;</span>
    <span class="token keyword">const</span> headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token keyword">const</span> myquests <span class="token operator">=</span><span class="token punctuation">&#123;</span>
        <span class="token literal-property property">url</span><span class="token operator">:</span>url<span class="token punctuation">,</span>
        <span class="token literal-property property">headers</span><span class="token operator">:</span>headers<span class="token punctuation">,</span>
        <span class="token literal-property property">body</span><span class="token operator">:</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
		$<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>myquests<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span>response</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>


    
<span class="token punctuation">&#125;</span>


<span class="token keyword">function</span> <span class="token function">initEnv</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

	<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">read</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> $prefs<span class="token punctuation">.</span><span class="token function">valueForKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">notify</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">title<span class="token punctuation">,</span> subtitle<span class="token punctuation">,</span> message</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
		<span class="token function">$notify</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> subtitle<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">getRandom</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">min<span class="token punctuation">,</span>max</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token operator">+</span> min<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">sleep</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">milliseconds</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> date <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> currentDate <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>
            currentDate <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>currentDate <span class="token operator">-</span> date <span class="token operator">&lt;</span> milliseconds<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//get请求</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">get</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">options<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        options<span class="token punctuation">[</span><span class="token string">"method"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"GET"</span>
        $task<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
            <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token parameter">reason</span> <span class="token operator">=></span> <span class="token function">callback</span><span class="token punctuation">(</span>reason<span class="token punctuation">.</span>error<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//post请求</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">post</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">options<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        options<span class="token punctuation">[</span><span class="token string">"method"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"POST"</span>
        $task<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
            <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token parameter">reason</span> <span class="token operator">=></span> <span class="token function">callback</span><span class="token punctuation">(</span>reason<span class="token punctuation">.</span>error<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
    <span class="token comment">//结束</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">done</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
		<span class="token function">$done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="回调串行"><a class="markdownIt-Anchor" href="#回调串行"></a> 回调串行</h2>
<p>这个请参考MDN上的JavaScript教程</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// Variables used by Scriptable.</span>
<span class="token comment">// These must be at the very top of the file. Do not edit.</span>
<span class="token comment">// icon-color: green; icon-glyph: magic;</span>

<span class="token comment">/**
 * Connect HTU WIFI
 * by@zhujiyuan
 * version 1.0
 */</span>

 <span class="token keyword">const</span> $ <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">initEnv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">const</span> stdNo <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
 <span class="token keyword">const</span> passwd <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
 
 <span class="token keyword">let</span> ips <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
 
 <span class="token function">connectHTU</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
 <span class="token keyword">function</span> <span class="token function">connectHTU</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	 <span class="token function">getIp</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>

		<span class="token comment">//console.log(ips[0]);</span>
		<span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">'http://'</span><span class="token operator">+</span>ips<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'/portalAuthAction.do'</span><span class="token punctuation">;</span>
		<span class="token keyword">const</span> body <span class="token operator">=</span> <span class="token string">'wlanuserip='</span><span class="token operator">+</span>ips<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'&amp;wlanacname=HNSFDX_H3C-S8808-X&amp;chal_id=&amp;chal_vector=&amp;auth_type=PAP&amp;seq_id=&amp;req_id=&amp;wlanacIp=210.42.255.60&amp;ssid=&amp;vlan=&amp;mac=&amp;message=&amp;bank_acct=&amp;isCookies=&amp;version=&amp;authkey=88----89&amp;url=&amp;usertime=0&amp;listpasscode=0&amp;listgetpass=0&amp;getpasstype=0&amp;randstr=8289&amp;domain=&amp;isRadiusProxy=false&amp;usertype=0&amp;isHaveNotice=0&amp;times=12&amp;weizhi=0&amp;smsid=&amp;freeuser=&amp;freepasswd=&amp;listwxauth=0&amp;templatetype=1&amp;tname=shida_pc_portal_V1.1&amp;logintype=0&amp;act=&amp;is189=false&amp;terminalType=&amp;checkterminal=false&amp;portalpageid=101&amp;listfreeauth=0&amp;viewlogin=1&amp;userid='</span><span class="token operator">+</span>stdNo<span class="token operator">+</span><span class="token string">'&amp;authGroupId=&amp;useridtemp='</span><span class="token operator">+</span>stdNo<span class="token operator">+</span><span class="token string">'&amp;passwd='</span><span class="token operator">+</span>passwd<span class="token punctuation">;</span>
		<span class="token comment">//console.log(url);</span>
		<span class="token comment">//console.log(body);</span>

		 
		<span class="token keyword">const</span> myquests <span class="token operator">=</span><span class="token punctuation">&#123;</span>
			<span class="token literal-property property">url</span><span class="token operator">:</span>url<span class="token punctuation">,</span>
	
			<span class="token literal-property property">body</span><span class="token operator">:</span>body
		 <span class="token punctuation">&#125;</span>
		
		 
		$<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>myquests<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span>response</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
			<span class="token keyword">let</span> resp <span class="token operator">=</span> response<span class="token punctuation">.</span>body<span class="token punctuation">;</span>
			<span class="token comment">//console.log(resp);</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"河南师范"</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token function">$notify</span><span class="token punctuation">(</span><span class="token string">"HTU connection success~"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            	<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
                <span class="token function">$notify</span><span class="token punctuation">(</span><span class="token string">"HTU connection failed"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            	<span class="token punctuation">&#125;</span>
			$<span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
	 <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span>
 
 
 <span class="token keyword">function</span> <span class="token function">getIp</span><span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	 <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">"http://1.1.1.1"</span><span class="token punctuation">;</span>
	 <span class="token keyword">const</span> headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	 <span class="token keyword">const</span> myquests <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
		 <span class="token literal-property property">url</span><span class="token operator">:</span> url<span class="token punctuation">,</span>
		 <span class="token literal-property property">headers</span><span class="token operator">:</span> headers
	 <span class="token punctuation">&#125;</span>
	 $<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>myquests<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span>response</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
			 <span class="token keyword">let</span> body <span class="token operator">=</span> response<span class="token punctuation">.</span>body<span class="token punctuation">;</span>
			 <span class="token comment">//console.log(body);</span>
			 ips <span class="token operator">=</span> body<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(25[0-5]|2[0-4]\d|[0-1]\d&#123;2&#125;|[1-9]?\d)\.(25[0-5]|2[0-4]\d|[0-1]\d&#123;2&#125;|[1-9]?\d)\.(25[0-5]|2[0-4]\d|[0-1]\d&#123;2&#125;|[1-9]?\d)\.(25[0-5]|2[0-4]\d|[0-1]\d&#123;2&#125;|[1-9]?\d)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			 <span class="token comment">//console.log(ips[1]);</span>
			 <span class="token keyword">if</span><span class="token punctuation">(</span>ips<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">===</span><span class="token string">"1.1.1.1"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
				 <span class="token comment">//console.log("over!");</span>
				 $<span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			 <span class="token punctuation">&#125;</span>
			 <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	 <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> 
 <span class="token punctuation">&#125;</span>
 
 
 
 <span class="token keyword">function</span> <span class="token function">initEnv</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 
	 <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">read</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
		 <span class="token keyword">return</span> $prefs<span class="token punctuation">.</span><span class="token function">valueForKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
	 <span class="token punctuation">&#125;</span>
	 <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">notify</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">title<span class="token punctuation">,</span> subtitle<span class="token punctuation">,</span> message</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
		 <span class="token function">$notify</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> subtitle<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
	 <span class="token punctuation">&#125;</span>
 
	 <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">getRandom</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">min<span class="token punctuation">,</span>max</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
		 <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token operator">+</span> min<span class="token punctuation">;</span>
	 <span class="token punctuation">&#125;</span>
	 <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">sleep</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">milliseconds</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
		 <span class="token keyword">const</span> date <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		 <span class="token keyword">let</span> currentDate <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
		 <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>
			 currentDate <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		 <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>currentDate <span class="token operator">-</span> date <span class="token operator">&lt;</span> milliseconds<span class="token punctuation">)</span><span class="token punctuation">;</span>
	 <span class="token punctuation">&#125;</span>
	 <span class="token comment">//get请求</span>
	 <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">get</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">options<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
		 options<span class="token punctuation">[</span><span class="token string">"method"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"GET"</span>
		 $task<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
			 <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span>
		 <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token parameter">reason</span> <span class="token operator">=></span> <span class="token function">callback</span><span class="token punctuation">(</span>reason<span class="token punctuation">.</span>error<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	 <span class="token punctuation">&#125;</span>
	 <span class="token comment">//post请求</span>
	 <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">post</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">options<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
		 options<span class="token punctuation">[</span><span class="token string">"method"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"POST"</span>
		 $task<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
			 <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span>
		 <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token parameter">reason</span> <span class="token operator">=></span> <span class="token function">callback</span><span class="token punctuation">(</span>reason<span class="token punctuation">.</span>error<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	 <span class="token punctuation">&#125;</span>
	 <span class="token comment">//结束</span>
	 <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">done</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
		 <span class="token function">$done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	 <span class="token punctuation">&#125;</span>
 <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
 

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>（待更新，如果你有看到我，请提醒他去更新一下）</p>
<hr />
<h1 id="change-logs"><a class="markdownIt-Anchor" href="#change-logs"></a> Change logs</h1>
<h2 id="may-252022"><a class="markdownIt-Anchor" href="#may-252022"></a> May 25,2022</h2>
<ul>
<li>更新校园网js示例</li>
</ul>
]]></content>
      <categories>
        <category>soft</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>哈夫曼树应用-压缩文件</title>
    <url>/CS/dataStruct/tree/huffmanTreeCompress/</url>
    <content><![CDATA[<p>大家好~时隔好几天，我来给大家讲哈夫曼树和它的应用了！<br />
在此前，我们很少谈及c/cpp语言对字节或者bit的操作，或者说是二进制文件的操作。因为今天我内容涉及到bit以及字节的操作，所以我们不得不介绍一些c/cpp与字节的知识。<br />
我们将从哈夫曼树开始，构造一棵哈夫曼树，补充一些c/cpp的操作，实现一个简陋的无损压缩&amp;&amp;解压的core。</p>
<p>即使操作bit很吃力，请你坚持实现，不管用什么思路，这将会让你对计算机，有更清楚的认识。甚至有时，你在编码时，脑海里会是一小片内存。</p>
<h1 id="哈夫曼树"><a class="markdownIt-Anchor" href="#哈夫曼树"></a> 哈夫曼树</h1>
<p>有关哈夫曼树，网上有太多的讲解。他们的讲解都十分的出色。为了节约时间，请移步如下学习。</p>
<ul>
<li>
<p><a href="https://www.bilibili.com/video/BV1nJ411V7bd">王卓老师-数据结构哈夫曼树</a></p>
</li>
<li>
<p><a href="https://zhuanlan.zhihu.com/p/54714101">哈夫曼树 深入剖析</a></p>
</li>
</ul>
<p>哈夫曼树的理论，不难，希望大家能过一遍理论，再去实践。</p>
<h1 id="构造哈夫曼树"><a class="markdownIt-Anchor" href="#构造哈夫曼树"></a> 构造哈夫曼树</h1>
<p>在这些讲解中，普遍存在一个致命的缺陷–避重就轻，屏蔽了代码实现的最难部分。</p>
<p>根据身边同学的反馈。</p>
<p>以下是本次构造的难点</p>
<ul>
<li>选择两个最小结点。</li>
<li>获取哈夫曼编码。</li>
</ul>
<p>那么在构造这棵树之前，我们需要定义树结点的结构，以及哈夫曼树的一些操作。</p>
<p>我想我们应该从实践出发，因为我们要做一个压缩文件的程序，首要的就是得到哈夫曼编码。</p>
<p>假设我们有一棵哈夫曼树，我们应该怎么样去获取每个结点的编码呢？</p>
<p>请回忆我们之前所学的前序遍历。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">
 <span class="token function">getCode</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token class-name">HuffmanTree</span><span class="token double-colon punctuation">::</span><span class="token function">getCode</span><span class="token punctuation">(</span>node <span class="token operator">*</span>root<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-></span>lChild<span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token operator">&amp;&amp;</span>root<span class="token operator">-></span>rChild<span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        root<span class="token operator">-></span>code<span class="token operator">=</span>s<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">getCode</span><span class="token punctuation">(</span>root<span class="token operator">-></span>lChild<span class="token punctuation">,</span>s<span class="token operator">+</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">getCode</span><span class="token punctuation">(</span>root<span class="token operator">-></span>rChild<span class="token punctuation">,</span>s<span class="token operator">+</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们只需要一次前序遍历。在访问左节点时，s+“0”，右结点时s+“1”，当到叶子结点时，令该结点的code等于s。</p>
<p>眼下，我们需要构造一棵哈夫曼树。</p>
<p>我们很容易定义如下的结点结构。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">node</span><span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> data<span class="token punctuation">;</span>
    node<span class="token operator">*</span> lChild<span class="token punctuation">&#123;</span><span class="token keyword">nullptr</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    node<span class="token operator">*</span> rChild<span class="token punctuation">&#123;</span><span class="token keyword">nullptr</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> wight<span class="token punctuation">;</span>
    <span class="token keyword">int</span> parent<span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>string code<span class="token punctuation">;</span>

    <span class="token function">node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token keyword">default</span><span class="token punctuation">;</span>
    <span class="token function">node</span><span class="token punctuation">(</span><span class="token keyword">int</span> t_data<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">data</span><span class="token punctuation">(</span>t_data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们还需要一个临时的数组，自下而上的构造哈夫曼树。</p>
<p>但结点是n是，我们只需要一张长度位2xn-1的表就行了，因此我们采用一个指针，动态分配2xn-1空间。</p>
<p>n个结点的构造，我们需要这些结点的权重，一张统计文件过各个字符的数目的哈希表来初始化这些结点，再好不过了。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">HuffmanTree</span><span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    node<span class="token operator">*</span> huffmanTable<span class="token punctuation">;</span> <span class="token comment">//哈夫曼树构造表</span>
    node<span class="token operator">*</span> root<span class="token punctuation">;</span><span class="token comment">//根节点</span>

    <span class="token function">HuffmanTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token keyword">default</span><span class="token punctuation">;</span>
    <span class="token operator">~</span><span class="token function">HuffmanTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">HuffmanTree</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>unordered_map<span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">></span><span class="token operator">&amp;</span>wightTable <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化结点</span>

    <span class="token keyword">void</span> <span class="token function">forEachPre</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span> <span class="token comment">//树的前序遍历，可以检测是否成功构造</span>


<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>首先是通过哈希表初始化结点</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token class-name">HuffmanTree</span><span class="token double-colon punctuation">::</span><span class="token function">HuffmanTree</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>unordered_map<span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">></span><span class="token operator">&amp;</span>wightTable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">create</span><span class="token punctuation">(</span>wightTable<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">HuffmanTree</span><span class="token double-colon punctuation">::</span><span class="token function">create</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>unordered_map<span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">></span> <span class="token operator">&amp;</span>wightTable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    huffmanTable <span class="token operator">=</span> <span class="token keyword">new</span> node<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>wightTable<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token comment">//insert wight node</span>
    <span class="token keyword">int</span> index<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">//this is a huffmanTable point.</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>w<span class="token operator">:</span>wightTable<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        huffmanTable<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">=</span> w<span class="token punctuation">.</span>first<span class="token punctuation">;</span>
        huffmanTable<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>wight <span class="token operator">=</span> w<span class="token punctuation">.</span>second<span class="token punctuation">;</span>
        index<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token comment">//important!</span>
    <span class="token comment">//find two min wight node.</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>index<span class="token operator">&lt;</span><span class="token number">2</span><span class="token operator">*</span>wightTable<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>index<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token function">connectNode</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token comment">//return root node;</span>
    <span class="token keyword">this</span><span class="token operator">-></span>root <span class="token operator">=</span> <span class="token operator">&amp;</span>huffmanTable<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>wightTable<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//std::cout&lt;&lt;"huffman tree create successful!"&lt;&lt;std::endl;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当初始完毕后，就可以构造哈夫曼树了，上述代码不难，但我们需要实现，选择两个最小结点，这点很重要。</p>
<p>利用贪心算法，在排除存在父结点的结点中挑选，合成结点并插入在huffmanTable中的insert_index位置上。</p>
<p>判断是否存在父结点，可以用parent是否等于-1来判断。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">HuffmanTree</span><span class="token double-colon punctuation">::</span><span class="token function">connectNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> insert_index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//find two min wight node in huffmanTable.</span>
    <span class="token comment">//lchild and rchild;</span>
    node<span class="token operator">*</span> l<span class="token punctuation">;</span>
    node<span class="token operator">*</span> r<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> min_temp<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token comment">//找到第一个没有父节点的结点</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>insert_index<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>huffmanTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>parent<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            min_temp <span class="token operator">=</span> huffmanTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>wight<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
	<span class="token comment">//贪心1</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>insert_index<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>huffmanTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>wight<span class="token operator">&lt;=</span>min_temp<span class="token operator">&amp;&amp;</span>huffmanTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>parent<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            min_temp <span class="token operator">=</span> huffmanTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>wight<span class="token punctuation">;</span>
            l <span class="token operator">=</span> <span class="token operator">&amp;</span>huffmanTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    l<span class="token operator">-></span>parent <span class="token operator">=</span> insert_index<span class="token punctuation">;</span>
<span class="token comment">//找到第一个没有父节点的结点</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>insert_index<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>huffmanTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>parent<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            min_temp <span class="token operator">=</span> huffmanTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>wight<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
	<span class="token comment">//贪心2</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>insert_index<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>huffmanTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>wight<span class="token operator">&lt;=</span>min_temp<span class="token operator">&amp;&amp;</span>huffmanTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>parent<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            min_temp <span class="token operator">=</span> huffmanTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>wight<span class="token punctuation">;</span>
            r <span class="token operator">=</span> <span class="token operator">&amp;</span>huffmanTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    r<span class="token operator">-></span>parent<span class="token operator">=</span>insert_index<span class="token punctuation">;</span>

    <span class="token comment">//insert node</span>
    huffmanTable<span class="token punctuation">[</span>insert_index<span class="token punctuation">]</span><span class="token punctuation">.</span>lChild <span class="token operator">=</span> l<span class="token punctuation">;</span>
    huffmanTable<span class="token punctuation">[</span>insert_index<span class="token punctuation">]</span><span class="token punctuation">.</span>rChild <span class="token operator">=</span> r<span class="token punctuation">;</span>
    huffmanTable<span class="token punctuation">[</span>insert_index<span class="token punctuation">]</span><span class="token punctuation">.</span>wight <span class="token operator">=</span> l<span class="token operator">-></span>wight<span class="token operator">+</span>r<span class="token operator">-></span>wight<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>以上操作就可以构造一棵哈夫曼树。</p>
<p>以下是完整代码</p>
<p>huffmanTree.h</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//</span>
<span class="token comment">// Created by zhujiyuan on 2022/9/23.</span>
<span class="token comment">//</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">HUFFMANZIP_HUFFMANTREE_H</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">HUFFMANZIP_HUFFMANTREE_H</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unordered_map></span></span>
<span class="token keyword">class</span> <span class="token class-name">node</span><span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> data<span class="token punctuation">;</span>
    node<span class="token operator">*</span> lChild<span class="token punctuation">&#123;</span><span class="token keyword">nullptr</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    node<span class="token operator">*</span> rChild<span class="token punctuation">&#123;</span><span class="token keyword">nullptr</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> wight<span class="token punctuation">;</span>
    <span class="token keyword">int</span> parent<span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>string code<span class="token punctuation">;</span>

    <span class="token function">node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token keyword">default</span><span class="token punctuation">;</span>
    <span class="token function">node</span><span class="token punctuation">(</span><span class="token keyword">int</span> t_data<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">data</span><span class="token punctuation">(</span>t_data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">HuffmanTree</span><span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    node<span class="token operator">*</span> huffmanTable<span class="token punctuation">;</span>
    node<span class="token operator">*</span> root<span class="token punctuation">;</span>

    <span class="token function">HuffmanTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token keyword">default</span><span class="token punctuation">;</span>
    <span class="token operator">~</span><span class="token function">HuffmanTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">HuffmanTree</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>unordered_map<span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">></span><span class="token operator">&amp;</span>wightTable <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">forEachPre</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">create</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>unordered_map<span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">></span><span class="token operator">&amp;</span>wightTable <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//insert connect node</span>
    <span class="token keyword">void</span> <span class="token function">connectNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> insert_index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">forEachPre</span><span class="token punctuation">(</span>node <span class="token operator">*</span>root<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">getCode</span><span class="token punctuation">(</span>node <span class="token operator">*</span>root<span class="token punctuation">,</span>std<span class="token double-colon punctuation">::</span>string s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">//HUFFMANZIP_HUFFMANTREE_H</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>huffmanTree.cpp</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//</span>
<span class="token comment">// Created by zhujiyuan on 2022/9/23.</span>
<span class="token comment">//</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"huffmanTree.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>


<span class="token class-name">HuffmanTree</span><span class="token double-colon punctuation">::</span><span class="token function">HuffmanTree</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>unordered_map<span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">></span><span class="token operator">&amp;</span>wightTable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">create</span><span class="token punctuation">(</span>wightTable<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//create huffman tree with wight table.</span>
<span class="token comment">//new node</span>
<span class="token keyword">void</span> <span class="token class-name">HuffmanTree</span><span class="token double-colon punctuation">::</span><span class="token function">create</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>unordered_map<span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">></span> <span class="token operator">&amp;</span>wightTable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    huffmanTable <span class="token operator">=</span> <span class="token keyword">new</span> node<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>wightTable<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token comment">//insert wight node</span>
    <span class="token keyword">int</span> index<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">//this is a huffmanTable point.</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>w<span class="token operator">:</span>wightTable<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        huffmanTable<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">=</span> w<span class="token punctuation">.</span>first<span class="token punctuation">;</span>
        huffmanTable<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>wight <span class="token operator">=</span> w<span class="token punctuation">.</span>second<span class="token punctuation">;</span>
        index<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token comment">//important!</span>
    <span class="token comment">//find two min wight node.</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>index<span class="token operator">&lt;</span><span class="token number">2</span><span class="token operator">*</span>wightTable<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>index<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token function">connectNode</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token comment">//return root node;</span>
    <span class="token keyword">this</span><span class="token operator">-></span>root <span class="token operator">=</span> <span class="token operator">&amp;</span>huffmanTable<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>wightTable<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//std::cout&lt;&lt;"huffman tree create successful!"&lt;&lt;std::endl;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">HuffmanTree</span><span class="token double-colon punctuation">::</span><span class="token function">connectNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> insert_index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//find two min wight node in huffmanTable.</span>
    <span class="token comment">//lchild and rchild;</span>
    node<span class="token operator">*</span> l<span class="token punctuation">;</span>
    node<span class="token operator">*</span> r<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> min_temp<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>insert_index<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>huffmanTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>parent<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            min_temp <span class="token operator">=</span> huffmanTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>wight<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>insert_index<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>huffmanTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>wight<span class="token operator">&lt;=</span>min_temp<span class="token operator">&amp;&amp;</span>huffmanTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>parent<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            min_temp <span class="token operator">=</span> huffmanTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>wight<span class="token punctuation">;</span>
            l <span class="token operator">=</span> <span class="token operator">&amp;</span>huffmanTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    l<span class="token operator">-></span>parent <span class="token operator">=</span> insert_index<span class="token punctuation">;</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>insert_index<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>huffmanTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>parent<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            min_temp <span class="token operator">=</span> huffmanTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>wight<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>insert_index<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>huffmanTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>wight<span class="token operator">&lt;=</span>min_temp<span class="token operator">&amp;&amp;</span>huffmanTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>parent<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            min_temp <span class="token operator">=</span> huffmanTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>wight<span class="token punctuation">;</span>
            r <span class="token operator">=</span> <span class="token operator">&amp;</span>huffmanTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    r<span class="token operator">-></span>parent<span class="token operator">=</span>insert_index<span class="token punctuation">;</span>

    <span class="token comment">//insert node</span>
    huffmanTable<span class="token punctuation">[</span>insert_index<span class="token punctuation">]</span><span class="token punctuation">.</span>lChild <span class="token operator">=</span> l<span class="token punctuation">;</span>
    huffmanTable<span class="token punctuation">[</span>insert_index<span class="token punctuation">]</span><span class="token punctuation">.</span>rChild <span class="token operator">=</span> r<span class="token punctuation">;</span>
    huffmanTable<span class="token punctuation">[</span>insert_index<span class="token punctuation">]</span><span class="token punctuation">.</span>wight <span class="token operator">=</span> l<span class="token operator">-></span>wight<span class="token operator">+</span>r<span class="token operator">-></span>wight<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">HuffmanTree</span><span class="token double-colon punctuation">::</span><span class="token function">forEachPre</span><span class="token punctuation">(</span>node <span class="token operator">*</span>root<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-></span>lChild<span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token operator">&amp;&amp;</span>root<span class="token operator">-></span>rChild<span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>
        std<span class="token double-colon punctuation">::</span>cout<span class="token operator">&lt;&lt;</span><span class="token keyword">char</span><span class="token punctuation">(</span>root<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>
    <span class="token function">forEachPre</span><span class="token punctuation">(</span>root<span class="token operator">-></span>lChild<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">forEachPre</span><span class="token punctuation">(</span>root<span class="token operator">-></span>rChild<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">HuffmanTree</span><span class="token double-colon punctuation">::</span><span class="token function">forEachPre</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>
    <span class="token function">forEachPre</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">HuffmanTree</span><span class="token double-colon punctuation">::</span><span class="token function">getCode</span><span class="token punctuation">(</span>node <span class="token operator">*</span>root<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-></span>lChild<span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token operator">&amp;&amp;</span>root<span class="token operator">-></span>rChild<span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        root<span class="token operator">-></span>code<span class="token operator">=</span>s<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">getCode</span><span class="token punctuation">(</span>root<span class="token operator">-></span>lChild<span class="token punctuation">,</span>s<span class="token operator">+</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">getCode</span><span class="token punctuation">(</span>root<span class="token operator">-></span>rChild<span class="token punctuation">,</span>s<span class="token operator">+</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">HuffmanTree</span><span class="token double-colon punctuation">::</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>root<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">HuffmanTree</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">HuffmanTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>huffmanTable<span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> huffmanTable<span class="token punctuation">;</span>
        huffmanTable <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="压缩与解压"><a class="markdownIt-Anchor" href="#压缩与解压"></a> 压缩与解压</h1>
<p>压缩难在，操作字节。</p>
<p>我们先不去考虑这个最难的部分。</p>
<p>每个文件的大小都是字节的整数倍，我们可以字节作为结点的数据，统计这个字节出现过多少次，来构造哈夫曼树。</p>
<p>一个字节0-255，所以最多有256个结点。</p>
<p>构造完哈夫曼树之后，开始编码。</p>
<p>逐个字节读取源文件，把这个字节转成哈夫曼编码。</p>
<p>[用一个字符串存储每个字节的哈夫曼编码]{.red}，这样每个8个字符，写入一个字节就行啦。</p>
<p>要注意的是，最后可能不满8个字节，需要在后面补0，补足8位。</p>
<p>这就是压缩的过程啦。</p>
<p>解压的过程，可以通过逐位读取压缩文件</p>
<ul>
<li>0访问左子树</li>
<li>1访问右子树</li>
<li>叶子结点，把结点的字节，写入解压文件中。</li>
</ul>
<p>思路不一，以下是这个思路的实现代码。</p>
<p>compress.h</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//</span>
<span class="token comment">// Created by zhujiyuan on 2022/9/25.</span>
<span class="token comment">//</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">HUFFMANZIP_COMPRESS_H</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">HUFFMANZIP_COMPRESS_H</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"huffmanTree.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unordered_map></span></span>
<span class="token keyword">class</span> <span class="token class-name">FileIO</span><span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span>buf<span class="token punctuation">;</span>
    <span class="token keyword">long</span> buf_size<span class="token punctuation">;</span>
    <span class="token function">FileIO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token keyword">default</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">readIntoBuf</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Compress</span><span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">FileIO</span></span><span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    HuffmanTree <span class="token operator">*</span>h_tree<span class="token punctuation">;</span>
    <span class="token keyword">int</span> endBit<span class="token punctuation">;</span><span class="token comment">//add 0 number</span>
    std<span class="token double-colon punctuation">::</span>unordered_map<span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">></span>hash<span class="token punctuation">;</span>
    <span class="token function">Compress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token keyword">default</span><span class="token punctuation">;</span>
    <span class="token function">Compress</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">compressFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">decompressFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">inline</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token function">strBinToUchar</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">inline</span> std<span class="token double-colon punctuation">::</span>string <span class="token function">ucharToStrBin</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>


<span class="token keyword">inline</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token class-name">Compress</span><span class="token double-colon punctuation">::</span><span class="token function">strBinToUchar</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> sum<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">&amp;</span>a<span class="token operator">:</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        sum <span class="token operator">=</span> sum<span class="token operator">*</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span>a<span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">inline</span> std<span class="token double-colon punctuation">::</span>string <span class="token class-name">Compress</span><span class="token double-colon punctuation">::</span><span class="token function">ucharToStrBin</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    std<span class="token double-colon punctuation">::</span>string ans <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>s<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">%</span><span class="token number">2</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            ans <span class="token operator">=</span> <span class="token char">'1'</span><span class="token operator">+</span>ans<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
            ans <span class="token operator">=</span> <span class="token char">'0'</span><span class="token operator">+</span>ans<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        s<span class="token operator">/=</span><span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        ans <span class="token operator">=</span> <span class="token char">'0'</span><span class="token operator">+</span>ans<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">//HUFFMANZIP_COMPRESS_H</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>compress.cpp</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//</span>
<span class="token comment">// Created by zhujiyuan on 2022/9/25.</span>
<span class="token comment">//</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"compress.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unordered_map></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"processBar.h"</span></span>
<span class="token keyword">void</span> <span class="token class-name">FileIO</span><span class="token double-colon punctuation">::</span><span class="token function">readIntoBuf</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>fileName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    FILE <span class="token operator">*</span> q <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span><span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//get file size</span>
    <span class="token function">fseek</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token constant">SEEK_END</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token operator">-></span>buf_size <span class="token operator">=</span> <span class="token function">ftell</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//create file size buf</span>
    <span class="token keyword">this</span><span class="token operator">-></span>buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">[</span>buf_size<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">fseek</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token constant">SEEK_SET</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>buf<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>buf_size<span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fclose</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>

<span class="token class-name">Compress</span><span class="token double-colon punctuation">::</span><span class="token function">Compress</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>filename<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">init</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">Compress</span><span class="token double-colon punctuation">::</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>filename<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">readIntoBuf</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">long</span> i<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>buf_size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        hash<span class="token punctuation">[</span>buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    h_tree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">HuffmanTree</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">Compress</span><span class="token double-colon punctuation">::</span><span class="token function">compressFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//create find table,key is node's data,value is node's code.</span>
    std<span class="token double-colon punctuation">::</span>unordered_map<span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">,</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> quickTable<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>hash<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        quickTable<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token operator">-></span>h_tree<span class="token operator">-></span>huffmanTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">this</span><span class="token operator">-></span>h_tree<span class="token operator">-></span>huffmanTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>code<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    FILE <span class="token operator">*</span>q <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"test.hip"</span><span class="token punctuation">,</span><span class="token string">"wb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//start compress!!!</span>
    std<span class="token double-colon punctuation">::</span>string byteBuf<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>

    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> streamBuf<span class="token punctuation">[</span><span class="token number">1048576</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>streamBuf<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>streamBuf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> cnt<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">long</span> i<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>buf_size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        byteBuf<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>quickTable<span class="token punctuation">[</span>buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//add 0 to bytrBuf</span>
    endBit<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>byteBuf<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">8</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        byteBuf<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        endBit<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//delete buf</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>buf<span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span>buf<span class="token punctuation">;</span>
        buf <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//write into stream buf.</span>
    std<span class="token double-colon punctuation">::</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"start compress file."</span><span class="token operator">&lt;&lt;</span>std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    ProcessBar <span class="token function">bar</span><span class="token punctuation">(</span>byteBuf<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">long</span> i<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>byteBuf<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        streamBuf<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">strBinToUchar</span><span class="token punctuation">(</span>byteBuf<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token operator">%</span><span class="token number">1048576</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token function">fwrite</span><span class="token punctuation">(</span>streamBuf<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>streamBuf<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        bar<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token function">fwrite</span><span class="token punctuation">(</span>streamBuf<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span><span class="token operator">*</span>cnt<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">fclose</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout<span class="token operator">&lt;&lt;</span>std<span class="token double-colon punctuation">::</span>endl<span class="token operator">&lt;&lt;</span><span class="token string">"compress over!"</span><span class="token operator">&lt;&lt;</span>std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">Compress</span><span class="token double-colon punctuation">::</span><span class="token function">decompressFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    node<span class="token operator">*</span> sign <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>h_tree<span class="token operator">-></span>root<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> streamBuf<span class="token punctuation">[</span><span class="token number">1048576</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>streamBuf<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>streamBuf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    FILE <span class="token operator">*</span>q <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"test.hip"</span><span class="token punctuation">,</span><span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    FILE <span class="token operator">*</span>uq <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"test.unhip"</span><span class="token punctuation">,</span><span class="token string">"wb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> cnt<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    std<span class="token double-colon punctuation">::</span>string codeTxt<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> t<span class="token punctuation">;</span>

    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">fread</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        codeTxt<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">ucharToStrBin</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>endBit<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        codeTxt<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        endBit<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//std::cout&lt;&lt;codeTxt&lt;&lt;std::endl;</span>
    <span class="token function">fclose</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"start decompress file."</span><span class="token operator">&lt;&lt;</span>std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    ProcessBar <span class="token function">bar</span><span class="token punctuation">(</span>codeTxt<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">&amp;</span>s<span class="token operator">:</span>codeTxt<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">==</span><span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            sign<span class="token operator">=</span>sign<span class="token operator">-></span>lChild<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
            sign<span class="token operator">=</span>sign<span class="token operator">-></span>rChild<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>sign<span class="token operator">-></span>rChild<span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token operator">&amp;&amp;</span>sign<span class="token operator">-></span>lChild<span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            streamBuf<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>sign<span class="token operator">-></span>data<span class="token punctuation">;</span>
            sign<span class="token operator">=</span><span class="token keyword">this</span><span class="token operator">-></span>h_tree<span class="token operator">-></span>root<span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token operator">%</span><span class="token number">1048576</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token function">fwrite</span><span class="token punctuation">(</span>streamBuf<span class="token punctuation">,</span><span class="token keyword">sizeof</span> <span class="token punctuation">(</span>streamBuf<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>uq<span class="token punctuation">)</span><span class="token punctuation">;</span>
                cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        bar<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token function">fwrite</span><span class="token punctuation">(</span>streamBuf<span class="token punctuation">,</span><span class="token keyword">sizeof</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token punctuation">)</span><span class="token operator">*</span>cnt<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>uq<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">fclose</span><span class="token punctuation">(</span>uq<span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout<span class="token operator">&lt;&lt;</span>std<span class="token double-colon punctuation">::</span>endl<span class="token operator">&lt;&lt;</span><span class="token string">"decompress over!"</span><span class="token operator">&lt;&lt;</span>std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>有关c语言的知识，可以参考如下内容</p>
<ul>
<li><a href="https://blog.csdn.net/qicheng777/article/details/75458025">文件操作函数</a></li>
</ul>
<p>完整代码=&gt;<a href="https://github.com/zhu-jiyuan/hufffmanCompression">github</a></p>
<p>后续可能会优化压缩代码。逃~</p>
]]></content>
      <categories>
        <category>CS</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>树与二叉树补充I</title>
    <url>/CS/dataStruct/tree/patchOfTree/</url>
    <content><![CDATA[<p>大家好，按照之前的计划，我们本应该去应用二叉树，实现一些应用的。然鹅，树与森林以及二叉树之间的关系、线索二叉树这些，没有给大家说。这可能会影响大家对之前知识的理解，所以还是补充一下。<br />
我知道你已经迫不及待去敲代码了，学好这些理论可以<code>让你更加清晰的认识代码</code>，帮助你写出<code>更出色的代码</code>，以及<code>节省思考如何写代码的时间</code>。这是非常有必要的。<br />
当你十分清楚流程，以及思路时，背后的代码，就像喝汤一样。</p>
<p>好，废话不多说。紧跟上篇，我想，先介绍一下线索二叉树。再介绍树、森林、以及二叉树三者的关系。</p>
<ol>
<li>线索二叉树</li>
<li>树
<ol>
<li>存储方式</li>
<li>遍历</li>
</ol>
</li>
<li>森林
<ol>
<li>遍历</li>
</ol>
</li>
<li>三者之间的关系</li>
</ol>
<h1 id="线索二叉树"><a class="markdownIt-Anchor" href="#线索二叉树"></a> 线索二叉树</h1>
<p>还记得二叉树吗？二叉树中很多空指针。</p>
<p>一个n个结点的二叉树，有2n个指针，一条边就会少一个空指针，n个结点有n-1条边，所以空指针数量为2n - (n-1) = n+1</p>
<p>可见内存利用有些低，我们让这些有空指针的结点，如果左指针空，就让左指针指向遍历顺序的前驱，右指针空则指向遍历顺序的后继。没有前驱或者后继，指向空即可。</p>
<p>线索二叉树图片</p>
<p>按照遍历顺序，可以得到<code>先序、中序、后序三种线索二叉树</code>。</p>
<p>因为无法知道结点的指针到底是指向子结点，还是前驱或者后继，所以我们需要两个标志位来表示，当前指针指向的意义。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">node</span><span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">char</span> data<span class="token punctuation">;</span>
    node <span class="token operator">*</span> lchild<span class="token punctuation">;</span>
    node <span class="token operator">*</span> rchild<span class="token punctuation">;</span>
    <span class="token keyword">bool</span> ltag<span class="token punctuation">&#123;</span><span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">bool</span> rtag<span class="token punctuation">&#123;</span><span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token function">node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token keyword">default</span><span class="token punctuation">;</span>
    <span class="token function">node</span><span class="token punctuation">(</span><span class="token keyword">char</span> d<span class="token punctuation">)</span><span class="token operator">:</span>data<span class="token punctuation">&#123;</span>d<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>
        lchild <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
        rchild <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>ltag为false代表当前lchild指向子节点，true表示指向前驱。rtag亦然。</p>
<p>这样下来我们的利用率就大大提高了，还能方便到遍历二叉树。</p>
<h2 id="线索生成"><a class="markdownIt-Anchor" href="#线索生成"></a> 线索生成</h2>
<p>我们在二叉树的基础上，来做。</p>
<p>按照遍历的三种顺序，会有三种生成的方式。我们只需要在访问该节点时，知道它的前驱节点就好。这样很难理解。</p>
<p>我想用代码来说明，如果实在不懂，可以参考王道考研上的线索二叉树。</p>
<p>拿中序线索二叉树来说。</p>
<p>例如这个树</p>
<p><img data-src="https://s2.loli.net/2022/09/20/LXNDH89l2Wio5Ma.png" alt="image-20220919225056910" />{height=“300px” width=“300px”}</p>
<p>中序遍历结果CBEGDFA</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">node<span class="token operator">*</span> pre<span class="token operator">=</span><span class="token keyword">nullptr</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">toLineTree</span><span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token operator">&amp;</span> cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>

    <span class="token function">toLineTree</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//指向前驱</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>lchild<span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        cur<span class="token operator">-></span>lchild <span class="token operator">=</span> pre<span class="token punctuation">;</span>
        cur<span class="token operator">-></span>ltag<span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//指向后继</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>pre<span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token operator">&amp;&amp;</span>pre<span class="token operator">-></span>rchild<span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        pre<span class="token operator">-></span>rchild<span class="token operator">=</span>cur<span class="token punctuation">;</span>
        pre<span class="token operator">-></span>rtag<span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    pre <span class="token operator">=</span> cur<span class="token punctuation">;</span>
    <span class="token function">toLineTree</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>先序结果ABCDEGF</p>
<p>先序与中序不同，当前驱节点指向前驱后，因为下一个要遍历左结点，左节点指向了前驱，这样就会又回到前驱结点，形成死环。因此需要判断是否已经指向前驱，如果已经指向前驱，就跳过去。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">node<span class="token operator">*</span> pre<span class="token operator">=</span><span class="token keyword">nullptr</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">toLineTree</span><span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token operator">&amp;</span> cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>

   
    <span class="token comment">//指向前驱</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>lchild<span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        cur<span class="token operator">-></span>lchild <span class="token operator">=</span> pre<span class="token punctuation">;</span>
        cur<span class="token operator">-></span>ltag<span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//指向后继</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>pre<span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token operator">&amp;&amp;</span>pre<span class="token operator">-></span>rchild<span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        pre<span class="token operator">-></span>rchild<span class="token operator">=</span>cur<span class="token punctuation">;</span>
        pre<span class="token operator">-></span>rtag<span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    pre <span class="token operator">=</span> cur<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>ltag<span class="token operator">==</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token function">toLineTree</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">toLineTree</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>后序结果CGEFDBA</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">node<span class="token operator">*</span> pre<span class="token operator">=</span><span class="token keyword">nullptr</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">toLineTree</span><span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token operator">&amp;</span> cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>

   
    <span class="token comment">//指向前驱</span>

    
    <span class="token function">toLineTree</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">toLineTree</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>lchild<span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        cur<span class="token operator">-></span>lchild <span class="token operator">=</span> pre<span class="token punctuation">;</span>
        cur<span class="token operator">-></span>ltag<span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//指向后继</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>pre<span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token operator">&amp;&amp;</span>pre<span class="token operator">-></span>rchild<span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        pre<span class="token operator">-></span>rchild<span class="token operator">=</span>cur<span class="token punctuation">;</span>
        pre<span class="token operator">-></span>rtag<span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    pre <span class="token operator">=</span> cur<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>线索二叉树，先介绍这么多吧。</p>
<hr />
<p>下面开始介绍树。</p>
<h1 id="树-森林和二叉树"><a class="markdownIt-Anchor" href="#树-森林和二叉树"></a> 树、森林和二叉树</h1>
<p>在此之前，我们需要简单介绍一下树的存储方式。</p>
<p>偷个懒儿</p>
<p><img data-src="https://s2.loli.net/2022/09/20/k2ANYyWaxbcUMmd.png" alt="image-20220920220653858" /></p>
<p><img data-src="https://s2.loli.net/2022/09/20/Ou5Zf3KIa4TimEL.png" alt="image-20220920220723803" /></p>
<p><img data-src="https://s2.loli.net/2022/09/20/pIwl2STkJPrLahF.png" alt="image-20220920220801573" /></p>
<p>树为什么能转换成二叉树，树的孩子兄弟表示法，对应一棵唯一的二叉树，所以可以转换。</p>
<p>树转二叉树</p>
<p>按照老师例题上的树</p>
<p>需要先转换为孩子兄弟表示，然后顺时针旋转45度。</p>
<p><img data-src="https://s2.loli.net/2022/09/20/fj8iJqnGszKaFM6.png" alt="image-20220920221601911" /></p>
<p>二叉树转换树，类似进行相反操作。</p>
<p><img data-src="https://s2.loli.net/2022/09/20/Ce5uxNQqlwdhYPO.png" alt="image-20220920221700534" /></p>
<p>森林转二叉树，只需要把森林里的树，全部转为二叉树，再连接头结点即可</p>
<p><img data-src="https://s2.loli.net/2022/09/20/E7zrsvABcOn8kJg.png" alt="image-20220920221814212" /></p>
<p>二叉树转森林</p>
<p><img data-src="https://s2.loli.net/2022/09/20/DSnRYc59yFbOVMZ.png" alt="image-20220920221843020" /></p>
<h2 id="遍历"><a class="markdownIt-Anchor" href="#遍历"></a> 遍历</h2>
<p><img data-src="https://s2.loli.net/2022/09/20/z73RXmIxUVhakrM.png" alt="image-20220920223510888" /></p>
<p>树没有中序遍历，因为不知道那个结点是中间的。森林只有两种先和中，就是左到右，依次按照前根或者后根遍历。</p>
<p><img data-src="https://s2.loli.net/2022/09/20/PIGgosyRh9HmVju.png" alt="image-20220920224538474" /></p>
]]></content>
      <categories>
        <category>CS</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>树与二叉树</title>
    <url>/CS/dataStruct/tree/tree/</url>
    <content><![CDATA[<h1 id="树与森林"><a class="markdownIt-Anchor" href="#树与森林"></a> 树与森林</h1>
<p><img data-src="https://s2.loli.net/2022/09/19/zjuKDBnc6d8kTNZ.png" alt="image-20220919163736434" /></p>
<p>这就是两棵树，暂且称左边的为<code>树A</code>,右边的为<code>树B</code>，很明显，我们调换树A的b、c的顺序，两棵树就相同了。</p>
<p>按照这种思路，树可以分为有序树和无序树。</p>
<ul>
<li>树
<ul>
<li>有序树</li>
<li>无序树</li>
</ul>
</li>
</ul>
<p>有序树：树A和树B不同，因为左右有次序，不能颠倒。</p>
<p>无序树：树A和树B相同，可以颠倒次序。</p>
<p>这就是树啦，那么森林顾名思义，就是很多的树。</p>
<p>树A与树B共同在一起就是一个森林。</p>
<p>森林就是这样很多<code>不相交的树组成</code>，同时仅仅一棵树也可以勉强称为森林。即便这有些勉强。。</p>
<hr />
<p>森林由树组成，如果我们把树研究明白了，森林就会容易很多。所以我们先研究树。</p>
<p>在介绍下面的东西时，我们不得不引入树的一些相关术语，便于我们去进一步讨论。</p>
<h2 id="术语介绍"><a class="markdownIt-Anchor" href="#术语介绍"></a> 术语介绍</h2>
<p><img data-src="https://s2.loli.net/2022/09/19/xy1uo64FKhNpOLj.png" alt="image-20220919171417169" />{height=“300px” width=“300px”}</p>
<p>这棵树上的小圆圈，叫<code>结点</code>。</p>
<p>A是B、C、D的<code>父结点</code>。B、C、D是A的<code>子结点</code>。而A没有父结点，又称为根结点。</p>
<p>K、L这些没有子节点的，又称为<code>叶子结点</code>。</p>
<p>还记得之前学过的离散数学吗？有个叫<code>度</code>的东西。这里我们临时先画一棵简单的树</p>
<p><img data-src="https://s2.loli.net/2022/09/19/DtUOaJXk3rq8xgi.png" alt="image-20220919171620732" />{height=“250px” width=“250px”}</p>
<p>这棵树，很像离散数学的有向图。而树中每个结点的度数，就是这里结点的<code>出度</code>。</p>
<ul>
<li>结点a的度数2</li>
<li>结点c的度数0</li>
<li>结点b的度数0</li>
</ul>
<p>所以树结点的度数就是[该结点连接的子结点个数]{.red}</p>
<p>树的度就是全部结点中的最大度数。</p>
<p>好，忘掉刚刚那个图，回到之前的图中。</p>
<p><img data-src="https://s2.loli.net/2022/09/19/xy1uo64FKhNpOLj.png" alt="image-20220919171417169" />{height=“300px” width=“300px”}</p>
<p>树的层数，就是看有几层。</p>
<p>树的深度等于层数。这个数就是4层，深度为4.</p>
<p>C、G这样就是一棵子树，子树的深度，就是从当前的层数往下数有多少层，C、G这个深度就是2。而D、H、M这个就是3。</p>
<p>[重点是树的性质！]{.red}</p>
<h2 id="树的性质"><a class="markdownIt-Anchor" href="#树的性质"></a> 树的性质</h2>
<p><img data-src="https://s2.loli.net/2022/09/19/DtUOaJXk3rq8xgi.png" alt="image-20220919171620732" />{height=“250px” width=“250px”}</p>
<p>因为刚刚说，每个结点的度就是出度，一个出度就对应一条边。</p>
<p>所以，度数=边数。</p>
<p>从下往上看，每个子节点都有一个父节点，即对应一条边连接子、父结点，只有根结点没有父节点。</p>
<p>所以，结点个数-1 = 边数</p>
<h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3>
<p>度数=边数=结点个数-1</p>
<p>不妨来一个简单的小问题</p>
<ol>
<li>在一棵度为4的树T中，若有20个度数为4的结点，10个度为3的结点，1个度为2的结点，10个度为1的结点，则树T的叶节点个数是[]{.gap}。{.quiz}
<ul>
<li>41</li>
<li>82 {.correct}</li>
<li>113</li>
<li>122<br />
{.options}</li>
</ul>
<blockquote>
<p>解析如下<br />
因为边数=度数，叶子结点度数为0<br />
所以，边数= 20x4+10x3+1x2+10x2=122，又因为，边数=结点个数-1<br />
边数 = 20+10+1+10-1 + 叶子结点<br />
所以，叶子结点 = 122-40 = 82</p>
</blockquote>
</li>
</ol>
<hr />
<p>树的学习暂时告一段落，树在计算机中，并不容易表示，因此有大佬给出了二叉树，它具有唯一性，并且方便计算机操作。</p>
<p>学了这么多，还没有见过代码，请不要失望！下面将带你走进计算机与树。</p>
<h1 id="二叉树"><a class="markdownIt-Anchor" href="#二叉树"></a> 二叉树</h1>
<p><img data-src="https://s2.loli.net/2022/09/19/z43TM2bBVn7k6O9.png" alt="image-20220919180830179" />{height=“300px” width=“300px”}</p>
<p>二叉树是一棵有序树，树的度为2。</p>
<p>翻译一下</p>
<ul>
<li>二叉树有序</li>
<li>每个结点的度数最大是2</li>
</ul>
<p>如果有三个结点，那么会有5种形状的二叉树。</p>
<p><img data-src="https://s2.loli.net/2022/09/19/3HBActni5fpJg4k.png" alt="image-20220919181106537" />{height=“200px” width=“300px”}</p>
<p>二叉树中，有两种值得我们去关注的特殊情况</p>
<ul>
<li>
<p>满二叉树，除最后一层外，其余层结点度数全部为2。</p>
</li>
<li>
<p>完全二叉树，按照编号顺序排列的二叉树。</p>
</li>
</ul>
<p>举个栗子</p>
<p>满二叉树</p>
<p><img data-src="https://s2.loli.net/2022/09/19/Ab9iseSdIC52pBJ.png" alt="image-20220919180830179" />{height=“300px” width=“300px”}</p>
<p>完全二叉树</p>
<p><img data-src="https://s2.loli.net/2022/09/19/z43TM2bBVn7k6O9.png" alt="image-20220919180830179" />{height=“300px” width=“300px”}</p>
<p>满二叉树不难理解，完全二叉树就是每层从左到右依次放入结点，从顶层开始。</p>
<p><img data-src="https://s2.loli.net/2022/09/19/7DMOp2HcqiNQZgk.png" alt="image-20220919200839322" />{height=“300px” width=“300px”}</p>
<p>这个就不是，第三层没有按照顺序放。</p>
<hr />
<p>树的性质同样适用于二叉树。那么我们根据树的性质，很容易得到二叉树的一些性质。</p>
<h2 id="二叉树的性质"><a class="markdownIt-Anchor" href="#二叉树的性质"></a> 二叉树的性质</h2>
<ol>
<li>叶子结点个数 = 度为2的结点个数+1</li>
</ol>
<p>​	边数 = 结点度数 = n1 + 2xn2</p>
<p>​	这里n1为度数为1的结点个数，n2为度数为2的结点个数，依次类推。</p>
<p>​	边数 = 结点个数-1 = n0+n1+n2-1</p>
<p>​	所以，n0 = n2+1</p>
<ol start="2">
<li>
<p>第i层，最多有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">2^{i-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.824664em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>个结点，一个i层二叉树，最多有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>i</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{i}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.907994em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>个结点。</p>
<p>假设有i=3，满二叉树时，结点最多。</p>
<p>第一层 1个</p>
<p>第二层 2个</p>
<p>第三层 4个</p>
<p>第四层 8个</p>
<p>第i层 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">2^{i-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.824664em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span> 个</p>
<p>…</p>
</li>
</ol>
<p>​	等比数列，i层就是等比数列前n项和=<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mn>1</mn><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msup><mi>q</mi><mi>n</mi></msup><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>q</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">a1(1-q^{n})/(1-q)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">a</span><span class="mord">1</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord">/</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mclose">)</span></span></span></span></p>
<ol start="3">
<li>完全二叉树结点序号除2，结果为父节点序号。</li>
</ol>
<p>​	<img data-src="https://s2.loli.net/2022/09/19/z43TM2bBVn7k6O9.png" alt="image-20220919180830179" />{height=“300px” width=“300px”}</p>
<p>​	4/2 = 2</p>
<p>​	5/2 = 2（地板除）</p>
<p>​	结点序号/2，结果都为父节点序号。</p>
<hr />
<p>二叉树的性质，十分简单，到现在为止，你已经知道这个二叉树的理论部分了。此后，我们将一起探索二叉树的使用，最后并制作一个简易计算器，如果时间充足，我们将利用哈夫曼编码，来实现一个压缩程序。</p>
<h2 id="二叉树的存储"><a class="markdownIt-Anchor" href="#二叉树的存储"></a> 二叉树的存储</h2>
<p>就像前面所学的，二叉树也分为顺序存储、链式存储。</p>
<h3 id="顺序存储"><a class="markdownIt-Anchor" href="#顺序存储"></a> 顺序存储</h3>
<p><img data-src="https://s2.loli.net/2022/09/19/z43TM2bBVn7k6O9.png" alt="image-20220919180830179" />{height=“300px” width=“300px”}</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>可以这样存储。</p>
<p>如果不是这样完全二叉树，可以用一个特殊字符补成完全二叉树。</p>
<p><img data-src="https://s2.loli.net/2022/09/19/xr9MZlQiavbqnC1.png" alt="image-20220919201655444" />{height=“180px” width=“180px”}</p>
<p><img data-src="https://s2.loli.net/2022/09/19/J2a1zEeOnkrwYlQ.png" alt="image-20220919201705283" />{height=“180px” width=“180px”}</p>
<p>此时就可以存储了</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>如果是这样的极端情况会很浪费空间，</p>
<p>而链式存储可以很好的解决这个问题。</p>
<h3 id="链式存储"><a class="markdownIt-Anchor" href="#链式存储"></a> 链式存储</h3>
<p>我们需要定义一个结点数据类型</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">node</span><span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> data<span class="token punctuation">;</span>
    node <span class="token operator">*</span> lchild<span class="token punctuation">;</span>
    node <span class="token operator">*</span> rchild<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>稍后我们会主要使用这种存储方式。</p>
<hr />
<p>说了这么多，还没有讲如何生成一个二叉树，对二叉树的操作也没有系统化。</p>
<p>但是请你先不要急着写代码，了解完二叉树的遍历，这些东西将迎刃而解。</p>
<h2 id="二叉树的遍历"><a class="markdownIt-Anchor" href="#二叉树的遍历"></a> 二叉树的遍历</h2>
<p>二叉树的遍历，通常采用递归进行操作，这里主要讲述递归操作，了解完这些主要操作，我知道，你肯定觉得很没意思，到时候将介绍其他遍历方式。如果你以前不知道，将会令你大开眼界。</p>
<p>那么先让我们学习一下三个最常见的遍历操作。</p>
<ol>
<li>先序遍历</li>
<li>中序遍历</li>
<li>后序遍历</li>
</ol>
<p>在这里，我不得不放出来一张生动形象的图片，供大家参考。</p>
<p><img data-src="https://s2.loli.net/2022/09/19/dtplzwjrPnHSW5B.png" alt="image-20220919203316683" />{height=“300px” width=“300px”}</p>
<p>我们使用的递归遍历，每个结点，会经历三次，而先、中、后，三种顺序，分别对应这三次时间段。</p>
<p>所以，先序就是第一次经过的时候访问该结点，中序是第二次经过的时候，后续是第三次经过的时候。</p>
<p>接下来，我将按照此树，给出代码以及运行结果。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//此数的结点</span>
<span class="token keyword">class</span> <span class="token class-name">node</span><span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> data<span class="token punctuation">;</span>
    node <span class="token operator">*</span> lchild<span class="token punctuation">;</span>
    node <span class="token operator">*</span> rchild<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="先序遍历"><a class="markdownIt-Anchor" href="#先序遍历"></a> 先序遍历</h3>
<p>按照第一次经过结点就访问，如图所示的路线经过，依次是<code>根--左--右</code></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">foreachPreOrder</span><span class="token punctuation">(</span>node<span class="token operator">*</span>tree<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>
    cout<span class="token operator">&lt;&lt;</span>tree<span class="token operator">-></span>data<span class="token punctuation">;</span>
    <span class="token function">foreachPreOrder</span><span class="token punctuation">(</span>tree<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">foreachPreOrder</span><span class="token punctuation">(</span>tree<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>结果=&gt;ABDEFGC</p>
<h3 id="中序遍历"><a class="markdownIt-Anchor" href="#中序遍历"></a> 中序遍历</h3>
<p>按照第二次经过结点就访问，如图所示的路线经过，依次是<code>左--根--右</code></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">foreachInOrder</span><span class="token punctuation">(</span>node<span class="token operator">*</span>tree<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token function">foreachInOrder</span><span class="token punctuation">(</span>tree<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout<span class="token operator">&lt;&lt;</span>tree<span class="token operator">-></span>data<span class="token punctuation">;</span>
    <span class="token function">foreachInOrder</span><span class="token punctuation">(</span>tree<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>结果=&gt;DBFEGAC</p>
<h3 id="后序遍历"><a class="markdownIt-Anchor" href="#后序遍历"></a> 后序遍历</h3>
<p>按照第三次经过结点就访问，如图所示的路线经过，依次是<code>左--右--根</code></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">foreachPostOrder</span><span class="token punctuation">(</span>node<span class="token operator">*</span>tree<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token function">foreachPostOrder</span><span class="token punctuation">(</span>tree<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">foreachPostOrder</span><span class="token punctuation">(</span>tree<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout<span class="token operator">&lt;&lt;</span>tree<span class="token operator">-></span>data<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>结果=&gt;DFGEBCA</p>
<hr />
<p>应该不难理解这里的遍历过程。接下来，我们将介绍另一种遍历方式。</p>
<h3 id="层遍历"><a class="markdownIt-Anchor" href="#层遍历"></a> 层遍历</h3>
<p><img data-src="https://s2.loli.net/2022/09/19/dtplzwjrPnHSW5B.png" alt="image-20220919203316683" />{height=“300px” width=“300px”}</p>
<p>逐层进行遍历。这更直观。</p>
<p>结果=&gt; ABCDEFG。这用大脑太容易写出来了，只需要从第一层到最后一层，每层从左到右排列就可以得到。</p>
<p>那么，我们如何通过计算机进行这样的遍历呢？</p>
<p>上面的递归，其实就是用的栈，这里我们采用队列即可实现这样的效果。</p>
<p>我们先建立一个队列Q。放入tree根结点。</p>
<p>此时Q=[A]</p>
<p>把队首元素的左右结点放入Q=[A,B,C]</p>
<p>再让队首出队Q=[B,C]，result=A</p>
<p>把队首元素的左右结点放入Q=[B,C,D,E]</p>
<p>再让队首出队Q=[C,D,E],result=AB</p>
<p>…依次进行直到Q=[]</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">foreachFloor</span><span class="token punctuation">(</span>node<span class="token operator">*</span>tree<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    queue<span class="token operator">&lt;</span>node<span class="token operator">*</span><span class="token operator">></span> q<span class="token punctuation">;</span>
    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        node<span class="token operator">*</span> top <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>top<span class="token operator">-></span>lchild<span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>top<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>top<span class="token operator">-></span>rchild<span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>top<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cout<span class="token operator">&lt;&lt;</span>top<span class="token operator">-></span>data<span class="token punctuation">;</span>
        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>栈和队列，真是让人猝不及防。但不得不说妙啊！</p>
<hr />
<p>二叉树的遍历，到这已经说完，然而，二叉树的生成，复制，删除，这些操作，还没讲。接下来，就是这些操作了，学习这些操作前，请务必理清楚<code>遍历</code>。</p>
<p>由于操作涉及到二叉树的生成，为了让大家更清晰，这里必须要补充一点，遍历结果与二叉树的关系。</p>
<h2 id="遍历结果确定二叉树"><a class="markdownIt-Anchor" href="#遍历结果确定二叉树"></a> 遍历结果确定二叉树</h2>
<p>先说结论。</p>
<ul>
<li>先序+中序，可以确定二叉树</li>
<li>后续+中序，可以确定二叉树</li>
</ul>
<p>为啥先序+后序不能确定二叉树？我们先将为啥前两种为啥可以确定二叉树</p>
<p>根据上面的遍历结果</p>
<p>先序=&gt;ABDEFGC</p>
<p>中序=&gt;DBFEGAC</p>
<p>先序中可以看出A为根结点</p>
<p>那么在中序,DBFEG<code>A</code>C，A的左边为左子树，右边为右子树。</p>
<p><img data-src="https://s2.loli.net/2022/09/20/JZrOpeV6hndyqPW.png" alt="image-20220919212722920" />{height=“300px” width=“300px”}</p>
<p>再看D<code>B</code>FEG在先序中，B在前面，B的左边是左子树，右边是右子树。</p>
<p><img data-src="https://s2.loli.net/2022/09/20/wZ4HhSRQ2F8xcpJ.png" alt="image-20220919212734273" />{height=“300px” width=“300px”}</p>
<p>依次类推，就可以得到一个确定二叉树</p>
<hr />
<p>后序+中序同理</p>
<p>后序=&gt;DFGEBCA</p>
<p>中序=&gt;DBFEGAC</p>
<p>由后序可知A为根节点。</p>
<p>先序中可以看出A为根结点</p>
<p>那么在中序,DBFEG<code>A</code>C，A的左边为左子树，右边为右子树。</p>
<p>D<code>B</code>FEG中B在后序排列最靠后，所以B为分界点…</p>
<hr />
<p>看懂上面的，可以试一下，如果依靠先序+后续推出二叉树，没办法推出来。</p>
<h2 id="二叉树的操作"><a class="markdownIt-Anchor" href="#二叉树的操作"></a> 二叉树的操作</h2>
<h3 id="生成"><a class="markdownIt-Anchor" href="#生成"></a> 生成</h3>
<p>我们可以根据前面的遍历来生成特定形状的二叉树。</p>
<p>只需要填充空结点，补成完全二叉树。即可。</p>
<p>例如，我们可以用顺序存储的方式将数据转换成二叉树。</p>
<p>我想介绍递归+先序，来生成树。</p>
<p>例如我们想生成这棵树。</p>
<p><img data-src="https://s2.loli.net/2022/09/20/LXNDH89l2Wio5Ma.png" alt="image-20220919225056910" />{height=“300px” width=“300px”}</p>
<p>需要先写出来先序，注意空结点用#或者特殊符号表示。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//先序 string expression = "ABC##DE#G##F##"</span>
<span class="token keyword">class</span> <span class="token class-name">node</span><span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">char</span> data<span class="token punctuation">;</span>
    node <span class="token operator">*</span> lchild<span class="token punctuation">;</span>
    node <span class="token operator">*</span> rchild<span class="token punctuation">;</span>
    <span class="token function">node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token keyword">default</span><span class="token punctuation">;</span>
    <span class="token function">node</span><span class="token punctuation">(</span><span class="token keyword">char</span> d<span class="token punctuation">)</span><span class="token operator">:</span>data<span class="token punctuation">&#123;</span>d<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>
        lchild <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
        rchild <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
string expression <span class="token operator">=</span> <span class="token string">"ABC##DE#G##F##"</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> cnt<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">createTree</span><span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token operator">&amp;</span>tree<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token operator">==</span>expression<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>expression<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'#'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        cnt<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        tree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">node</span><span class="token punctuation">(</span>expression<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cnt<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token function">createTree</span><span class="token punctuation">(</span>tree<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">createTree</span><span class="token punctuation">(</span>tree<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="删除二叉树"><a class="markdownIt-Anchor" href="#删除二叉树"></a> 删除二叉树</h3>
<p>在最后经过这个结点，也就是第三次经过时，delete掉，并且让指针指向nullptr。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">clean</span><span class="token punctuation">(</span>node<span class="token operator">*</span> <span class="token operator">&amp;</span>tree<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>

    <span class="token function">clean</span><span class="token punctuation">(</span>tree<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">clean</span><span class="token punctuation">(</span>tree<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">delete</span> tree<span class="token punctuation">;</span>
    tree <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="复制"><a class="markdownIt-Anchor" href="#复制"></a> 复制</h3>
<p>先序复制，类似于生成。要比生成简单很多。</p>
<p>第一次经过这个节点时，进行复制操作。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">copy</span><span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token operator">&amp;</span> tree<span class="token punctuation">,</span>node<span class="token operator">*</span><span class="token operator">&amp;</span>viceTree<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>
    viceTree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">node</span><span class="token punctuation">(</span>tree<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">copy</span><span class="token punctuation">(</span>tree<span class="token operator">-></span>lchild<span class="token punctuation">,</span>viceTree<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">copy</span><span class="token punctuation">(</span>tree<span class="token operator">-></span>rchild<span class="token punctuation">,</span>viceTree<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//主函数</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    node <span class="token operator">*</span>root<span class="token punctuation">;</span>
    <span class="token function">createTree</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">foreachPreOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    node <span class="token operator">*</span>viceRoot<span class="token punctuation">;</span>
    <span class="token function">copy</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>viceRoot<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">clean</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//foreachFloor(root);</span>
    cout<span class="token operator">&lt;&lt;</span>viceRoot<span class="token operator">-></span>data<span class="token punctuation">;</span>
    <span class="token function">foreachFloor</span><span class="token punctuation">(</span>viceRoot<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在这里，给出copy以及clean的结果图。</p>
<p><img data-src="https://s2.loli.net/2022/09/20/5FUDOQfnERy4TjK.png" alt="image-20220920103448252" />{height=“300px” width=“450px”}</p>
<p>可以看到root树已经没有了，而viceroot树是复制的，仍然存在。</p>
<hr />
<p>到这里，我们已经完成了二叉树的基本操作，但我们不得不继续探索，仅仅这些只能让我们能够了解二叉树的操作与构成，远不能解决实际问题。下面我们将做一些实例应用二叉树。</p>
<p>在此之前，我们还需补充几个有意思的操作，让二叉树的操作熟练于心。</p>
<ul>
<li>二叉树的深度计算</li>
<li>二叉树叶子结点数</li>
</ul>
<p>大家可以发现，二叉树的操作基本都与遍历有关，所以，请大家一定要熟悉遍历的三种方式，以及遍历一笔图。在这里，不得不再次引用遍历图，来加强大家的印象。</p>
<p><img data-src="https://s2.loli.net/2022/09/19/dtplzwjrPnHSW5B.png" alt="image-20220919203316683" />{height=“300px” width=“300px”}</p>
<h3 id="计算二叉树深度"><a class="markdownIt-Anchor" href="#计算二叉树深度"></a> 计算二叉树深度</h3>
<p>还拿这个图来说</p>
<p><img data-src="https://s2.loli.net/2022/09/20/LXNDH89l2Wio5Ma.png" alt="image-20220919225056910" />{height=“300px” width=“300px”}</p>
<p>用大脑很容易计算出，深度为5。那么计算机应该怎么得到这个呢。</p>
<p>一个办法是，后序遍历，就是从最左边的最小面开始。统计左右子树的深度。</p>
<p>这个栗子。</p>
<p>C的左子树深度为0，右子树深度为0，C的深度就是两者最大的+1 = 1。</p>
<p>按照后序遍历，需要到第三次路过时，才会进行统计操作。</p>
<p>统计D时，应该先统计E,F。</p>
<p>统计E时，应该先统计G。</p>
<p>G的左子树深度为0，右子树深度为0，G的深度就是两者最大的+1 = 1。</p>
<p>E的左子树深度为0，右子树深度为1，E的深度就是两者最大的+1 = 2。</p>
<p>同C、G，F的深度为1。</p>
<p>D的左子树深度为2，右子树深度为1，D的深度就是两者最大的+1 = 3。</p>
<p>B的左子树深度为1，右子树深度为3，B的深度就是两者最大的+1 = 4。</p>
<p>A的左子树深度为4，右子树深度为0，A的深度就是两者最大的+1 = 5。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">countDeepth</span><span class="token punctuation">(</span>node<span class="token operator">*</span>tree<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> lDeepth <span class="token operator">=</span> <span class="token function">countDeepth</span><span class="token punctuation">(</span>tree<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> rDeepth <span class="token operator">=</span> <span class="token function">countDeepth</span><span class="token punctuation">(</span>tree<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>lDeepth<span class="token punctuation">,</span>rDeepth<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="二叉树叶子结点数"><a class="markdownIt-Anchor" href="#二叉树叶子结点数"></a> 二叉树叶子结点数</h3>
<p>叶子结点的判断是左子树和右子树都是空的，只需要遍历经过结点时，判断左子树和右子树是否为空，如果是叶子结点就返回1。</p>
<p>先序遍历</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">countLeaf</span><span class="token punctuation">(</span>node<span class="token operator">*</span>tree<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token operator">-></span>rchild<span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token operator">&amp;&amp;</span>tree<span class="token operator">-></span>lchild<span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">countLeaf</span><span class="token punctuation">(</span>tree<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token operator">+</span> <span class="token function">countLeaf</span><span class="token punctuation">(</span>tree<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>后序遍历</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">countLeaf</span><span class="token punctuation">(</span>node<span class="token operator">*</span>tree<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token function">countLeaf</span><span class="token punctuation">(</span>tree<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">countLeaf</span><span class="token punctuation">(</span>tree<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token operator">-></span>rchild<span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token operator">&amp;&amp;</span>tree<span class="token operator">-></span>lchild<span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> l<span class="token operator">+</span>r<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>中序遍历</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">countLeaf</span><span class="token punctuation">(</span>node<span class="token operator">*</span>tree<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token function">countLeaf</span><span class="token punctuation">(</span>tree<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token operator">-></span>rchild<span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token operator">&amp;&amp;</span>tree<span class="token operator">-></span>lchild<span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">countLeaf</span><span class="token punctuation">(</span>tree<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> l<span class="token operator">+</span>r<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<hr />
<p>ok，到这里二叉树的基本操作介绍完毕。大家有兴趣可以去查阅一些其他资料。接下来，将会介绍一些二叉树的应用。二叉搜索、哈夫曼编码等等，这些应用在日常中无处不在，值得我们去学习怎么样使用。</p>
<p>理论必须结合实践，要不然就是空谈了，希望大家把重心放在实践上。</p>
<h1 id="引用"><a class="markdownIt-Anchor" href="#引用"></a> 引用</h1>
<ul>
<li><a href="https://www.bilibili.com/video/BV1nJ411V7bd">b站青岛大学-王卓老师</a></li>
<li>CPP primer</li>
</ul>
<h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 完整代码</h1>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">node</span><span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">char</span> data<span class="token punctuation">;</span>
    node <span class="token operator">*</span> lchild<span class="token punctuation">;</span>
    node <span class="token operator">*</span> rchild<span class="token punctuation">;</span>
    <span class="token function">node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token keyword">default</span><span class="token punctuation">;</span>
    <span class="token function">node</span><span class="token punctuation">(</span><span class="token keyword">char</span> d<span class="token punctuation">)</span><span class="token operator">:</span>data<span class="token punctuation">&#123;</span>d<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>
        lchild <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
        rchild <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">foreachPreOrder</span><span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token operator">&amp;</span>tree<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>
    cout<span class="token operator">&lt;&lt;</span>tree<span class="token operator">-></span>data<span class="token punctuation">;</span>
    <span class="token function">foreachPreOrder</span><span class="token punctuation">(</span>tree<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">foreachPreOrder</span><span class="token punctuation">(</span>tree<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">foreachFloor</span><span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token operator">&amp;</span>tree<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    queue<span class="token operator">&lt;</span>node<span class="token operator">*</span><span class="token operator">></span> q<span class="token punctuation">;</span>
    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        node<span class="token operator">*</span> top <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>top<span class="token operator">-></span>lchild<span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>top<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>top<span class="token operator">-></span>rchild<span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>top<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cout<span class="token operator">&lt;&lt;</span>top<span class="token operator">-></span>data<span class="token punctuation">;</span>
        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

string expression <span class="token operator">=</span> <span class="token string">"ABC##DE#G##F##"</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> cnt<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>


<span class="token keyword">void</span> <span class="token function">createTree</span><span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token operator">&amp;</span>tree<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token operator">==</span>expression<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>expression<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'#'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        cnt<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        tree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">node</span><span class="token punctuation">(</span>expression<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cnt<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token function">createTree</span><span class="token punctuation">(</span>tree<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">createTree</span><span class="token punctuation">(</span>tree<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">clean</span><span class="token punctuation">(</span>node<span class="token operator">*</span> <span class="token operator">&amp;</span>tree<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>

    <span class="token function">clean</span><span class="token punctuation">(</span>tree<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">clean</span><span class="token punctuation">(</span>tree<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">delete</span> tree<span class="token punctuation">;</span>
    tree <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">copy</span><span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token operator">&amp;</span> tree<span class="token punctuation">,</span>node<span class="token operator">*</span><span class="token operator">&amp;</span>viceTree<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>
    viceTree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">node</span><span class="token punctuation">(</span>tree<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">copy</span><span class="token punctuation">(</span>tree<span class="token operator">-></span>lchild<span class="token punctuation">,</span>viceTree<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">copy</span><span class="token punctuation">(</span>tree<span class="token operator">-></span>rchild<span class="token punctuation">,</span>viceTree<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">countDeepth</span><span class="token punctuation">(</span>node<span class="token operator">*</span>tree<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> lDeepth <span class="token operator">=</span> <span class="token function">countDeepth</span><span class="token punctuation">(</span>tree<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> rDeepth <span class="token operator">=</span> <span class="token function">countDeepth</span><span class="token punctuation">(</span>tree<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>lDeepth<span class="token punctuation">,</span>rDeepth<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">countLeaf</span><span class="token punctuation">(</span>node<span class="token operator">*</span>tree<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token function">countLeaf</span><span class="token punctuation">(</span>tree<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token operator">-></span>rchild<span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token operator">&amp;&amp;</span>tree<span class="token operator">-></span>lchild<span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">countLeaf</span><span class="token punctuation">(</span>tree<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> l<span class="token operator">+</span>r<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    node <span class="token operator">*</span>root<span class="token punctuation">;</span>
    <span class="token function">createTree</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>

    cout<span class="token operator">&lt;&lt;</span> <span class="token function">countLeaf</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>CS</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>skynet源码学习（粗略版）</title>
    <url>/learning/openProject/skynet/skynet-02/</url>
    <content><![CDATA[<p>本文从skynet的main入口开始，梳理skynet运行流程，中间很多东西不会解释，必要的一些细节还是会解释滴，旨在梳理清楚skynet如何工作、启动skynet项目，发生了什么？后续将带着以下问题开始。</p>
<ul>
<li>skynet服务如何工作？skynet服务是什么？</li>
<li>服务之间如何传递信息？</li>
<li>一个服务如何启动？</li>
</ul>
<p>btw，本文需要有一定的c语言基础、lua基础以及较为重要的lua与c交互的相关知识。</p>
<h2 id="main入口"><a class="markdownIt-Anchor" href="#main入口"></a> main入口</h2>
<p>main函数首先，检测了配置文件，配置节点，TSD，初始化skynet环境，设置信号量。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">lua_State</span> <span class="token operator">*</span>L <span class="token operator">=</span> <span class="token function">luaL_newstate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">luaL_openlibs</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// link lua lib</span>
<span class="token keyword">int</span> err <span class="token operator">=</span>  <span class="token function">luaL_loadbufferx</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> load_config<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>load_config<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=[skynet config]"</span><span class="token punctuation">,</span> <span class="token string">"t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assert</span><span class="token punctuation">(</span>err <span class="token operator">==</span> LUA_OK<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">lua_pushstring</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> config_file<span class="token punctuation">)</span><span class="token punctuation">;</span>
err <span class="token operator">=</span> <span class="token function">lua_pcall</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span><span class="token function">lua_tostring</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">lua_close</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">_init_env</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>
config<span class="token punctuation">.</span>thread <span class="token operator">=</span>  <span class="token function">optint</span><span class="token punctuation">(</span><span class="token string">"thread"</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
config<span class="token punctuation">.</span>module_path <span class="token operator">=</span> <span class="token function">optstring</span><span class="token punctuation">(</span><span class="token string">"cpath"</span><span class="token punctuation">,</span><span class="token string">"./cservice/?.so"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
config<span class="token punctuation">.</span>harbor <span class="token operator">=</span> <span class="token function">optint</span><span class="token punctuation">(</span><span class="token string">"harbor"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
config<span class="token punctuation">.</span>bootstrap <span class="token operator">=</span> <span class="token function">optstring</span><span class="token punctuation">(</span><span class="token string">"bootstrap"</span><span class="token punctuation">,</span><span class="token string">"snlua bootstrap"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
config<span class="token punctuation">.</span>daemon <span class="token operator">=</span> <span class="token function">optstring</span><span class="token punctuation">(</span><span class="token string">"daemon"</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
config<span class="token punctuation">.</span>logger <span class="token operator">=</span> <span class="token function">optstring</span><span class="token punctuation">(</span><span class="token string">"logger"</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
config<span class="token punctuation">.</span>logservice <span class="token operator">=</span> <span class="token function">optstring</span><span class="token punctuation">(</span><span class="token string">"logservice"</span><span class="token punctuation">,</span> <span class="token string">"logger"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
config<span class="token punctuation">.</span>profile <span class="token operator">=</span> <span class="token function">optboolean</span><span class="token punctuation">(</span><span class="token string">"profile"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token function">lua_close</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>main中创建了一个lua栈，把配置文件的内容压入栈里，通过lua脚本，设置到skynet环境中。</p>
 <pre class="line-numbers language-c" data-language="c"><code class="language-c">#加载config的lua脚本
 <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> load_config <span class="token operator">=</span> <span class="token string">"\
	local result = &#123;&#125;\n\
	local function getenv(name) return assert(os.getenv(name), [[os.getenv() failed: ]] .. name) end\n\
	local sep = package.config:sub(1,1)\n\
	local current_path = [[.]]..sep\n\
	local function include(filename)\n\
		local last_path = current_path\n\
		local path, name = filename:match([[(.*]]..sep..[[)(.*)$]])\n\
		if path then\n\
			if path:sub(1,1) == sep then	-- root\n\
				current_path = path\n\
			else\n\
				current_path = current_path .. path\n\
			end\n\
		else\n\
			name = filename\n\
		end\n\
		local f = assert(io.open(current_path .. name))\n\
		local code = assert(f:read [[*a]])\n\
		code = string.gsub(code, [[%$([%w_%d]+)]], getenv)\n\
		f:close()\n\
		assert(load(code,[[@]]..filename,[[t]],result))()\n\
		current_path = last_path\n\
	end\n\
	setmetatable(result, &#123; __index = &#123; include = include &#125; &#125;)\n\
	local config_name = ...\n\
	include(config_name)\n\
	setmetatable(result, nil)\n\
	return result\n\
"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>后续就可以通过skynet环境读取到配置文件的信息啦。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">config<span class="token punctuation">.</span>thread <span class="token operator">=</span>  <span class="token function">optint</span><span class="token punctuation">(</span><span class="token string">"thread"</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
config<span class="token punctuation">.</span>module_path <span class="token operator">=</span> <span class="token function">optstring</span><span class="token punctuation">(</span><span class="token string">"cpath"</span><span class="token punctuation">,</span><span class="token string">"./cservice/?.so"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
config<span class="token punctuation">.</span>harbor <span class="token operator">=</span> <span class="token function">optint</span><span class="token punctuation">(</span><span class="token string">"harbor"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
config<span class="token punctuation">.</span>bootstrap <span class="token operator">=</span> <span class="token function">optstring</span><span class="token punctuation">(</span><span class="token string">"bootstrap"</span><span class="token punctuation">,</span><span class="token string">"snlua bootstrap"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
config<span class="token punctuation">.</span>daemon <span class="token operator">=</span> <span class="token function">optstring</span><span class="token punctuation">(</span><span class="token string">"daemon"</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
config<span class="token punctuation">.</span>logger <span class="token operator">=</span> <span class="token function">optstring</span><span class="token punctuation">(</span><span class="token string">"logger"</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
config<span class="token punctuation">.</span>logservice <span class="token operator">=</span> <span class="token function">optstring</span><span class="token punctuation">(</span><span class="token string">"logservice"</span><span class="token punctuation">,</span> <span class="token string">"logger"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
config<span class="token punctuation">.</span>profile <span class="token operator">=</span> <span class="token function">optboolean</span><span class="token punctuation">(</span><span class="token string">"profile"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们拿<code>config.thread =  optint(&quot;thread&quot;,8);</code>举例，后面optstring都是类似的。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">int</span>
<span class="token function">optint</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>key<span class="token punctuation">,</span> <span class="token keyword">int</span> opt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> str <span class="token operator">=</span> <span class="token function">skynet_getenv</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//如果配置文件没有配置这个key，就用默认的参数，在optint("thread",8)中就是8.</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">char</span> tmp<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token function">sprintf</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span><span class="token string">"%d"</span><span class="token punctuation">,</span>opt<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">skynet_setenv</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//把默认的参数写入skynet环境中。</span>
		<span class="token keyword">return</span> opt<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token function">strtol</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//配置文件中有key的配置，把字符串转int值返回。</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>加载完配置文件后，会关闭临时用的lua栈，然后来到最重要的环节----根据配置，启动skynet。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">skynet_start</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// &lt;==我们主要通过这个，就可以知道skynet的启动流程了</span>
<span class="token function">skynet_globalexit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="启动流程"><a class="markdownIt-Anchor" href="#启动流程"></a> 启动流程</h2>
<p><code>skynet_start</code>中，首先也注册了信号量，紧接着检测是否设置为守护进程。</p>
<p>后面的部分，才是我们主要分析的地方。<br />
这个函数首先进行了节点、handle、消息队列、模块、定时器、socket的初始化以及开启性能分析。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">skynet_harbor_init</span><span class="token punctuation">(</span>config<span class="token operator">-></span>harbor<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">skynet_handle_init</span><span class="token punctuation">(</span>config<span class="token operator">-></span>harbor<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">skynet_mq_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">skynet_module_init</span><span class="token punctuation">(</span>config<span class="token operator">-></span>module_path<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">skynet_timer_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">skynet_socket_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">skynet_profile_enable</span><span class="token punctuation">(</span>config<span class="token operator">-></span>profile<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们知道skynet中服务地址的构成。高八位是节点地址，低24位是服务地址。<br />
<img data-src="https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go@master/img/Pasted%20image%2020230604183714.png" alt="Pasted image 20230604183714" /></p>
<p>而<code>skynet_harbor_init</code>仅仅只做了一件事，把高8位设置为配置文件的节点号。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span>
<span class="token function">skynet_harbor_init</span><span class="token punctuation">(</span><span class="token keyword">int</span> harbor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	HARBOR <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>harbor <span class="token operator">&lt;&lt;</span> HANDLE_REMOTE_SHIFT<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>在<code>skynet_handle_init</code>中主要为了，初始化一张全局handle操作的<code>地址表H</code>。<br />
<code>skynet_mq_init</code>中创建一个全局队列。<br />
<code>skynet_module_init</code>中创建了一个全局模块表，这样可以避免模块重复加载等等。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">modules</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> count<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">spinlock</span> lock<span class="token punctuation">;</span>
	<span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> path<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">skynet_module</span> m<span class="token punctuation">[</span>MAX_MODULE_TYPE<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>skynet_timer_init</code>中创建了一个全局定时器，用于更新时间。<br />
<code>skynet_socket_init</code>中根据定时器提供的当前时间创建了一个socket_server，用与管理socket相关操作。</p>
<hr />
<p>接下来skynet启动了第一个服务——日志服务。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">skynet_context</span> <span class="token operator">*</span>ctx <span class="token operator">=</span> <span class="token function">skynet_context_new</span><span class="token punctuation">(</span>config<span class="token operator">-></span>logservice<span class="token punctuation">,</span> config<span class="token operator">-></span>logger<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>ctx <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Can't launch %s service\n"</span><span class="token punctuation">,</span> config<span class="token operator">-></span>logservice<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">skynet_handle_namehandle</span><span class="token punctuation">(</span><span class="token function">skynet_context_handle</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"logger"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们主要分析skynet_context_new这个函数，而skynet_handle_namehandle函数非常简单，它的作用是给服务起个名字，并插入到handle全局表H中，这里不过多展开了。</p>
<p>skynet_context_new函数首先会查询服务的模块名。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">skynet_module</span> <span class="token operator">*</span> mod <span class="token operator">=</span> <span class="token function">skynet_module_query</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>mod <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token comment">//skynet_module_query</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里需要分析一下mod 查询函数</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">skynet_module</span> <span class="token operator">*</span> 
<span class="token function">skynet_module_query</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// _query会去全局模块表M中找，看之前是否打开过该模块。如果打开过直接返回。</span>
	<span class="token keyword">struct</span> <span class="token class-name">skynet_module</span> <span class="token operator">*</span> result <span class="token operator">=</span> <span class="token function">_query</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span>
		<span class="token keyword">return</span> result<span class="token punctuation">;</span>

	<span class="token function">SPIN_LOCK</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span>

	result <span class="token operator">=</span> <span class="token function">_query</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// double check</span>
	<span class="token comment">//如果之前没有打开过，会去设置的模块路径中查找对应的模块，进行打开。</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> M<span class="token operator">-></span>count <span class="token operator">&lt;</span> MAX_MODULE_TYPE<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> index <span class="token operator">=</span> M<span class="token operator">-></span>count<span class="token punctuation">;</span>
		<span class="token keyword">void</span> <span class="token operator">*</span> dl <span class="token operator">=</span> <span class="token function">_try_open</span><span class="token punctuation">(</span>M<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>dl<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			M<span class="token operator">-></span>m<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
			M<span class="token operator">-></span>m<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>module <span class="token operator">=</span> dl<span class="token punctuation">;</span>

			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">open_sym</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>M<span class="token operator">-></span>m<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				M<span class="token operator">-></span>m<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token function">skynet_strdup</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
				M<span class="token operator">-></span>count <span class="token operator">++</span><span class="token punctuation">;</span>
				result <span class="token operator">=</span> <span class="token operator">&amp;</span>M<span class="token operator">-></span>m<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">SPIN_UNLOCK</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span>
	<span class="token comment">//打开成功返回skynet_module*，否则是NULL</span>
	<span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>模块打开后，会对模块实例化。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token operator">*</span>inst <span class="token operator">=</span> <span class="token function">skynet_module_instance_create</span><span class="token punctuation">(</span>mod<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>inst <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">skynet_context</span> <span class="token operator">*</span> ctx <span class="token operator">=</span> <span class="token function">skynet_malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>ctx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>实例化会调用模块中的回调函数。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token operator">*</span> 
<span class="token function">skynet_module_instance_create</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">skynet_module</span> <span class="token operator">*</span>m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token operator">-></span>create<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> m<span class="token operator">-></span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">intptr_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里有一个问题，这个回调函数<code>m-&gt;create()</code>怎么来的。<br />
这个回调函数的绑定是在查询阶段调用<code>open_sym</code>函数实现的。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token operator">*</span>
<span class="token function">get_api</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">skynet_module</span> <span class="token operator">*</span>mod<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>api_name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token class-name">size_t</span> name_size <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>mod<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">size_t</span> api_size <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>api_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> tmp<span class="token punctuation">[</span>name_size <span class="token operator">+</span> api_size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token function">memcpy</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> mod<span class="token operator">-></span>name<span class="token punctuation">,</span> name_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">memcpy</span><span class="token punctuation">(</span>tmp<span class="token operator">+</span>name_size<span class="token punctuation">,</span> api_name<span class="token punctuation">,</span> api_size<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>ptr <span class="token operator">=</span> <span class="token function">strrchr</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> <span class="token char">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>ptr <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		ptr <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
		ptr <span class="token operator">=</span> ptr <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token function">dlsym</span><span class="token punctuation">(</span>mod<span class="token operator">-></span>module<span class="token punctuation">,</span> ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">static</span> <span class="token keyword">int</span>
<span class="token function">open_sym</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">skynet_module</span> <span class="token operator">*</span>mod<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	mod<span class="token operator">-></span>create <span class="token operator">=</span> <span class="token function">get_api</span><span class="token punctuation">(</span>mod<span class="token punctuation">,</span> <span class="token string">"_create"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	mod<span class="token operator">-></span>init <span class="token operator">=</span> <span class="token function">get_api</span><span class="token punctuation">(</span>mod<span class="token punctuation">,</span> <span class="token string">"_init"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	mod<span class="token operator">-></span>release <span class="token operator">=</span> <span class="token function">get_api</span><span class="token punctuation">(</span>mod<span class="token punctuation">,</span> <span class="token string">"_release"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	mod<span class="token operator">-></span>signal <span class="token operator">=</span> <span class="token function">get_api</span><span class="token punctuation">(</span>mod<span class="token punctuation">,</span> <span class="token string">"_signal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> mod<span class="token operator">-></span>init <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>接着回到服务的创建函数，下面都是对服务的初始化。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">ctx<span class="token operator">-></span>mod <span class="token operator">=</span> mod<span class="token punctuation">;</span>
ctx<span class="token operator">-></span>instance <span class="token operator">=</span> inst<span class="token punctuation">;</span>
<span class="token function">ATOM_INIT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ctx<span class="token operator">-></span>ref <span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ctx<span class="token operator">-></span>cb <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
ctx<span class="token operator">-></span>cb_ud <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
ctx<span class="token operator">-></span>session_id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token function">ATOM_INIT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ctx<span class="token operator">-></span>logfile<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uintptr_t</span><span class="token punctuation">)</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

ctx<span class="token operator">-></span>init <span class="token operator">=</span> false<span class="token punctuation">;</span>
ctx<span class="token operator">-></span>endless <span class="token operator">=</span> false<span class="token punctuation">;</span>

ctx<span class="token operator">-></span>cpu_cost <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
ctx<span class="token operator">-></span>cpu_start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
ctx<span class="token operator">-></span>message_count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
ctx<span class="token operator">-></span>profile <span class="token operator">=</span> G_NODE<span class="token punctuation">.</span>profile<span class="token punctuation">;</span>
<span class="token comment">// Should set to 0 first to avoid skynet_handle_retireall get an uninitialized handle</span>
ctx<span class="token operator">-></span>handle <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>	
ctx<span class="token operator">-></span>handle <span class="token operator">=</span> <span class="token function">skynet_handle_register</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//注册一个handle地址</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>紧接着重点来了，服务创建了一个消息队列，并调用模块的初始化函数，对其进行初始化，如果初始化成功，就把这个服务的消息队列推入skynet的全局中并返回ctx，否则创建服务失败，释放相关资源。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">message_queue</span> <span class="token operator">*</span> queue <span class="token operator">=</span> ctx<span class="token operator">-></span>queue <span class="token operator">=</span> <span class="token function">skynet_mq_create</span><span class="token punctuation">(</span>ctx<span class="token operator">-></span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// init function maybe use ctx->handle, so it must init at last</span>
<span class="token function">context_inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">CHECKCALLING_BEGIN</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
<span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">skynet_module_instance_init</span><span class="token punctuation">(</span>mod<span class="token punctuation">,</span> inst<span class="token punctuation">,</span> ctx<span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">CHECKCALLING_END</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">skynet_context</span> <span class="token operator">*</span> ret <span class="token operator">=</span> <span class="token function">skynet_context_release</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		ctx<span class="token operator">-></span>init <span class="token operator">=</span> true<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">skynet_globalmq_push</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token function">skynet_error</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span> <span class="token string">"LAUNCH %s %s"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> param <span class="token operator">?</span> param <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
	<span class="token function">skynet_error</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">"FAILED launch %s"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">uint32_t</span> handle <span class="token operator">=</span> ctx<span class="token operator">-></span>handle<span class="token punctuation">;</span>
	<span class="token function">skynet_context_release</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">skynet_handle_retire</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">drop_t</span> d <span class="token operator">=</span> <span class="token punctuation">&#123;</span> handle <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token function">skynet_mq_release</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> drop_message<span class="token punctuation">,</span> <span class="token operator">&amp;</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里的函数都不难理解，就不做展开了。</p>
<p>到这里一个服务就创建好了，可以得到结论，服务其实就是一个<code>skynet_context</code>结构体。</p>
<hr />
<p>接下来到了<code>bootstrap(ctx, config-&gt;bootstrap);</code>这步，这步的作用是启动的服务，这行代码，连接lua层，比较难，放到最后再说，不妨先理解为启动其他服务。</p>
<h2 id="线程创建"><a class="markdownIt-Anchor" href="#线程创建"></a> 线程创建</h2>
<p>在各个服务都创建好后，到了<code>start(config-&gt;thread);</code>，就开始创建服务的处理线程了。<br />
这里要先用几个图解释一下。<br />
当服务创建好后，它的消息队列会push到skynet全局队列GQ中。<br />
而服务本身有一个skynet_message队列，这个队列是存放其他服务发的消息的。<br />
<img data-src="https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go@master/img/Pasted%20image%2020230604194028.png" alt="Pasted image 20230604194028" /><br />
全局队列中的每个消息队列对应一个服务，而其他服务发送需要处理的消息在消息队列中的skynet_message队列中。需要注意的是，全局队列是链表的形式，而skynet_message队列是数组循环队列。</p>
<p><code>start(config-&gt;thread);</code>会创建很多工作线程，这些工作线程从GQ中，抢消息队列，如果消息队列中有消息，就用消息队列对应服务的回调函数处理这条消息。</p>
<p><img data-src="https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go@master/img/Pasted%20image%2020230604194804.png" alt="Pasted image 20230604194804" /></p>
<p>下面开始从源码分析这些线程是怎么创建与工作的。<br />
在创建这些工作线程之前，先创建了监视器、定时器、socket三个线程，而监视器线程中有与工作线程数量对应的skynet_monitor监视器。<br />
这里的在创建定时器和socket线程时也传入了监视器实例，主要目的是为了通过监视器实例来控制工作线程。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">pthread_t</span> pid<span class="token punctuation">[</span>thread<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">monitor</span> <span class="token operator">*</span>m <span class="token operator">=</span> <span class="token function">skynet_malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">memset</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
m<span class="token operator">-></span>count <span class="token operator">=</span> thread<span class="token punctuation">;</span>
m<span class="token operator">-></span>sleep <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

m<span class="token operator">-></span>m <span class="token operator">=</span> <span class="token function">skynet_malloc</span><span class="token punctuation">(</span>thread <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">skynet_monitor</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> i<span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>thread<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	m<span class="token operator">-></span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">skynet_monitor_new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">pthread_mutex_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token operator">-></span>mutex<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Init mutex error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">pthread_cond_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token operator">-></span>cond<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Init cond error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">create_thread</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> thread_monitor<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">create_thread</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pid<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> thread_timer<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">create_thread</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pid<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> thread_socket<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>而后才创建了工作线程，在创建工作线程时，对每个线程附加了权重还传入了对应的skynet_monitor监视器。这个权重稍后解释。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">int</span> weight<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> 
	<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>
	<span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> 
	<span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> 
	<span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">worker_parm</span> wp<span class="token punctuation">[</span>thread<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>thread<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	wp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>m <span class="token operator">=</span> m<span class="token punctuation">;</span>
	wp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">=</span> i<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>weight<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>weight<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		wp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>weight<span class="token operator">=</span> weight<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
		wp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>weight <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">create_thread</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pid<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> thread_worker<span class="token punctuation">,</span> <span class="token operator">&amp;</span>wp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>thread<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">pthread_join</span><span class="token punctuation">(</span>pid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>不妨看看<code>thread_worker</code>做了什么。</p>
<p>首先通过获取权重，并通过全局监视器获取skynet_monitor监视器。当监视器没有离开时，重复循环。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token operator">*</span>
<span class="token function">thread_worker</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">worker_parm</span> <span class="token operator">*</span>wp <span class="token operator">=</span> p<span class="token punctuation">;</span>
	<span class="token keyword">int</span> id <span class="token operator">=</span> wp<span class="token operator">-></span>id<span class="token punctuation">;</span>
	<span class="token keyword">int</span> weight <span class="token operator">=</span> wp<span class="token operator">-></span>weight<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">monitor</span> <span class="token operator">*</span>m <span class="token operator">=</span> wp<span class="token operator">-></span>m<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">skynet_monitor</span> <span class="token operator">*</span>sm <span class="token operator">=</span> m<span class="token operator">-></span>m<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token function">skynet_initthread</span><span class="token punctuation">(</span>THREAD_WORKER<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">message_queue</span> <span class="token operator">*</span> q <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>m<span class="token operator">-></span>quit<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		q <span class="token operator">=</span> <span class="token function">skynet_context_message_dispatch</span><span class="token punctuation">(</span>sm<span class="token punctuation">,</span> q<span class="token punctuation">,</span> weight<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>q <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token operator">-></span>mutex<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				<span class="token operator">++</span> m<span class="token operator">-></span>sleep<span class="token punctuation">;</span>
				<span class="token comment">// "spurious wakeup" is harmless,</span>
				<span class="token comment">// because skynet_context_message_dispatch() can be call at any time.</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>m<span class="token operator">-></span>quit<span class="token punctuation">)</span>
					<span class="token function">pthread_cond_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token operator">-></span>cond<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token operator">-></span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token operator">--</span> m<span class="token operator">-></span>sleep<span class="token punctuation">;</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token operator">-></span>mutex<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
					<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"unlock mutex error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">&#125;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中<code>skynet_context_message_dispatch</code>函数是关键。</p>
<p>这个函数首先从全局队列GQ中获取消息队列。然后从消息队列中获取handle，再从handle中获取到服务上下文。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span>q <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	q <span class="token operator">=</span> <span class="token function">skynet_globalmq_pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token class-name">uint32_t</span> handle <span class="token operator">=</span> <span class="token function">skynet_mq_handle</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">skynet_context</span> <span class="token operator">*</span> ctx <span class="token operator">=</span> <span class="token function">skynet_handle_grab</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>ctx <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">drop_t</span> d <span class="token operator">=</span> <span class="token punctuation">&#123;</span> handle <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token function">skynet_mq_release</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> drop_message<span class="token punctuation">,</span> <span class="token operator">&amp;</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token function">skynet_globalmq_pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>之后就是对消息队列中skynet_message队列进行处理，这里可以知道，权重的作用。</p>
<table>
<thead>
<tr>
<th>权重</th>
<th>消息处理数量</th>
</tr>
</thead>
<tbody>
<tr>
<td>-1</td>
<td>1条</td>
</tr>
<tr>
<td>0</td>
<td>全部消息</td>
</tr>
<tr>
<td>1</td>
<td>一半消息</td>
</tr>
<tr>
<td>2</td>
<td>1/4消息</td>
</tr>
<tr>
<td>3</td>
<td>1/8消息</td>
</tr>
</tbody>
</table>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> i<span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">skynet_message</span> msg<span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">skynet_mq_pop</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span><span class="token operator">&amp;</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token function">skynet_context_release</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token function">skynet_globalmq_pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> weight <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		n <span class="token operator">=</span> <span class="token function">skynet_mq_length</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
		n <span class="token operator">>>=</span> weight<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">int</span> overload <span class="token operator">=</span> <span class="token function">skynet_mq_overload</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>overload<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token function">skynet_error</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">"May overload, message queue length = %d"</span><span class="token punctuation">,</span> overload<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">skynet_monitor_trigger</span><span class="token punctuation">(</span>sm<span class="token punctuation">,</span> msg<span class="token punctuation">.</span>source <span class="token punctuation">,</span> handle<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>ctx<span class="token operator">-></span>cb <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token function">skynet_free</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
		<span class="token function">dispatch_message</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">skynet_monitor_trigger</span><span class="token punctuation">(</span>sm<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里的监视器触发函数<code>skynet_monitor_trigger</code>，主要是为了防止服务死循环。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> 
<span class="token function">skynet_monitor_trigger</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">skynet_monitor</span> <span class="token operator">*</span>sm<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> source<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> destination<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	sm<span class="token operator">-></span>source <span class="token operator">=</span> source<span class="token punctuation">;</span>
	sm<span class="token operator">-></span>destination <span class="token operator">=</span> destination<span class="token punctuation">;</span>
	<span class="token function">ATOM_FINC</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sm<span class="token operator">-></span>version<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> 
<span class="token function">skynet_monitor_check</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">skynet_monitor</span> <span class="token operator">*</span>sm<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>sm<span class="token operator">-></span>version <span class="token operator">==</span> sm<span class="token operator">-></span>check_version<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>sm<span class="token operator">-></span>destination<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token function">skynet_context_endless</span><span class="token punctuation">(</span>sm<span class="token operator">-></span>destination<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">skynet_error</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">"A message from [ :%08x ] to [ :%08x ] maybe in an endless loop (version = %d)"</span><span class="token punctuation">,</span> sm<span class="token operator">-></span>source <span class="token punctuation">,</span> sm<span class="token operator">-></span>destination<span class="token punctuation">,</span> sm<span class="token operator">-></span>version<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
		sm<span class="token operator">-></span>check_version <span class="token operator">=</span> sm<span class="token operator">-></span>version<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在监视器线程中，会不断检查工作线程的<code>skynet_monitor</code>。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token operator">*</span>
<span class="token function">thread_monitor</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">monitor</span> <span class="token operator">*</span> m <span class="token operator">=</span> p<span class="token punctuation">;</span>
	<span class="token keyword">int</span> i<span class="token punctuation">;</span>
	<span class="token keyword">int</span> n <span class="token operator">=</span> m<span class="token operator">-></span>count<span class="token punctuation">;</span>
	<span class="token function">skynet_initthread</span><span class="token punctuation">(</span>THREAD_MONITOR<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		CHECK_ABORT
		<span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token function">skynet_monitor_check</span><span class="token punctuation">(</span>m<span class="token operator">-></span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			CHECK_ABORT
			<span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>再次回到工作线程中的<code>skynet_context_message_dispatch</code>函数，在服务有注册回调函数时，会调用<code>dispatch_message</code>进行处理，而这个函数会调用服务的回调进行消息处理。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span>
<span class="token function">dispatch_message</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">skynet_context</span> <span class="token operator">*</span>ctx<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">skynet_message</span> <span class="token operator">*</span>msg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">assert</span><span class="token punctuation">(</span>ctx<span class="token operator">-></span>init<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">CHECKCALLING_BEGIN</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
	<span class="token function">pthread_setspecific</span><span class="token punctuation">(</span>G_NODE<span class="token punctuation">.</span>handle_key<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">uintptr_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span>ctx<span class="token operator">-></span>handle<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> type <span class="token operator">=</span> msg<span class="token operator">-></span>sz <span class="token operator">>></span> MESSAGE_TYPE_SHIFT<span class="token punctuation">;</span>
	<span class="token class-name">size_t</span> sz <span class="token operator">=</span> msg<span class="token operator">-></span>sz <span class="token operator">&amp;</span> MESSAGE_TYPE_MASK<span class="token punctuation">;</span>
	FILE <span class="token operator">*</span>f <span class="token operator">=</span> <span class="token punctuation">(</span>FILE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">ATOM_LOAD</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ctx<span class="token operator">-></span>logfile<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token function">skynet_log_output</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> msg<span class="token operator">-></span>source<span class="token punctuation">,</span> type<span class="token punctuation">,</span> msg<span class="token operator">-></span>session<span class="token punctuation">,</span> msg<span class="token operator">-></span>data<span class="token punctuation">,</span> sz<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token operator">++</span>ctx<span class="token operator">-></span>message_count<span class="token punctuation">;</span>
	<span class="token keyword">int</span> reserve_msg<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>ctx<span class="token operator">-></span>profile<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		ctx<span class="token operator">-></span>cpu_start <span class="token operator">=</span> <span class="token function">skynet_thread_time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		reserve_msg <span class="token operator">=</span> ctx<span class="token operator">-></span><span class="token function">cb</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> ctx<span class="token operator">-></span>cb_ud<span class="token punctuation">,</span> type<span class="token punctuation">,</span> msg<span class="token operator">-></span>session<span class="token punctuation">,</span> msg<span class="token operator">-></span>source<span class="token punctuation">,</span> msg<span class="token operator">-></span>data<span class="token punctuation">,</span> sz<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">uint64_t</span> cost_time <span class="token operator">=</span> <span class="token function">skynet_thread_time</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> ctx<span class="token operator">-></span>cpu_start<span class="token punctuation">;</span>
		ctx<span class="token operator">-></span>cpu_cost <span class="token operator">+=</span> cost_time<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
		reserve_msg <span class="token operator">=</span> ctx<span class="token operator">-></span><span class="token function">cb</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> ctx<span class="token operator">-></span>cb_ud<span class="token punctuation">,</span> type<span class="token punctuation">,</span> msg<span class="token operator">-></span>session<span class="token punctuation">,</span> msg<span class="token operator">-></span>source<span class="token punctuation">,</span> msg<span class="token operator">-></span>data<span class="token punctuation">,</span> sz<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>reserve_msg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token function">skynet_free</span><span class="token punctuation">(</span>msg<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">CHECKCALLING_END</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如此，服务如何运行的问题就基本解决了。就是通过这些工作线程不断从GQ中获取服务的消息队列，再调用服务注册的回调函数处理消息。</p>
<hr />
<p>让我们回到<code>bootstrap(ctx, config-&gt;bootstrap);</code>服务启动这部分。</p>
<h2 id="服务启动"><a class="markdownIt-Anchor" href="#服务启动"></a> 服务启动</h2>
<p>bootstrap函数如下，举个例子，传入的是默认参数日志服务和<code>snlua bootstrap</code></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span>
<span class="token function">bootstrap</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">skynet_context</span> <span class="token operator">*</span> logger<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> cmdline<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> sz <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>cmdline<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> name<span class="token punctuation">[</span>sz<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> args<span class="token punctuation">[</span>sz<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> arg_pos<span class="token punctuation">;</span> 
	<span class="token function">sscanf</span><span class="token punctuation">(</span>cmdline<span class="token punctuation">,</span> <span class="token string">"%s"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>  
	arg_pos <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>arg_pos <span class="token operator">&lt;</span> sz<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">while</span><span class="token punctuation">(</span>cmdline<span class="token punctuation">[</span>arg_pos<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">' '</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			arg_pos<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token function">strncpy</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> cmdline <span class="token operator">+</span> arg_pos<span class="token punctuation">,</span> sz<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
		args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">struct</span> <span class="token class-name">skynet_context</span> <span class="token operator">*</span>ctx <span class="token operator">=</span> <span class="token function">skynet_context_new</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>ctx <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token function">skynet_error</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">"Bootstrap error : %s\n"</span><span class="token punctuation">,</span> cmdline<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">skynet_context_dispatchall</span><span class="token punctuation">(</span>logger<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这个函数会执行<code>struct skynet_context *ctx = skynet_context_new(&quot;snlua&quot;, &quot;bootstrap&quot;);</code>创建一个snlua服务。<br />
snlua全名是skynet lua，它是作者自定义的lua虚拟机。<br />
创建时，会建一个lua栈，并初始化变量。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">snlua</span> <span class="token punctuation">&#123;</span>
	lua_State <span class="token operator">*</span> L<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">skynet_context</span> <span class="token operator">*</span> ctx<span class="token punctuation">;</span>
	<span class="token class-name">size_t</span> mem<span class="token punctuation">;</span>
	<span class="token class-name">size_t</span> mem_report<span class="token punctuation">;</span>
	<span class="token class-name">size_t</span> mem_limit<span class="token punctuation">;</span>
	lua_State <span class="token operator">*</span> activeL<span class="token punctuation">;</span>
	ATOM_INT trap<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">snlua</span> <span class="token operator">*</span>
<span class="token function">snlua_create</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">snlua</span> <span class="token operator">*</span> l <span class="token operator">=</span> <span class="token function">skynet_malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	l<span class="token operator">-></span>mem_report <span class="token operator">=</span> MEMORY_WARNING_REPORT<span class="token punctuation">;</span>
	l<span class="token operator">-></span>mem_limit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	l<span class="token operator">-></span>L <span class="token operator">=</span> <span class="token function">lua_newstate</span><span class="token punctuation">(</span>lalloc<span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span>
	l<span class="token operator">-></span>activeL <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token function">ATOM_INIT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>l<span class="token operator">-></span>trap <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> l<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span>

<span class="token function">snlua_init</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">snlua</span> <span class="token operator">*</span>l<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">skynet_context</span> <span class="token operator">*</span>ctx<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> sz <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span> tmp <span class="token operator">=</span> <span class="token function">skynet_malloc</span><span class="token punctuation">(</span>sz<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">memcpy</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> args<span class="token punctuation">,</span> sz<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">skynet_callback</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> l <span class="token punctuation">,</span> launch_cb<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> self <span class="token operator">=</span> <span class="token function">skynet_command</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">"REG"</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">uint32_t</span> handle_id <span class="token operator">=</span> <span class="token function">strtoul</span><span class="token punctuation">(</span>self<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// it must be first message</span>
	<span class="token function">skynet_send</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> handle_id<span class="token punctuation">,</span> PTYPE_TAG_DONTCOPY<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> tmp<span class="token punctuation">,</span> sz<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这个服务的重点在于初始化操作，它首先通过<code>skynet_callback</code>函数设置了自己的回调函数为<code>launch_cb</code>，还拿具体例子，这个参数是默认参数&quot;bootstrap&quot;。<br />
<code>const char * self = skynet_command(ctx, &quot;REG&quot;, NULL);</code>这段代码如果最后的参数会NULL或<code>\0</code>返回服务的handle，如果<code>.name</code>则给服务注册名字。<br />
而<code>uint32_t handle_id = strtoul(self+1, NULL, 16);</code>这里的<code>self+1</code>是因为self是16进制字符串，第一位是<code>:</code>。<br />
最后向自己发一条消息，让工作线程去处理它。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">command_func</span> cmd_funcs<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
	<span class="token punctuation">&#123;</span> <span class="token string">"TIMEOUT"</span><span class="token punctuation">,</span> cmd_timeout <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#123;</span> <span class="token string">"REG"</span><span class="token punctuation">,</span> cmd_reg <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#123;</span> <span class="token string">"QUERY"</span><span class="token punctuation">,</span> cmd_query <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#123;</span> <span class="token string">"NAME"</span><span class="token punctuation">,</span> cmd_name <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#123;</span> <span class="token string">"EXIT"</span><span class="token punctuation">,</span> cmd_exit <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#123;</span> <span class="token string">"KILL"</span><span class="token punctuation">,</span> cmd_kill <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#123;</span> <span class="token string">"LAUNCH"</span><span class="token punctuation">,</span> cmd_launch <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#123;</span> <span class="token string">"GETENV"</span><span class="token punctuation">,</span> cmd_getenv <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#123;</span> <span class="token string">"SETENV"</span><span class="token punctuation">,</span> cmd_setenv <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#123;</span> <span class="token string">"STARTTIME"</span><span class="token punctuation">,</span> cmd_starttime <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#123;</span> <span class="token string">"ABORT"</span><span class="token punctuation">,</span> cmd_abort <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#123;</span> <span class="token string">"MONITOR"</span><span class="token punctuation">,</span> cmd_monitor <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#123;</span> <span class="token string">"STAT"</span><span class="token punctuation">,</span> cmd_stat <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#123;</span> <span class="token string">"LOGON"</span><span class="token punctuation">,</span> cmd_logon <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#123;</span> <span class="token string">"LOGOFF"</span><span class="token punctuation">,</span> cmd_logoff <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#123;</span> <span class="token string">"SIGNAL"</span><span class="token punctuation">,</span> cmd_signal <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#123;</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> 
<span class="token function">skynet_command</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">skynet_context</span> <span class="token operator">*</span> context<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> cmd <span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> param<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">command_func</span> <span class="token operator">*</span> method <span class="token operator">=</span> <span class="token operator">&amp;</span>cmd_funcs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>method<span class="token operator">-></span>name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> method<span class="token operator">-></span>name<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">return</span> method<span class="token operator">-></span><span class="token function">func</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token operator">++</span>method<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>
<span class="token function">cmd_reg</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">skynet_context</span> <span class="token operator">*</span> context<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> param<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>param <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> param<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'\0'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token function">sprintf</span><span class="token punctuation">(</span>context<span class="token operator">-></span>result<span class="token punctuation">,</span> <span class="token string">":%x"</span><span class="token punctuation">,</span> context<span class="token operator">-></span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> context<span class="token operator">-></span>result<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>param<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'.'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token function">skynet_handle_namehandle</span><span class="token punctuation">(</span>context<span class="token operator">-></span>handle<span class="token punctuation">,</span> param <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
		<span class="token function">skynet_error</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token string">"Can't register global name %s in C"</span><span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当工作线程拿到这条信息时，就会回调<code>launch_cb</code>函数，这里有把snlua服务的回调函数设置为NULL了，这是因为snlua只进行一次运行初始化即可，这里设置为NULL，可以保护服务初始化，而后续会把回调设置成其他。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">int</span>
<span class="token function">launch_cb</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">skynet_context</span> <span class="token operator">*</span> context<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>ud<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">,</span> <span class="token keyword">int</span> session<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> source <span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span> msg<span class="token punctuation">,</span> <span class="token class-name">size_t</span> sz<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">assert</span><span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> session <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">snlua</span> <span class="token operator">*</span>l <span class="token operator">=</span> ud<span class="token punctuation">;</span>
	<span class="token function">skynet_callback</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> err <span class="token operator">=</span> <span class="token function">init_cb</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> context<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> sz<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token function">skynet_command</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token string">"EXIT"</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>继续调用<code>init_cb</code>，这是snlua的核心，它通过lua与c的交互，设置了环境，为了统计时间，重置了协程函数，同时设置了lua寻找模块的路径。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">int</span>
<span class="token function">init_cb</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">snlua</span> <span class="token operator">*</span>l<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">skynet_context</span> <span class="token operator">*</span>ctx<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> args<span class="token punctuation">,</span> <span class="token class-name">size_t</span> sz<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	lua_State <span class="token operator">*</span>L <span class="token operator">=</span> l<span class="token operator">-></span>L<span class="token punctuation">;</span>
	l<span class="token operator">-></span>ctx <span class="token operator">=</span> ctx<span class="token punctuation">;</span>
	<span class="token function">lua_gc</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> LUA_GCSTOP<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">lua_pushboolean</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* signal for libraries to ignore env. vars. */</span>
	<span class="token function">lua_setfield</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> LUA_REGISTRYINDEX<span class="token punctuation">,</span> <span class="token string">"LUA_NOENV"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">luaL_openlibs</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">luaL_requiref</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token string">"skynet.profile"</span><span class="token punctuation">,</span> init_profile<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> profile_lib <span class="token operator">=</span> <span class="token function">lua_gettop</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// replace coroutine.resume / coroutine.wrap</span>
	<span class="token function">lua_getglobal</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token string">"coroutine"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">lua_getfield</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> profile_lib<span class="token punctuation">,</span> <span class="token string">"resume"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">lua_setfield</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"resume"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">lua_getfield</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> profile_lib<span class="token punctuation">,</span> <span class="token string">"wrap"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">lua_setfield</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"wrap"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">lua_settop</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> profile_lib<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">lua_pushlightuserdata</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">lua_setfield</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> LUA_REGISTRYINDEX<span class="token punctuation">,</span> <span class="token string">"skynet_context"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">luaL_requiref</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token string">"skynet.codecache"</span><span class="token punctuation">,</span> codecache <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">lua_pop</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">lua_gc</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> LUA_GCGEN<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>path <span class="token operator">=</span> <span class="token function">optstring</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">"lua_path"</span><span class="token punctuation">,</span><span class="token string">"./lualib/?.lua;./lualib/?/init.lua"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">lua_pushstring</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">lua_setglobal</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token string">"LUA_PATH"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>cpath <span class="token operator">=</span> <span class="token function">optstring</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">"lua_cpath"</span><span class="token punctuation">,</span><span class="token string">"./luaclib/?.so"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">lua_pushstring</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> cpath<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">lua_setglobal</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token string">"LUA_CPATH"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>service <span class="token operator">=</span> <span class="token function">optstring</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">"luaservice"</span><span class="token punctuation">,</span> <span class="token string">"./service/?.lua"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">lua_pushstring</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> service<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">lua_setglobal</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token string">"LUA_SERVICE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>preload <span class="token operator">=</span> <span class="token function">skynet_command</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">"GETENV"</span><span class="token punctuation">,</span> <span class="token string">"preload"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">lua_pushstring</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> preload<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">lua_setglobal</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token string">"LUA_PRELOAD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">lua_pushcfunction</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> traceback<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">lua_gettop</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> loader <span class="token operator">=</span> <span class="token function">optstring</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">"lualoader"</span><span class="token punctuation">,</span> <span class="token string">"./lualib/loader.lua"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">luaL_loadfile</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>loader<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">!=</span> LUA_OK<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token function">skynet_error</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">"Can't load %s : %s"</span><span class="token punctuation">,</span> loader<span class="token punctuation">,</span> <span class="token function">lua_tostring</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">report_launcher_error</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">lua_pushlstring</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> args<span class="token punctuation">,</span> sz<span class="token punctuation">)</span><span class="token punctuation">;</span>
	r <span class="token operator">=</span> <span class="token function">lua_pcall</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">!=</span> LUA_OK<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token function">skynet_error</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">"lua loader error : %s"</span><span class="token punctuation">,</span> <span class="token function">lua_tostring</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">report_launcher_error</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">lua_settop</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">lua_getfield</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> LUA_REGISTRYINDEX<span class="token punctuation">,</span> <span class="token string">"memlimit"</span><span class="token punctuation">)</span> <span class="token operator">==</span> LUA_TNUMBER<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token class-name">size_t</span> limit <span class="token operator">=</span> <span class="token function">lua_tointeger</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		l<span class="token operator">-></span>mem_limit <span class="token operator">=</span> limit<span class="token punctuation">;</span>
		<span class="token function">skynet_error</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">"Set memory limit to %.2f M"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>limit <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">lua_pushnil</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">lua_setfield</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> LUA_REGISTRYINDEX<span class="token punctuation">,</span> <span class="token string">"memlimit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">lua_pop</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">lua_gc</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> LUA_GCRESTART<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这其中最重要是下面段代码。这段代码首先加载了loader.lua这个lua服务加载器，利用这个加载器去加载lua服务。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//获取loader.lua的路径</span>
<span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> loader <span class="token operator">=</span> <span class="token function">optstring</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">"lualoader"</span><span class="token punctuation">,</span> <span class="token string">"./lualib/loader.lua"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//加载loader.lua,r是加载结果</span>
<span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">luaL_loadfile</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>loader<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">!=</span> LUA_OK<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">skynet_error</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">"Can't load %s : %s"</span><span class="token punctuation">,</span> loader<span class="token punctuation">,</span> <span class="token function">lua_tostring</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">report_launcher_error</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//把参数bootstrap压入栈中，准备传入loader中</span>
<span class="token function">lua_pushlstring</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> args<span class="token punctuation">,</span> sz<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//加载bootstrap服务。</span>
r <span class="token operator">=</span> <span class="token function">lua_pcall</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">!=</span> LUA_OK<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">skynet_error</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">"lua loader error : %s"</span><span class="token punctuation">,</span> <span class="token function">lua_tostring</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">report_launcher_error</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如下是<code>loader.lua</code>的代码，第一部分，是找到对应服务文件，并加载它。第二部分是设置lua的包寻找路径，最后调用main函数启动这个服务。</p>
<pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">local</span> args <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token keyword">for</span> word <span class="token keyword">in</span> string<span class="token punctuation">.</span><span class="token function">gmatch</span><span class="token punctuation">(</span><span class="token punctuation">...</span><span class="token punctuation">,</span> <span class="token string">"%S+"</span><span class="token punctuation">)</span> <span class="token keyword">do</span>
	table<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> word<span class="token punctuation">)</span>
<span class="token keyword">end</span>

SERVICE_NAME <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>

<span class="token keyword">local</span> main<span class="token punctuation">,</span> pattern

<span class="token keyword">local</span> err <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token keyword">for</span> pat <span class="token keyword">in</span> string<span class="token punctuation">.</span><span class="token function">gmatch</span><span class="token punctuation">(</span>LUA_SERVICE<span class="token punctuation">,</span> <span class="token string">"([^;]+);*"</span><span class="token punctuation">)</span> <span class="token keyword">do</span>
	<span class="token keyword">local</span> filename <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">gsub</span><span class="token punctuation">(</span>pat<span class="token punctuation">,</span> <span class="token string">"?"</span><span class="token punctuation">,</span> SERVICE_NAME<span class="token punctuation">)</span>
	<span class="token keyword">local</span> f<span class="token punctuation">,</span> msg <span class="token operator">=</span> <span class="token function">loadfile</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token keyword">not</span> f <span class="token keyword">then</span>
		table<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> msg<span class="token punctuation">)</span>
	<span class="token keyword">else</span>
		pattern <span class="token operator">=</span> pat
		main <span class="token operator">=</span> f
		<span class="token keyword">break</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>

<span class="token keyword">if</span> <span class="token keyword">not</span> main <span class="token keyword">then</span>
	<span class="token function">error</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">end</span>

LUA_SERVICE <span class="token operator">=</span> <span class="token keyword">nil</span>
package<span class="token punctuation">.</span>path <span class="token punctuation">,</span> LUA_PATH <span class="token operator">=</span> LUA_PATH
package<span class="token punctuation">.</span>cpath <span class="token punctuation">,</span> LUA_CPATH <span class="token operator">=</span> LUA_CPATH

<span class="token keyword">local</span> service_path <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> <span class="token string">"(.*/)[^/?]+$"</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> service_path <span class="token keyword">then</span>
	service_path <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">gsub</span><span class="token punctuation">(</span>service_path<span class="token punctuation">,</span> <span class="token string">"?"</span><span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
	package<span class="token punctuation">.</span>path <span class="token operator">=</span> service_path <span class="token operator">..</span> <span class="token string">"?.lua;"</span> <span class="token operator">..</span> package<span class="token punctuation">.</span>path
	SERVICE_PATH <span class="token operator">=</span> service_path
<span class="token keyword">else</span>
	<span class="token keyword">local</span> p <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> <span class="token string">"(.*/).+$"</span><span class="token punctuation">)</span>
	SERVICE_PATH <span class="token operator">=</span> p
<span class="token keyword">end</span>

<span class="token keyword">if</span> LUA_PRELOAD <span class="token keyword">then</span>
	<span class="token keyword">local</span> f <span class="token operator">=</span> <span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">loadfile</span><span class="token punctuation">(</span>LUA_PRELOAD<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token function">f</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span><span class="token function">unpack</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span>
	LUA_PRELOAD <span class="token operator">=</span> <span class="token keyword">nil</span>
<span class="token keyword">end</span>

_G<span class="token punctuation">.</span>require <span class="token operator">=</span> <span class="token punctuation">(</span>require <span class="token string">"skynet.require"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>require

<span class="token function">main</span><span class="token punctuation">(</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> table<span class="token punctuation">.</span><span class="token function">unpack</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后我们从lua层反过来看，还用上例bootstrap这个服务，服务代码如下。</p>
<pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">local</span> skynet <span class="token operator">=</span> require <span class="token string">"skynet"</span>
<span class="token keyword">local</span> harbor <span class="token operator">=</span> require <span class="token string">"skynet.harbor"</span>
<span class="token keyword">local</span> service <span class="token operator">=</span> require <span class="token string">"skynet.service"</span>
require <span class="token string">"skynet.manager"</span>	<span class="token comment">-- import skynet.launch, ...</span>

skynet<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">local</span> standalone <span class="token operator">=</span> skynet<span class="token punctuation">.</span>getenv <span class="token string">"standalone"</span>

	<span class="token keyword">local</span> launcher <span class="token operator">=</span> <span class="token function">assert</span><span class="token punctuation">(</span>skynet<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span><span class="token string">"snlua"</span><span class="token punctuation">,</span><span class="token string">"launcher"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	skynet<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">".launcher"</span><span class="token punctuation">,</span> launcher<span class="token punctuation">)</span>

	<span class="token keyword">local</span> harbor_id <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>skynet<span class="token punctuation">.</span>getenv <span class="token string">"harbor"</span> <span class="token keyword">or</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> harbor_id <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">then</span>
		<span class="token function">assert</span><span class="token punctuation">(</span>standalone <span class="token operator">==</span>  <span class="token keyword">nil</span><span class="token punctuation">)</span>
		standalone <span class="token operator">=</span> <span class="token keyword">true</span>
		skynet<span class="token punctuation">.</span><span class="token function">setenv</span><span class="token punctuation">(</span><span class="token string">"standalone"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span>

		<span class="token keyword">local</span> ok<span class="token punctuation">,</span> slave <span class="token operator">=</span> <span class="token function">pcall</span><span class="token punctuation">(</span>skynet<span class="token punctuation">.</span>newservice<span class="token punctuation">,</span> <span class="token string">"cdummy"</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> <span class="token keyword">not</span> ok <span class="token keyword">then</span>
			skynet<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">end</span>
		skynet<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">".cslave"</span><span class="token punctuation">,</span> slave<span class="token punctuation">)</span>

	<span class="token keyword">else</span>
		<span class="token keyword">if</span> standalone <span class="token keyword">then</span>
			<span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token function">pcall</span><span class="token punctuation">(</span>skynet<span class="token punctuation">.</span>newservice<span class="token punctuation">,</span><span class="token string">"cmaster"</span><span class="token punctuation">)</span> <span class="token keyword">then</span>
				skynet<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token keyword">end</span>
		<span class="token keyword">end</span>

		<span class="token keyword">local</span> ok<span class="token punctuation">,</span> slave <span class="token operator">=</span> <span class="token function">pcall</span><span class="token punctuation">(</span>skynet<span class="token punctuation">.</span>newservice<span class="token punctuation">,</span> <span class="token string">"cslave"</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> <span class="token keyword">not</span> ok <span class="token keyword">then</span>
			skynet<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">end</span>
		skynet<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">".cslave"</span><span class="token punctuation">,</span> slave<span class="token punctuation">)</span>
	<span class="token keyword">end</span>

	<span class="token keyword">if</span> standalone <span class="token keyword">then</span>
		<span class="token keyword">local</span> datacenter <span class="token operator">=</span> skynet<span class="token punctuation">.</span>newservice <span class="token string">"datacenterd"</span>
		skynet<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"DATACENTER"</span><span class="token punctuation">,</span> datacenter<span class="token punctuation">)</span>
	<span class="token keyword">end</span>
	skynet<span class="token punctuation">.</span>newservice <span class="token string">"service_mgr"</span>

	<span class="token keyword">local</span> enablessl <span class="token operator">=</span> skynet<span class="token punctuation">.</span>getenv <span class="token string">"enablessl"</span>
	<span class="token keyword">if</span> enablessl <span class="token keyword">then</span>
		service<span class="token punctuation">.</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"ltls_holder"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token keyword">local</span> c <span class="token operator">=</span> require <span class="token string">"ltls.init.c"</span>
			c<span class="token punctuation">.</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">end</span><span class="token punctuation">)</span>
	<span class="token keyword">end</span>

	<span class="token function">pcall</span><span class="token punctuation">(</span>skynet<span class="token punctuation">.</span>newservice<span class="token punctuation">,</span>skynet<span class="token punctuation">.</span>getenv <span class="token string">"start"</span> <span class="token keyword">or</span> <span class="token string">"main"</span><span class="token punctuation">)</span>
	skynet<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">end</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中很重要的就是这个<code>local launcher = assert(skynet.launch(&quot;snlua&quot;,&quot;launcher&quot;))</code>。<br />
当我们去创建新服务，或者是初始化lua服务，都会给launcher这个服务发消息，它不仅仅充当着启动器的角色。</p>
<pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">function</span> skynet<span class="token punctuation">.</span><span class="token function">init_service</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span>
	<span class="token keyword">local</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		skynet_require<span class="token punctuation">.</span><span class="token function">init_all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">end</span>
	<span class="token keyword">local</span> ok<span class="token punctuation">,</span> err <span class="token operator">=</span> <span class="token function">xpcall</span><span class="token punctuation">(</span>main<span class="token punctuation">,</span> traceback<span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token keyword">not</span> ok <span class="token keyword">then</span>
		skynet<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"init service failed: "</span> <span class="token operator">..</span> <span class="token function">tostring</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span>
		skynet<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">".launcher"</span><span class="token punctuation">,</span><span class="token string">"lua"</span><span class="token punctuation">,</span> <span class="token string">"ERROR"</span><span class="token punctuation">)</span>
		skynet<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">else</span>
		skynet<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">".launcher"</span><span class="token punctuation">,</span><span class="token string">"lua"</span><span class="token punctuation">,</span> <span class="token string">"LAUNCHOK"</span><span class="token punctuation">)</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>


<span class="token keyword">function</span> skynet<span class="token punctuation">.</span><span class="token function">newservice</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> skynet<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">".launcher"</span><span class="token punctuation">,</span> <span class="token string">"lua"</span> <span class="token punctuation">,</span> <span class="token string">"LAUNCH"</span><span class="token punctuation">,</span> <span class="token string">"snlua"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token punctuation">)</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>而当创建新服务时，launcher服务会调用LAUNCH函数，然后再调用launch_service，而后又调用skynet.launch。</p>
<pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">function</span> command<span class="token punctuation">.</span><span class="token function">LAUNCH</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span> service<span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token punctuation">)</span>

    <span class="token function">launch_service</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> NORET

<span class="token keyword">end</span>
<span class="token keyword">local</span> <span class="token keyword">function</span> <span class="token function">launch_service</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token punctuation">)</span>
	<span class="token keyword">local</span> param <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">...</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span>
	<span class="token keyword">local</span> inst <span class="token operator">=</span> skynet<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span> param<span class="token punctuation">)</span>
	<span class="token keyword">local</span> session <span class="token operator">=</span> skynet<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">local</span> response <span class="token operator">=</span> skynet<span class="token punctuation">.</span><span class="token function">response</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> inst <span class="token keyword">then</span>
		services<span class="token punctuation">[</span>inst<span class="token punctuation">]</span> <span class="token operator">=</span> service <span class="token operator">..</span> <span class="token string">" "</span> <span class="token operator">..</span> param
		instance<span class="token punctuation">[</span>inst<span class="token punctuation">]</span> <span class="token operator">=</span> response
		launch_session<span class="token punctuation">[</span>inst<span class="token punctuation">]</span> <span class="token operator">=</span> session
	<span class="token keyword">else</span>
		<span class="token function">response</span><span class="token punctuation">(</span><span class="token keyword">false</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token keyword">end</span>
	<span class="token keyword">return</span> inst
<span class="token keyword">end</span>

<span class="token keyword">function</span> skynet<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span><span class="token punctuation">...</span><span class="token punctuation">)</span>
	<span class="token keyword">local</span> addr <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">"LAUNCH"</span><span class="token punctuation">,</span> table<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">...</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> addr <span class="token keyword">then</span>
		<span class="token keyword">return</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span>addr <span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>而skynet.launch会调用skynet.core中的command，执行LAUNCH。会在<code>cmd_launch</code>函数中创建snlua加载类似于bootsrtap等lua服务。每个lua服务都会创建一个snlua虚拟机，lua服务之间形成沙盒，通过工作线程进行交互信息，信息在每个服务的结构体中，传递消息也仅仅是指针，这样的效率十分的高。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">command_func</span> cmd_funcs<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
	<span class="token punctuation">&#123;</span> <span class="token string">"TIMEOUT"</span><span class="token punctuation">,</span> cmd_timeout <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#123;</span> <span class="token string">"REG"</span><span class="token punctuation">,</span> cmd_reg <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#123;</span> <span class="token string">"QUERY"</span><span class="token punctuation">,</span> cmd_query <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#123;</span> <span class="token string">"NAME"</span><span class="token punctuation">,</span> cmd_name <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#123;</span> <span class="token string">"EXIT"</span><span class="token punctuation">,</span> cmd_exit <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#123;</span> <span class="token string">"KILL"</span><span class="token punctuation">,</span> cmd_kill <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#123;</span> <span class="token string">"LAUNCH"</span><span class="token punctuation">,</span> cmd_launch <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#123;</span> <span class="token string">"GETENV"</span><span class="token punctuation">,</span> cmd_getenv <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#123;</span> <span class="token string">"SETENV"</span><span class="token punctuation">,</span> cmd_setenv <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#123;</span> <span class="token string">"STARTTIME"</span><span class="token punctuation">,</span> cmd_starttime <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#123;</span> <span class="token string">"ABORT"</span><span class="token punctuation">,</span> cmd_abort <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#123;</span> <span class="token string">"MONITOR"</span><span class="token punctuation">,</span> cmd_monitor <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#123;</span> <span class="token string">"STAT"</span><span class="token punctuation">,</span> cmd_stat <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#123;</span> <span class="token string">"LOGON"</span><span class="token punctuation">,</span> cmd_logon <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#123;</span> <span class="token string">"LOGOFF"</span><span class="token punctuation">,</span> cmd_logoff <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#123;</span> <span class="token string">"SIGNAL"</span><span class="token punctuation">,</span> cmd_signal <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#123;</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> 
<span class="token function">skynet_command</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">skynet_context</span> <span class="token operator">*</span> context<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> cmd <span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> param<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">command_func</span> <span class="token operator">*</span> method <span class="token operator">=</span> <span class="token operator">&amp;</span>cmd_funcs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>method<span class="token operator">-></span>name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> method<span class="token operator">-></span>name<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">return</span> method<span class="token operator">-></span><span class="token function">func</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token operator">++</span>method<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>
<span class="token function">cmd_launch</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">skynet_context</span> <span class="token operator">*</span> context<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> param<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token class-name">size_t</span> sz <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> tmp<span class="token punctuation">[</span>sz<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token function">strcpy</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span> args <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span> mod <span class="token operator">=</span> <span class="token function">strsep</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>args<span class="token punctuation">,</span> <span class="token string">" \t\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	args <span class="token operator">=</span> <span class="token function">strsep</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>args<span class="token punctuation">,</span> <span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">skynet_context</span> <span class="token operator">*</span> inst <span class="token operator">=</span> <span class="token function">skynet_context_new</span><span class="token punctuation">(</span>mod<span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>inst <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
		<span class="token function">id_to_hex</span><span class="token punctuation">(</span>context<span class="token operator">-></span>result<span class="token punctuation">,</span> inst<span class="token operator">-></span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> context<span class="token operator">-></span>result<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这就是lua服务的创建过程。</p>
<p>但是回到skynet.start这个函数中，服务启动时会先调用skynet.core中的callback函数。</p>
<pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">function</span> skynet<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>start_func<span class="token punctuation">)</span>
	c<span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span>skynet<span class="token punctuation">.</span>dispatch_message<span class="token punctuation">)</span>
	init_thread <span class="token operator">=</span> skynet<span class="token punctuation">.</span><span class="token function">timeout</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		skynet<span class="token punctuation">.</span><span class="token function">init_service</span><span class="token punctuation">(</span>start_func<span class="token punctuation">)</span>
		init_thread <span class="token operator">=</span> <span class="token keyword">nil</span>
	<span class="token keyword">end</span><span class="token punctuation">)</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>callback函数对应lcommand函数，函数首先从 Lua 堆栈中获取服务上下文和一个布尔值 <code>forward</code>。然后，检查堆栈上的第一个参数是否是一个函数，这个函数就是要设置为回调函数的 Lua 函数。从结果上，lcommand最后一定会把之前设置为NULL的回调，设回成_cb。而这个函数的作用就是设置lua服务的回调函数。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">	luaL_Reg l<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
		<span class="token punctuation">&#123;</span> <span class="token string">"send"</span> <span class="token punctuation">,</span> lsend <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#123;</span> <span class="token string">"genid"</span><span class="token punctuation">,</span> lgenid <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#123;</span> <span class="token string">"redirect"</span><span class="token punctuation">,</span> lredirect <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#123;</span> <span class="token string">"command"</span> <span class="token punctuation">,</span> lcommand <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#123;</span> <span class="token string">"intcommand"</span><span class="token punctuation">,</span> lintcommand <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#123;</span> <span class="token string">"addresscommand"</span><span class="token punctuation">,</span> laddresscommand <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#123;</span> <span class="token string">"error"</span><span class="token punctuation">,</span> lerror <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#123;</span> <span class="token string">"harbor"</span><span class="token punctuation">,</span> lharbor <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#123;</span> <span class="token string">"callback"</span><span class="token punctuation">,</span> lcallback <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#123;</span> <span class="token string">"trace"</span><span class="token punctuation">,</span> ltrace <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#123;</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	
<span class="token keyword">static</span> <span class="token keyword">int</span>
<span class="token function">lcallback</span><span class="token punctuation">(</span>lua_State <span class="token operator">*</span>L<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">skynet_context</span> <span class="token operator">*</span> context <span class="token operator">=</span> <span class="token function">lua_touserdata</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token function">lua_upvalueindex</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> forward <span class="token operator">=</span> <span class="token function">lua_toboolean</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">luaL_checktype</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>LUA_TFUNCTION<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">lua_settop</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">callback_context</span> <span class="token operator">*</span> cb_ctx <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">callback_context</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">lua_newuserdatauv</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>cb_ctx<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	cb_ctx<span class="token operator">-></span>L <span class="token operator">=</span> <span class="token function">lua_newthread</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">lua_pushcfunction</span><span class="token punctuation">(</span>cb_ctx<span class="token operator">-></span>L<span class="token punctuation">,</span> traceback<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">lua_setiuservalue</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">lua_getfield</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> LUA_REGISTRYINDEX<span class="token punctuation">,</span> <span class="token string">"callback_context"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">lua_setiuservalue</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">lua_setfield</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> LUA_REGISTRYINDEX<span class="token punctuation">,</span> <span class="token string">"callback_context"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">lua_xmove</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> cb_ctx<span class="token operator">-></span>L<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">skynet_callback</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> cb_ctx<span class="token punctuation">,</span> <span class="token punctuation">(</span>forward<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">(</span>_forward_pre<span class="token punctuation">)</span><span class="token operator">:</span><span class="token punctuation">(</span>_cb_pre<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">static</span> <span class="token keyword">int</span>
<span class="token function">_cb_pre</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">skynet_context</span> <span class="token operator">*</span> context<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span> ud<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">,</span> <span class="token keyword">int</span> session<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> source<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span> msg<span class="token punctuation">,</span> <span class="token class-name">size_t</span> sz<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">callback_context</span> <span class="token operator">*</span>cb_ctx <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">callback_context</span> <span class="token operator">*</span><span class="token punctuation">)</span>ud<span class="token punctuation">;</span>
	<span class="token function">clear_last_context</span><span class="token punctuation">(</span>cb_ctx<span class="token operator">-></span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">skynet_callback</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ud<span class="token punctuation">,</span> _cb<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token function">_cb</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> cb_ctx<span class="token punctuation">,</span> type<span class="token punctuation">,</span> session<span class="token punctuation">,</span> source<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> sz<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">static</span> <span class="token keyword">int</span>
<span class="token function">_forward_pre</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">skynet_context</span> <span class="token operator">*</span>context<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>ud<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">,</span> <span class="token keyword">int</span> session<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> source<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>msg<span class="token punctuation">,</span> <span class="token class-name">size_t</span> sz<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">callback_context</span> <span class="token operator">*</span>cb_ctx <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">callback_context</span> <span class="token operator">*</span><span class="token punctuation">)</span>ud<span class="token punctuation">;</span>
	<span class="token function">clear_last_context</span><span class="token punctuation">(</span>cb_ctx<span class="token operator">-></span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">skynet_callback</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ud<span class="token punctuation">,</span> forward_cb<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token function">forward_cb</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> cb_ctx<span class="token punctuation">,</span> type<span class="token punctuation">,</span> session<span class="token punctuation">,</span> source<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> sz<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">static</span> <span class="token keyword">int</span>
<span class="token function">forward_cb</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">skynet_context</span> <span class="token operator">*</span> context<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span> ud<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">,</span> <span class="token keyword">int</span> session<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> source<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span> msg<span class="token punctuation">,</span> <span class="token class-name">size_t</span> sz<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">_cb</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ud<span class="token punctuation">,</span> type<span class="token punctuation">,</span> session<span class="token punctuation">,</span> source<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> sz<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// don't delete msg in forward mode.</span>
	<span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在_cb中处理lua服务的数据。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">int</span>
<span class="token function">_cb</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">skynet_context</span> <span class="token operator">*</span> context<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span> ud<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">,</span> <span class="token keyword">int</span> session<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> source<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span> msg<span class="token punctuation">,</span> <span class="token class-name">size_t</span> sz<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">callback_context</span> <span class="token operator">*</span>cb_ctx <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">callback_context</span> <span class="token operator">*</span><span class="token punctuation">)</span>ud<span class="token punctuation">;</span>
	lua_State <span class="token operator">*</span>L <span class="token operator">=</span> cb_ctx<span class="token operator">-></span>L<span class="token punctuation">;</span>
	<span class="token keyword">int</span> trace <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> r<span class="token punctuation">;</span>
	<span class="token function">lua_pushvalue</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">lua_pushinteger</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">lua_pushlightuserdata</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">lua_pushinteger</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>sz<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">lua_pushinteger</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> session<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">lua_pushinteger</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> source<span class="token punctuation">)</span><span class="token punctuation">;</span>

	r <span class="token operator">=</span> <span class="token function">lua_pcall</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span> trace<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> LUA_OK<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> self <span class="token operator">=</span> <span class="token function">skynet_command</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token string">"REG"</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">switch</span> <span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">case</span> LUA_ERRRUN<span class="token operator">:</span>
		<span class="token function">skynet_error</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token string">"lua call [%x to %s : %d msgsz = %d] error : "</span> KRED <span class="token string">"%s"</span> KNRM<span class="token punctuation">,</span> source <span class="token punctuation">,</span> self<span class="token punctuation">,</span> session<span class="token punctuation">,</span> sz<span class="token punctuation">,</span> <span class="token function">lua_tostring</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">break</span><span class="token punctuation">;</span>
	<span class="token keyword">case</span> LUA_ERRMEM<span class="token operator">:</span>
		<span class="token function">skynet_error</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token string">"lua memory error : [%x to %s : %d]"</span><span class="token punctuation">,</span> source <span class="token punctuation">,</span> self<span class="token punctuation">,</span> session<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">break</span><span class="token punctuation">;</span>
	<span class="token keyword">case</span> LUA_ERRERR<span class="token operator">:</span>
		<span class="token function">skynet_error</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token string">"lua error in error : [%x to %s : %d]"</span><span class="token punctuation">,</span> source <span class="token punctuation">,</span> self<span class="token punctuation">,</span> session<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">break</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

	<span class="token function">lua_pop</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<hr />
<p>目前就看到这里，在分析过程中，存在很多值得深入的细节，好在网上已经有很多资料，可以找到。再遇感兴趣点的时候，会再次更新。</p>
]]></content>
      <categories>
        <category>skynet</category>
      </categories>
      <tags>
        <tag>openProject</tag>
      </tags>
  </entry>
</search>
