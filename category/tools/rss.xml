<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>ohayo&#39;s blog • Posts by &#34;tools&#34; category</title>
        <link>https://blog.bysegfault.com</link>
        <description></description>
        <language>zh-CN</language>
        <pubDate>Mon, 29 Apr 2024 14:35:48 +0000</pubDate>
        <lastBuildDate>Mon, 29 Apr 2024 14:35:48 +0000</lastBuildDate>
        <category>math</category>
        <category>openwrt</category>
        <category>log</category>
        <category>vector日志采集</category>
        <category>journal</category>
        <category>note</category>
        <category>tex</category>
        <category>单调栈</category>
        <category>soft</category>
        <category>app</category>
        <category>cpp</category>
        <category>Linux</category>
        <category>python</category>
        <category>shell</category>
        <category>DDNS</category>
        <category>JavaScript</category>
        <category>openProject</category>
        <item>
            <guid isPermalink="true">https://blog.bysegfault.com/soft-router-is-joker/</guid>
            <title>没必要的软路由</title>
            <link>https://blog.bysegfault.com/soft-router-is-joker/</link>
            <category>openwrt</category>
            <category>log</category>
            <pubDate>Mon, 29 Apr 2024 14:35:48 +0000</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;前言&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#前言&#34;&gt;&lt;/a&gt; 前言&lt;/h2&gt;
&lt;p&gt;小学到初二，家里的网线从宽带我世界的电话拨号，升级到了光纤，我的游戏事业也如日中天，形势一片大好之际，我爸妈把网线掐了，直到高中毕业，在此期间我攻坚克难、不畏艰险，先后破解了邻居家的WiFi密码，掉包率极高，在电竞黄金期，摧毁了我的电竞梦想。&lt;/p&gt;
&lt;p&gt;毕业后，第一次租房30m宽带，100块才能使用50m，恰好当时拿下了switch，下个塞尔达都要等一天，看直播不能玩游戏。直接给我整破防了。。。&lt;/p&gt;
&lt;p&gt;家里一定要有好的网络体验！&lt;/p&gt;
&lt;p&gt;以下是我认为好的网络体验。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;switch等学习机能全速下载&lt;/li&gt;
&lt;li&gt;全家设备能透明进行科学上网&lt;/li&gt;
&lt;li&gt;网络延迟要低，dns不能泄露&lt;/li&gt;
&lt;li&gt;稳定！稳定！稳定！&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;不值得的软路由&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#不值得的软路由&#34;&gt;&lt;/a&gt; 不值得的软路由&lt;/h2&gt;
&lt;p&gt;混迹在各个论坛，经常会刷到软路由、n1等等帖子，通过这些帖子的描述，软路由其实就是一个功耗低一点的小电脑，通常会刷成openwrt、爱快这些系统，光猫网线连上它而后一起放入弱电箱，软路由再连路由器。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://static.bysegfault.com/images/20240429231321.png&#34; alt=&#34;Pasted image 20240429231321.png&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;软路由玩法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#软路由玩法&#34;&gt;&lt;/a&gt; 软路由玩法&lt;/h3&gt;
&lt;p&gt;软路由的配置可以自定义，通常要比路由器的配置高很多，举个例子，这些老哥通常会整一个x86的cpu、4g内存、128g存储的配置。然后在软路由里面安装docker、科学上网等工具，充当一个小服务器使用。&lt;/p&gt;
&lt;p&gt;比如它安装了科学上网，因为路由器的数据包要经过它，在软路由这一跳，会完成科学代理操作，这就实现了家中网络都能无感科学上网。&lt;/p&gt;
&lt;p&gt;功耗低费电少，cpu性能好，加上家里带宽一般都比较大，docker里面跑一些薅羊毛脚本，挂载alist等网盘，亦或是各种骚操作，完成可以充当服务器使用。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;每每看到这些帖子，我都忍不住想要去捡点这些垃圾，猛猛吃上几口。直到我了解到近年来mtk的arm cpu愈发强大，今非昔比。&lt;/p&gt;
&lt;h2 id=&#34;硬路由足矣&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#硬路由足矣&#34;&gt;&lt;/a&gt; 硬路由足矣！&lt;/h2&gt;
&lt;p&gt;硬路由其实就是我们平时所使用的路由器，早期路由器的cpu十分拉跨，忙中偷闲基本不可能，处理网络数据包都费劲。现在路由器cpu已经足够好了，且支持硬件加速。如此一来，软路由多了一跳，还没硬件加速，岂不是多次一举。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://static.bysegfault.com/images/20240430100254.png&#34; alt=&#34;Pasted image 20240429231321.png&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;硬路由玩法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#硬路由玩法&#34;&gt;&lt;/a&gt; 硬路由玩法&lt;/h2&gt;
&lt;p&gt;硬路由出厂的系统，基本都是基于openwrt做的深度魔改，主打一个稳定。想要安装科学上网等插件，是不可能滴。因此必须获得它的ssh权限，才能做老系统不敢做之事。&lt;/p&gt;
&lt;p&gt;本科期间搞了一台红米ax6，那台路由器，刷了openwrt之后，上网体验也是极好的，运行一些插件后，cpu完全能妥妥应对，只是没有2.5G口、不能玩docker等（因为存储小，无法扩容），略感遗憾。&lt;/p&gt;
&lt;p&gt;23年8月痛下死手，买了TP的6088，512MB运存， 64MB闪存，2个2.5G口，4个千兆，一个USB，配置在700的价位还算不错。usb接口可以插上ssd来增加存储，之后就能使用docker了。&lt;/p&gt;
&lt;p&gt;到手第一天，根据6088vpn漏洞，刷了&lt;code&gt;ImmortalWrt&lt;/code&gt;，加上了一块128g的ssd，装了docker一些乱起八糟的插件，体验上并不好，毕竟只有512MB内存，加上很多插件存在一些bug，引起cpu飙升。&lt;/p&gt;
&lt;p&gt;在路由器上跑docker，是不可取的，all in one + 中心化，一旦路由器某个服务出现问题，家里直接没网。最终只保留了&lt;code&gt;mosdns，wireguard，homeproxy&lt;/code&gt;以及自己用shell写的ddns。十分稳定，mtk确实可以，平均负载基本都是0。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://static.bysegfault.com/images/20240430103013.png&#34; alt=&#34;Pasted image 20240430103013.png&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;插件吐槽&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#插件吐槽&#34;&gt;&lt;/a&gt; 插件吐槽&lt;/h3&gt;
&lt;p&gt;这里不得不插一嘴，插件的选择，其实openwrt很稳定的，搞懂之后，结合自己的路由器和一些老哥的前车之鉴做一些小调整，上网体验没得说。&lt;/p&gt;
&lt;p&gt;很多不稳定是插件导致的，比如最早我使用的openclash，因为fakeip导致平时网络工具经常无法正常使用，像ping等，折腾了许久配置，前前后后redirect等方案都在openclash上进行了尝试，然而还是会在使用几天后，莫名的国内访问延迟上涨，跳点大。甚至去读了一部分metaclash源码，写的很一般。后来换成了pw，pw更是卧龙凤雏，开启大陆优化，国内延迟会降到没开pw时的大小，和openclash一样，大概2天左右，就会跳点变大，cpu飙升。&lt;br /&gt;
结合日志，加上cpu和内存根本没到瓶颈，也不是mosdns的问题，不得其解。&lt;/p&gt;
&lt;p&gt;后来看到了sing-box内核，简单测试了一下，占用和性能都比clash要好，就选择了基于sing-box的homeproxy，仅仅踩了一些分流的坑，界面上也要简洁很多。国内速度和没开代理一样，用的bwg gia hy2，没感觉有晚高峰什么的，一直很流畅稳定。&lt;br /&gt;
（分流的坑是因为GPT网页开启了http/3，如果不开启udp服务器代理或者不禁用它，就无法正常使用。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;docker的需求都交给了腾讯云，通过ipv6 wireguard回家访问，而且硬路由还有硬件加速，实在想不出，软路由有什么好的，还多了一跳。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#总结&#34;&gt;&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;路由器今非昔比，路由器有10胜，软路由有10败。&lt;/p&gt;
&lt;p&gt;路由器有硬件加速，软路由没有，此乃一胜。&lt;br /&gt;
路由器已经一胜了，软路由零胜，此乃二胜。&lt;br /&gt;
路由器已经二胜了，软路由零胜，此乃三胜。&lt;br /&gt;
路由器已经三胜了，软路由零胜，此乃四胜。&lt;br /&gt;
路由器已经四胜了，软路由零胜，此乃五胜。&lt;br /&gt;
路由器已经五胜了，软路由零胜，此乃六胜。&lt;br /&gt;
路由器已经六胜了，软路由零胜，此乃七胜。&lt;br /&gt;
路由器已经七胜了，软路由零胜，此乃八胜。&lt;br /&gt;
路由器已经八胜了，软路由零胜，此乃九胜。&lt;br /&gt;
路由器已经九胜了，软路由零胜，此乃十胜。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://blog.bysegfault.com/vector-record-tool/</guid>
            <title>vector日志采集-快速开始</title>
            <link>https://blog.bysegfault.com/vector-record-tool/</link>
            <category>vector日志采集</category>
            <pubDate>Sun, 10 Sep 2023 14:07:48 +0000</pubDate>
            <description><![CDATA[ &lt;blockquote&gt;
&lt;p&gt;本文默认已经有一丢丢lua基础&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;vector-采集流程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#vector-采集流程&#34;&gt;&lt;/a&gt; vector 采集流程&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://static.bysegfault.com/old_img/20230910222313.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;vector官网给出的三步走战略，结合具体配置，设置采集源头—&amp;gt;进行数据转换—&amp;gt;保存转换好的数据。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-toml&#34; data-language=&#34;toml&#34;&gt;&lt;code class=&#34;language-toml&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;# 从哪采集&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token table class-name&#34;&gt;sources.generate_syslog&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token key property&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;demo_logs&#34;&lt;/span&gt;
&lt;span class=&#34;token key property&#34;&gt;format&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;syslog&#34;&lt;/span&gt;
&lt;span class=&#34;token key property&#34;&gt;count&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# 数据转换&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token table class-name&#34;&gt;transforms.remap_syslog&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token key property&#34;&gt;inputs&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;generate_syslog&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 转换的输入来自generate_syslog过程的返回值&lt;/span&gt;
&lt;span class=&#34;token key property&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;remap&#34;&lt;/span&gt;
&lt;span class=&#34;token key property&#34;&gt;source&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;&#39;&#39;
  structured = parse_syslog!(.message)
  . = merge(., structured)
&#39;&#39;&#39;&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;#保存到哪&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token table class-name&#34;&gt;sinks.emit_syslog&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token key property&#34;&gt;inputs&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;remap_syslog&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 保存的输入来自remap_syslog过程的返回值&lt;/span&gt;
&lt;span class=&#34;token key property&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;console&#34;&lt;/span&gt;          &lt;span class=&#34;token comment&#34;&gt;# 把结果直接输出到终端上&lt;/span&gt;
&lt;span class=&#34;token key property&#34;&gt;encoding.codec&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;json&#34;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这相当的友好，除了toml配置，你还能使用&lt;code&gt;json&lt;/code&gt;或者&lt;s&gt;需要游标卡尺的&lt;/s&gt;&lt;code&gt;yaml&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;采集实战&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#采集实战&#34;&gt;&lt;/a&gt; 采集实战&lt;/h2&gt;
&lt;p&gt;采集源头（sources）和 保存到哪（sinks）设置起来很容易，官网给出了相关的文档，你能看到很多sources、sink以及我们即将重点实战的数据转换（transforms）。&lt;/p&gt;
&lt;h3 id=&#34;实战案例背景&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#实战案例背景&#34;&gt;&lt;/a&gt; 实战案例背景&lt;/h3&gt;
&lt;p&gt;假设有一个程序会通过syslog输出日志，我们需要采集含有&lt;code&gt;ohayo&lt;/code&gt;字符串的日志，并把它保存到一个文件中。&lt;/p&gt;
&lt;p&gt;采集源头：syslog&lt;br /&gt;
数据转换需求：含有&lt;code&gt;ohayo&lt;/code&gt;字符串的日志&lt;br /&gt;
保存：文件&lt;/p&gt;
&lt;h3 id=&#34;vector-采集配置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#vector-采集配置&#34;&gt;&lt;/a&gt; vector 采集配置&lt;/h3&gt;
&lt;p&gt;采集源头，监听本机的&lt;code&gt;/dev/log&lt;/code&gt;套接字，syslog与vector会通过这个套接字进行进程间通信。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-toml&#34; data-language=&#34;toml&#34;&gt;&lt;code class=&#34;language-toml&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token table class-name&#34;&gt;sources.syslog_1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token key property&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;socket&#34;&lt;/span&gt;      &lt;span class=&#34;token comment&#34;&gt;# 类型采用套接字方式&lt;/span&gt;
&lt;span class=&#34;token key property&#34;&gt;mode&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;unix_stream&#34;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 采用unix流的方式&lt;/span&gt;
&lt;span class=&#34;token key property&#34;&gt;path&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;/dev/log&#34;&lt;/span&gt;    &lt;span class=&#34;token comment&#34;&gt;# 监听套接字路径&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;数据转换，这里我使用的是lua，vector官网在极力推它们的remap，甚至给出&lt;code&gt;lua5.4比remap慢了60% &amp;amp;&amp;amp; lua只能在运行时才会出现问题，这不安全&lt;/code&gt;的恐怖言论。&lt;br /&gt;
O(2n)、O(3n)都是O(n)，长板凳、矮板凳都是板凳。根据剃刀原理…这就是我选lua的理由。&lt;/p&gt;
&lt;p&gt;PS: remap在面对格式规范的日志输出，要比lua更加方便。而且在启动vector时会进行静态检查。&lt;/p&gt;
&lt;p&gt;让我们先看一下，lua怎么在vector中转换数据的吧！下图是官网文档。&lt;br /&gt;
&lt;img data-src=&#34;https://static.bysegfault.com/old_img/Pasted%20image%2020230908191517.png&#34; alt=&#34;Pasted image 20230908191517.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;vector需要我们在配置中注册三个函数，&lt;code&gt;init | process | shutdown&lt;/code&gt;，&lt;code&gt;第一条日志&lt;/code&gt;来的时候，会执行&lt;code&gt;init&lt;/code&gt;函数，然后会执行&lt;code&gt;process&lt;/code&gt;，当转换结束时，会执行&lt;code&gt;shutdown&lt;/code&gt;。&lt;br /&gt;
注意，init只有在第一条日志来的时候才执行，shutdown在关闭时执行，而process在每条日志来的时候都会执行。&lt;/p&gt;
&lt;p&gt;结合配置格式填写如下&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-toml&#34; data-language=&#34;toml&#34;&gt;&lt;code class=&#34;language-toml&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token table class-name&#34;&gt;transforms.milestone_syslog_2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;token comment&#34;&gt;# General&lt;/span&gt;
&lt;span class=&#34;token key property&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;lua&#34;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 转换类型lua&lt;/span&gt;
&lt;span class=&#34;token key property&#34;&gt;version&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;2&#34;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 转换api版本，1已经被弃用了。&lt;/span&gt;
&lt;span class=&#34;token key property&#34;&gt;inputs&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;milestone_syslog_1&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 从采集源头获取数据&lt;/span&gt;
&lt;span class=&#34;token key property&#34;&gt;search_dirs&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;scripts&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;       &lt;span class=&#34;token comment&#34;&gt;# lua导包的搜寻路径。这里是相对路径./scripts&lt;/span&gt;
&lt;span class=&#34;token key property&#34;&gt;source&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;rd = require(&#39;record&#39;)&#34;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 引入资源，这里面可以写代码哦&lt;/span&gt;
&lt;span class=&#34;token key property&#34;&gt;hooks.process&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;rd.process&#34;&lt;/span&gt;       &lt;span class=&#34;token comment&#34;&gt;# 注册 process函数&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;line-numbers language-lua&#34; data-language=&#34;lua&#34;&gt;&lt;code class=&#34;language-lua&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;-- @filename record.lua&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;local&lt;/span&gt; M &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;

&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; M&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;process&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;event&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; emit&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; string&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;find&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;event&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;log&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;message&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;then&lt;/span&gt;
		&lt;span class=&#34;token function&#34;&gt;emit&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;event&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;token keyword&#34;&gt;end&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;end&lt;/span&gt;

&lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; M&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;解释一下，vector会把每一个从source采集日志，包装成一个table，日志的内容可以用&lt;code&gt;event.log.message&lt;/code&gt;获取，&lt;code&gt;emit&lt;/code&gt;函数会把&lt;code&gt;event&lt;/code&gt;结构的table发送到sink存储层进行保存。&lt;br /&gt;
保存的内容是 &lt;code&gt;event.log&lt;/code&gt;，这个table的格式如下。&lt;br /&gt;
&lt;img data-src=&#34;https://static.bysegfault.com/old_img/20230910221924.png&#34; alt=&#34;image.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;接着设置保存，从转换层（transform）拿到数据，编码成text，设置保存路径即可。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-toml&#34; data-language=&#34;toml&#34;&gt;&lt;code class=&#34;language-toml&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token table class-name&#34;&gt;sinks.milestone_record_file&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token key property&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;file&#34;&lt;/span&gt;
&lt;span class=&#34;token key property&#34;&gt;inputs&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;milestone_syslog_2&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token key property&#34;&gt;idle_timeout_secs&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;30&lt;/span&gt;
&lt;span class=&#34;token key property&#34;&gt;encoding.codec&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;text&#34;&lt;/span&gt;
&lt;span class=&#34;token key property&#34;&gt;path&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;/tmp/vector-%Y-%m-%d.log&#34;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;完整配置文件如下&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-toml&#34; data-language=&#34;toml&#34;&gt;&lt;code class=&#34;language-toml&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token table class-name&#34;&gt;sources.syslog_1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token key property&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;socket&#34;&lt;/span&gt;      &lt;span class=&#34;token comment&#34;&gt;# 类型采用套接字方式&lt;/span&gt;
&lt;span class=&#34;token key property&#34;&gt;mode&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;unix_stream&#34;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 采用unix流的方式&lt;/span&gt;
&lt;span class=&#34;token key property&#34;&gt;path&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;/dev/log&#34;&lt;/span&gt;    &lt;span class=&#34;token comment&#34;&gt;# 监听套接字路径&lt;/span&gt;

&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token table class-name&#34;&gt;transforms.milestone_syslog_2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;token comment&#34;&gt;# General&lt;/span&gt;
&lt;span class=&#34;token key property&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;lua&#34;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 转换类型lua&lt;/span&gt;
&lt;span class=&#34;token key property&#34;&gt;version&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;2&#34;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 转换api版本，1已经被弃用了。&lt;/span&gt;
&lt;span class=&#34;token key property&#34;&gt;inputs&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;milestone_syslog_1&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 从采集源头获取数据&lt;/span&gt;
&lt;span class=&#34;token key property&#34;&gt;search_dirs&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;scripts&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;       &lt;span class=&#34;token comment&#34;&gt;# lua导包的搜寻路径。这里是相对路径./scripts&lt;/span&gt;
&lt;span class=&#34;token key property&#34;&gt;source&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;rd = require(&#39;record&#39;)&#34;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 引入资源，这里面可以写代码哦,这个lua文件是自己写的哦。&lt;/span&gt;
&lt;span class=&#34;token key property&#34;&gt;hooks.process&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;rd.process&#34;&lt;/span&gt;       &lt;span class=&#34;token comment&#34;&gt;# 注册 process函数&lt;/span&gt;

&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token table class-name&#34;&gt;sinks.milestone_record_file&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token key property&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;file&#34;&lt;/span&gt;
&lt;span class=&#34;token key property&#34;&gt;inputs&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;milestone_syslog_2&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token key property&#34;&gt;idle_timeout_secs&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;30&lt;/span&gt;
&lt;span class=&#34;token key property&#34;&gt;encoding.codec&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;text&#34;&lt;/span&gt;
&lt;span class=&#34;token key property&#34;&gt;path&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;/tmp/vector-%Y-%m-%d.log&#34;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;sudo vector --config xxx.toml&lt;/code&gt;就可以进行采集了。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;总结&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#总结&#34;&gt;&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;如果你对lua有一定了解，那么这篇文章就够了，你可以在转换层做全部事情。BTW，官网文档对各种API写的相当全，比较不错的参看。本文对快速开始使用vector来说已经足够了，如果你的日志是标准内容，请首选remap，快是真的快。&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
