{
    "version": "https://jsonfeed.org/version/1",
    "title": "ohayo's blog • All posts by \"tools\" category",
    "description": null,
    "home_page_url": "https://blog.bysegfault.com",
    "items": [
        {
            "id": "https://blog.bysegfault.com/soft-router-is-joker/",
            "url": "https://blog.bysegfault.com/soft-router-is-joker/",
            "title": "没必要的软路由",
            "date_published": "2024-04-29T14:35:48.000Z",
            "content_html": "<h2 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\"></a> 前言</h2>\n<p>小学到初二，家里的网线从宽带我世界的电话拨号，升级到了光纤，我的游戏事业也如日中天，形势一片大好之际，我爸妈把网线掐了，直到高中毕业，在此期间我攻坚克难、不畏艰险，先后破解了邻居家的WiFi密码，掉包率极高，在电竞黄金期，摧毁了我的电竞梦想。</p>\n<p>毕业后，第一次租房30m宽带，100块才能使用50m，恰好当时拿下了switch，下个塞尔达都要等一天，看直播不能玩游戏。直接给我整破防了。。。</p>\n<p>家里一定要有好的网络体验！</p>\n<p>以下是我认为好的网络体验。</p>\n<ul>\n<li>switch等学习机能全速下载</li>\n<li>全家设备能透明进行科学上网</li>\n<li>网络延迟要低，dns不能泄露</li>\n<li>稳定！稳定！稳定！</li>\n</ul>\n<h2 id=\"不值得的软路由\"><a class=\"markdownIt-Anchor\" href=\"#不值得的软路由\"></a> 不值得的软路由</h2>\n<p>混迹在各个论坛，经常会刷到软路由、n1等等帖子，通过这些帖子的描述，软路由其实就是一个功耗低一点的小电脑，通常会刷成openwrt、爱快这些系统，光猫网线连上它而后一起放入弱电箱，软路由再连路由器。</p>\n<p><img data-src=\"https://static.bysegfault.com/images/20240429231321.png\" alt=\"Pasted image 20240429231321.png\" /></p>\n<h3 id=\"软路由玩法\"><a class=\"markdownIt-Anchor\" href=\"#软路由玩法\"></a> 软路由玩法</h3>\n<p>软路由的配置可以自定义，通常要比路由器的配置高很多，举个例子，这些老哥通常会整一个x86的cpu、4g内存、128g存储的配置。然后在软路由里面安装docker、科学上网等工具，充当一个小服务器使用。</p>\n<p>比如它安装了科学上网，因为路由器的数据包要经过它，在软路由这一跳，会完成科学代理操作，这就实现了家中网络都能无感科学上网。</p>\n<p>功耗低费电少，cpu性能好，加上家里带宽一般都比较大，docker里面跑一些薅羊毛脚本，挂载alist等网盘，亦或是各种骚操作，完成可以充当服务器使用。</p>\n<hr />\n<p>每每看到这些帖子，我都忍不住想要去捡点这些垃圾，猛猛吃上几口。直到我了解到近年来mtk的arm cpu愈发强大，今非昔比。</p>\n<h2 id=\"硬路由足矣\"><a class=\"markdownIt-Anchor\" href=\"#硬路由足矣\"></a> 硬路由足矣！</h2>\n<p>硬路由其实就是我们平时所使用的路由器，早期路由器的cpu十分拉跨，忙中偷闲基本不可能，处理网络数据包都费劲。现在路由器cpu已经足够好了，且支持硬件加速。如此一来，软路由多了一跳，还没硬件加速，岂不是多次一举。</p>\n<p><img data-src=\"https://static.bysegfault.com/images/20240430100254.png\" alt=\"Pasted image 20240429231321.png\" /></p>\n<h2 id=\"硬路由玩法\"><a class=\"markdownIt-Anchor\" href=\"#硬路由玩法\"></a> 硬路由玩法</h2>\n<p>硬路由出厂的系统，基本都是基于openwrt做的深度魔改，主打一个稳定。想要安装科学上网等插件，是不可能滴。因此必须获得它的ssh权限，才能做老系统不敢做之事。</p>\n<p>本科期间搞了一台红米ax6，那台路由器，刷了openwrt之后，上网体验也是极好的，运行一些插件后，cpu完全能妥妥应对，只是没有2.5G口、不能玩docker等（因为存储小，无法扩容），略感遗憾。</p>\n<p>23年8月痛下死手，买了TP的6088，512MB运存， 64MB闪存，2个2.5G口，4个千兆，一个USB，配置在700的价位还算不错。usb接口可以插上ssd来增加存储，之后就能使用docker了。</p>\n<p>到手第一天，根据6088vpn漏洞，刷了<code>ImmortalWrt</code>，加上了一块128g的ssd，装了docker一些乱起八糟的插件，体验上并不好，毕竟只有512MB内存，加上很多插件存在一些bug，引起cpu飙升。</p>\n<p>在路由器上跑docker，是不可取的，all in one + 中心化，一旦路由器某个服务出现问题，家里直接没网。最终只保留了<code>mosdns，wireguard，homeproxy</code>以及自己用shell写的ddns。十分稳定，mtk确实可以，平均负载基本都是0。</p>\n<p><img data-src=\"https://static.bysegfault.com/images/20240430103013.png\" alt=\"Pasted image 20240430103013.png\" /></p>\n<h3 id=\"插件吐槽\"><a class=\"markdownIt-Anchor\" href=\"#插件吐槽\"></a> 插件吐槽</h3>\n<p>这里不得不插一嘴，插件的选择，其实openwrt很稳定的，搞懂之后，结合自己的路由器和一些老哥的前车之鉴做一些小调整，上网体验没得说。</p>\n<p>很多不稳定是插件导致的，比如最早我使用的openclash，因为fakeip导致平时网络工具经常无法正常使用，像ping等，折腾了许久配置，前前后后redirect等方案都在openclash上进行了尝试，然而还是会在使用几天后，莫名的国内访问延迟上涨，跳点大。甚至去读了一部分metaclash源码，写的很一般。后来换成了pw，pw更是卧龙凤雏，开启大陆优化，国内延迟会降到没开pw时的大小，和openclash一样，大概2天左右，就会跳点变大，cpu飙升。<br />\n结合日志，加上cpu和内存根本没到瓶颈，也不是mosdns的问题，不得其解。</p>\n<p>后来看到了sing-box内核，简单测试了一下，占用和性能都比clash要好，就选择了基于sing-box的homeproxy，仅仅踩了一些分流的坑，界面上也要简洁很多。国内速度和没开代理一样，用的bwg gia hy2，没感觉有晚高峰什么的，一直很流畅稳定。<br />\n（分流的坑是因为GPT网页开启了http/3，如果不开启udp服务器代理或者不禁用它，就无法正常使用。</p>\n<hr />\n<p>docker的需求都交给了腾讯云，通过ipv6 wireguard回家访问，而且硬路由还有硬件加速，实在想不出，软路由有什么好的，还多了一跳。</p>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\"></a> 总结</h2>\n<p>路由器今非昔比，路由器有10胜，软路由有10败。</p>\n<p>路由器有硬件加速，软路由没有，此乃一胜。<br />\n路由器已经一胜了，软路由零胜，此乃二胜。<br />\n路由器已经二胜了，软路由零胜，此乃三胜。<br />\n路由器已经三胜了，软路由零胜，此乃四胜。<br />\n路由器已经四胜了，软路由零胜，此乃五胜。<br />\n路由器已经五胜了，软路由零胜，此乃六胜。<br />\n路由器已经六胜了，软路由零胜，此乃七胜。<br />\n路由器已经七胜了，软路由零胜，此乃八胜。<br />\n路由器已经八胜了，软路由零胜，此乃九胜。<br />\n路由器已经九胜了，软路由零胜，此乃十胜。</p>\n",
            "tags": [
                "openwrt",
                "log"
            ]
        },
        {
            "id": "https://blog.bysegfault.com/vector-record-tool/",
            "url": "https://blog.bysegfault.com/vector-record-tool/",
            "title": "vector日志采集-快速开始",
            "date_published": "2023-09-10T14:07:48.000Z",
            "content_html": "<blockquote>\n<p>本文默认已经有一丢丢lua基础</p>\n</blockquote>\n<h2 id=\"vector-采集流程\"><a class=\"markdownIt-Anchor\" href=\"#vector-采集流程\"></a> vector 采集流程</h2>\n<p><img data-src=\"https://static.bysegfault.com/old_img/20230910222313.png\" alt=\"\" /></p>\n<p>vector官网给出的三步走战略，结合具体配置，设置采集源头—&gt;进行数据转换—&gt;保存转换好的数据。</p>\n<pre class=\"line-numbers language-toml\" data-language=\"toml\"><code class=\"language-toml\"><span class=\"token comment\"># 从哪采集</span>\n<span class=\"token punctuation\">[</span><span class=\"token table class-name\">sources.generate_syslog</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">type</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"demo_logs\"</span>\n<span class=\"token key property\">format</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"syslog\"</span>\n<span class=\"token key property\">count</span> <span class=\"token punctuation\">=</span> <span class=\"token number\">100</span>\n\n<span class=\"token comment\"># 数据转换</span>\n<span class=\"token punctuation\">[</span><span class=\"token table class-name\">transforms.remap_syslog</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">inputs</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"generate_syslog\"</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 转换的输入来自generate_syslog过程的返回值</span>\n<span class=\"token key property\">type</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"remap\"</span>\n<span class=\"token key property\">source</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">'''\n  structured = parse_syslog!(.message)\n  . = merge(., structured)\n'''</span>\n\n<span class=\"token comment\">#保存到哪</span>\n<span class=\"token punctuation\">[</span><span class=\"token table class-name\">sinks.emit_syslog</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">inputs</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"remap_syslog\"</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># 保存的输入来自remap_syslog过程的返回值</span>\n<span class=\"token key property\">type</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"console\"</span>          <span class=\"token comment\"># 把结果直接输出到终端上</span>\n<span class=\"token key property\">encoding.codec</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"json\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这相当的友好，除了toml配置，你还能使用<code>json</code>或者<s>需要游标卡尺的</s><code>yaml</code>。</p>\n<h2 id=\"采集实战\"><a class=\"markdownIt-Anchor\" href=\"#采集实战\"></a> 采集实战</h2>\n<p>采集源头（sources）和 保存到哪（sinks）设置起来很容易，官网给出了相关的文档，你能看到很多sources、sink以及我们即将重点实战的数据转换（transforms）。</p>\n<h3 id=\"实战案例背景\"><a class=\"markdownIt-Anchor\" href=\"#实战案例背景\"></a> 实战案例背景</h3>\n<p>假设有一个程序会通过syslog输出日志，我们需要采集含有<code>ohayo</code>字符串的日志，并把它保存到一个文件中。</p>\n<p>采集源头：syslog<br />\n数据转换需求：含有<code>ohayo</code>字符串的日志<br />\n保存：文件</p>\n<h3 id=\"vector-采集配置\"><a class=\"markdownIt-Anchor\" href=\"#vector-采集配置\"></a> vector 采集配置</h3>\n<p>采集源头，监听本机的<code>/dev/log</code>套接字，syslog与vector会通过这个套接字进行进程间通信。</p>\n<pre class=\"line-numbers language-toml\" data-language=\"toml\"><code class=\"language-toml\"><span class=\"token punctuation\">[</span><span class=\"token table class-name\">sources.syslog_1</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">type</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"socket\"</span>      <span class=\"token comment\"># 类型采用套接字方式</span>\n<span class=\"token key property\">mode</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"unix_stream\"</span> <span class=\"token comment\"># 采用unix流的方式</span>\n<span class=\"token key property\">path</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"/dev/log\"</span>    <span class=\"token comment\"># 监听套接字路径</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>数据转换，这里我使用的是lua，vector官网在极力推它们的remap，甚至给出<code>lua5.4比remap慢了60% &amp;&amp; lua只能在运行时才会出现问题，这不安全</code>的恐怖言论。<br />\nO(2n)、O(3n)都是O(n)，长板凳、矮板凳都是板凳。根据剃刀原理…这就是我选lua的理由。</p>\n<p>PS: remap在面对格式规范的日志输出，要比lua更加方便。而且在启动vector时会进行静态检查。</p>\n<p>让我们先看一下，lua怎么在vector中转换数据的吧！下图是官网文档。<br />\n<img data-src=\"https://static.bysegfault.com/old_img/2020230908191517.png\" alt=\"Pasted image 20230908191517.png\" /></p>\n<p>vector需要我们在配置中注册三个函数，<code>init | process | shutdown</code>，<code>第一条日志</code>来的时候，会执行<code>init</code>函数，然后会执行<code>process</code>，当转换结束时，会执行<code>shutdown</code>。<br />\n注意，init只有在第一条日志来的时候才执行，shutdown在关闭时执行，而process在每条日志来的时候都会执行。</p>\n<p>结合配置格式填写如下</p>\n<pre class=\"line-numbers language-toml\" data-language=\"toml\"><code class=\"language-toml\"><span class=\"token punctuation\">[</span><span class=\"token table class-name\">transforms.milestone_syslog_2</span><span class=\"token punctuation\">]</span>\n  <span class=\"token comment\"># General</span>\n<span class=\"token key property\">type</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"lua\"</span> <span class=\"token comment\"># 转换类型lua</span>\n<span class=\"token key property\">version</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"2\"</span> <span class=\"token comment\"># 转换api版本，1已经被弃用了。</span>\n<span class=\"token key property\">inputs</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"milestone_syslog_1\"</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># 从采集源头获取数据</span>\n<span class=\"token key property\">search_dirs</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"scripts\"</span><span class=\"token punctuation\">]</span>       <span class=\"token comment\"># lua导包的搜寻路径。这里是相对路径./scripts</span>\n<span class=\"token key property\">source</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"rd = require('record')\"</span>  <span class=\"token comment\"># 引入资源，这里面可以写代码哦</span>\n<span class=\"token key property\">hooks.process</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"rd.process\"</span>       <span class=\"token comment\"># 注册 process函数</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token comment\">-- @filename record.lua</span>\n<span class=\"token keyword\">local</span> M <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> M<span class=\"token punctuation\">.</span><span class=\"token function\">process</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> emit<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> string<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span> <span class=\"token keyword\">then</span>\n\t\t<span class=\"token function\">emit</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">return</span> M<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>解释一下，vector会把每一个从source采集日志，包装成一个table，日志的内容可以用<code>event.log.message</code>获取，<code>emit</code>函数会把<code>event</code>结构的table发送到sink存储层进行保存。<br />\n保存的内容是 <code>event.log</code>，这个table的格式如下。<br />\n<img data-src=\"https://static.bysegfault.com/old_img/20230910221924.png\" alt=\"image.png\" /></p>\n<p>接着设置保存，从转换层（transform）拿到数据，编码成text，设置保存路径即可。</p>\n<pre class=\"line-numbers language-toml\" data-language=\"toml\"><code class=\"language-toml\"><span class=\"token punctuation\">[</span><span class=\"token table class-name\">sinks.milestone_record_file</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">type</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"file\"</span>\n<span class=\"token key property\">inputs</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"milestone_syslog_2\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">idle_timeout_secs</span> <span class=\"token punctuation\">=</span> <span class=\"token number\">30</span>\n<span class=\"token key property\">encoding.codec</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"text\"</span>\n<span class=\"token key property\">path</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"/tmp/vector-%Y-%m-%d.log\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>完整配置文件如下</p>\n<pre class=\"line-numbers language-toml\" data-language=\"toml\"><code class=\"language-toml\"><span class=\"token punctuation\">[</span><span class=\"token table class-name\">sources.syslog_1</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">type</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"socket\"</span>      <span class=\"token comment\"># 类型采用套接字方式</span>\n<span class=\"token key property\">mode</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"unix_stream\"</span> <span class=\"token comment\"># 采用unix流的方式</span>\n<span class=\"token key property\">path</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"/dev/log\"</span>    <span class=\"token comment\"># 监听套接字路径</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token table class-name\">transforms.milestone_syslog_2</span><span class=\"token punctuation\">]</span>\n  <span class=\"token comment\"># General</span>\n<span class=\"token key property\">type</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"lua\"</span> <span class=\"token comment\"># 转换类型lua</span>\n<span class=\"token key property\">version</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"2\"</span> <span class=\"token comment\"># 转换api版本，1已经被弃用了。</span>\n<span class=\"token key property\">inputs</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"milestone_syslog_1\"</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># 从采集源头获取数据</span>\n<span class=\"token key property\">search_dirs</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"scripts\"</span><span class=\"token punctuation\">]</span>       <span class=\"token comment\"># lua导包的搜寻路径。这里是相对路径./scripts</span>\n<span class=\"token key property\">source</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"rd = require('record')\"</span>  <span class=\"token comment\"># 引入资源，这里面可以写代码哦,这个lua文件是自己写的哦。</span>\n<span class=\"token key property\">hooks.process</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"rd.process\"</span>       <span class=\"token comment\"># 注册 process函数</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token table class-name\">sinks.milestone_record_file</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">type</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"file\"</span>\n<span class=\"token key property\">inputs</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"milestone_syslog_2\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">idle_timeout_secs</span> <span class=\"token punctuation\">=</span> <span class=\"token number\">30</span>\n<span class=\"token key property\">encoding.codec</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"text\"</span>\n<span class=\"token key property\">path</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"/tmp/vector-%Y-%m-%d.log\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>sudo vector --config xxx.toml</code>就可以进行采集了。</p>\n<hr />\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\"></a> 总结</h2>\n<p>如果你对lua有一定了解，那么这篇文章就够了，你可以在转换层做全部事情。BTW，官网文档对各种API写的相当全，比较不错的参看。本文对快速开始使用vector来说已经足够了，如果你的日志是标准内容，请首选remap，快是真的快。</p>\n",
            "tags": [
                "vector日志采集"
            ]
        }
    ]
}