{
    "version": "https://jsonfeed.org/version/1",
    "title": "ohayo's blog • All posts by \"tools\" category",
    "description": null,
    "home_page_url": "https://blog.hayoo.org",
    "items": [
        {
            "id": "https://blog.hayoo.org/vector-record-tool/",
            "url": "https://blog.hayoo.org/vector-record-tool/",
            "title": "vector日志采集-快速开始",
            "date_published": "2023-09-10T14:07:48.000Z",
            "content_html": "<blockquote>\n<p>本文默认已经有一丢丢lua基础</p>\n</blockquote>\n<h2 id=\"vector-采集流程\"><a class=\"markdownIt-Anchor\" href=\"#vector-采集流程\"></a> vector 采集流程</h2>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/20230910222313.png\" alt=\"\" /></p>\n<p>vector官网给出的三步走战略，结合具体配置，设置采集源头—&gt;进行数据转换—&gt;保存转换好的数据。</p>\n<pre class=\"line-numbers language-toml\" data-language=\"toml\"><code class=\"language-toml\"><span class=\"token comment\"># 从哪采集</span>\n<span class=\"token punctuation\">[</span><span class=\"token table class-name\">sources.generate_syslog</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">type</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"demo_logs\"</span>\n<span class=\"token key property\">format</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"syslog\"</span>\n<span class=\"token key property\">count</span> <span class=\"token punctuation\">=</span> <span class=\"token number\">100</span>\n\n<span class=\"token comment\"># 数据转换</span>\n<span class=\"token punctuation\">[</span><span class=\"token table class-name\">transforms.remap_syslog</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">inputs</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"generate_syslog\"</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 转换的输入来自generate_syslog过程的返回值</span>\n<span class=\"token key property\">type</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"remap\"</span>\n<span class=\"token key property\">source</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">'''\n  structured = parse_syslog!(.message)\n  . = merge(., structured)\n'''</span>\n\n<span class=\"token comment\">#保存到哪</span>\n<span class=\"token punctuation\">[</span><span class=\"token table class-name\">sinks.emit_syslog</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">inputs</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"remap_syslog\"</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># 保存的输入来自remap_syslog过程的返回值</span>\n<span class=\"token key property\">type</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"console\"</span>          <span class=\"token comment\"># 把结果直接输出到终端上</span>\n<span class=\"token key property\">encoding.codec</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"json\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这相当的友好，除了toml配置，你还能使用<code>json</code>或者<s>需要游标卡尺的</s><code>yaml</code>。</p>\n<h2 id=\"采集实战\"><a class=\"markdownIt-Anchor\" href=\"#采集实战\"></a> 采集实战</h2>\n<p>采集源头（sources）和 保存到哪（sinks）设置起来很容易，官网给出了相关的文档，你能看到很多sources、sink以及我们即将重点实战的数据转换（transforms）。</p>\n<h3 id=\"实战案例背景\"><a class=\"markdownIt-Anchor\" href=\"#实战案例背景\"></a> 实战案例背景</h3>\n<p>假设有一个程序会通过syslog输出日志，我们需要采集含有<code>ohayo</code>字符串的日志，并把它保存到一个文件中。</p>\n<p>采集源头：syslog<br />\n数据转换需求：含有<code>ohayo</code>字符串的日志<br />\n保存：文件</p>\n<h3 id=\"vector-采集配置\"><a class=\"markdownIt-Anchor\" href=\"#vector-采集配置\"></a> vector 采集配置</h3>\n<p>采集源头，监听本机的<code>/dev/log</code>套接字，syslog与vector会通过这个套接字进行进程间通信。</p>\n<pre class=\"line-numbers language-toml\" data-language=\"toml\"><code class=\"language-toml\"><span class=\"token punctuation\">[</span><span class=\"token table class-name\">sources.syslog_1</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">type</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"socket\"</span>      <span class=\"token comment\"># 类型采用套接字方式</span>\n<span class=\"token key property\">mode</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"unix_stream\"</span> <span class=\"token comment\"># 采用unix流的方式</span>\n<span class=\"token key property\">path</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"/dev/log\"</span>    <span class=\"token comment\"># 监听套接字路径</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>数据转换，这里我使用的是lua，vector官网在极力推它们的remap，甚至给出<code>lua5.4比remap慢了60% &amp;&amp; lua只能在运行时才会出现问题，这不安全</code>的恐怖言论。<br />\nO(2n)、O(3n)都是O(n)，长板凳、矮板凳都是板凳。根据剃刀原理…这就是我选lua的理由。</p>\n<p>PS: remap在面对格式规范的日志输出，要比lua更加方便。而且在启动vector时会进行静态检查。</p>\n<p>让我们先看一下，lua怎么在vector中转换数据的吧！下图是官网文档。<br />\n<img data-src=\"https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/Pasted%20image%2020230908191517.png\" alt=\"Pasted image 20230908191517.png\" /></p>\n<p>vector需要我们在配置中注册三个函数，<code>init | process | shutdown</code>，<code>第一条日志</code>来的时候，会执行<code>init</code>函数，然后会执行<code>process</code>，当转换结束时，会执行<code>shutdown</code>。<br />\n注意，init只有在第一条日志来的时候才执行，shutdown在关闭时执行，而process在每条日志来的时候都会执行。</p>\n<p>结合配置格式填写如下</p>\n<pre class=\"line-numbers language-toml\" data-language=\"toml\"><code class=\"language-toml\"><span class=\"token punctuation\">[</span><span class=\"token table class-name\">transforms.milestone_syslog_2</span><span class=\"token punctuation\">]</span>\n  <span class=\"token comment\"># General</span>\n<span class=\"token key property\">type</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"lua\"</span> <span class=\"token comment\"># 转换类型lua</span>\n<span class=\"token key property\">version</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"2\"</span> <span class=\"token comment\"># 转换api版本，1已经被弃用了。</span>\n<span class=\"token key property\">inputs</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"milestone_syslog_1\"</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># 从采集源头获取数据</span>\n<span class=\"token key property\">search_dirs</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"scripts\"</span><span class=\"token punctuation\">]</span>       <span class=\"token comment\"># lua导包的搜寻路径。这里是相对路径./scripts</span>\n<span class=\"token key property\">source</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"rd = require('record')\"</span>  <span class=\"token comment\"># 引入资源，这里面可以写代码哦</span>\n<span class=\"token key property\">hooks.process</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"rd.process\"</span>       <span class=\"token comment\"># 注册 process函数</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token comment\">-- @filename record.lua</span>\n<span class=\"token keyword\">local</span> M <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> M<span class=\"token punctuation\">.</span><span class=\"token function\">process</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> emit<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> string<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span> <span class=\"token keyword\">then</span>\n\t\t<span class=\"token function\">emit</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">return</span> M<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>解释一下，vector会把每一个从source采集日志，包装成一个table，日志的内容可以用<code>event.log.message</code>获取，<code>emit</code>函数会把<code>event</code>结构的table发送到sink存储层进行保存。<br />\n保存的内容是 <code>event.log</code>，这个table的格式如下。<br />\n<img data-src=\"https://fastly.jsdelivr.net/gh/zhu-jiyuan/picture_go/img/20230910221924.png\" alt=\"image.png\" /></p>\n<p>接着设置保存，从转换层（transform）拿到数据，编码成text，设置保存路径即可。</p>\n<pre class=\"line-numbers language-toml\" data-language=\"toml\"><code class=\"language-toml\"><span class=\"token punctuation\">[</span><span class=\"token table class-name\">sinks.milestone_record_file</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">type</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"file\"</span>\n<span class=\"token key property\">inputs</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"milestone_syslog_2\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">idle_timeout_secs</span> <span class=\"token punctuation\">=</span> <span class=\"token number\">30</span>\n<span class=\"token key property\">encoding.codec</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"text\"</span>\n<span class=\"token key property\">path</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"/tmp/vector-%Y-%m-%d.log\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>完整配置文件如下</p>\n<pre class=\"line-numbers language-toml\" data-language=\"toml\"><code class=\"language-toml\"><span class=\"token punctuation\">[</span><span class=\"token table class-name\">sources.syslog_1</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">type</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"socket\"</span>      <span class=\"token comment\"># 类型采用套接字方式</span>\n<span class=\"token key property\">mode</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"unix_stream\"</span> <span class=\"token comment\"># 采用unix流的方式</span>\n<span class=\"token key property\">path</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"/dev/log\"</span>    <span class=\"token comment\"># 监听套接字路径</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token table class-name\">transforms.milestone_syslog_2</span><span class=\"token punctuation\">]</span>\n  <span class=\"token comment\"># General</span>\n<span class=\"token key property\">type</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"lua\"</span> <span class=\"token comment\"># 转换类型lua</span>\n<span class=\"token key property\">version</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"2\"</span> <span class=\"token comment\"># 转换api版本，1已经被弃用了。</span>\n<span class=\"token key property\">inputs</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"milestone_syslog_1\"</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># 从采集源头获取数据</span>\n<span class=\"token key property\">search_dirs</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"scripts\"</span><span class=\"token punctuation\">]</span>       <span class=\"token comment\"># lua导包的搜寻路径。这里是相对路径./scripts</span>\n<span class=\"token key property\">source</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"rd = require('record')\"</span>  <span class=\"token comment\"># 引入资源，这里面可以写代码哦,这个lua文件是自己写的哦。</span>\n<span class=\"token key property\">hooks.process</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"rd.process\"</span>       <span class=\"token comment\"># 注册 process函数</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token table class-name\">sinks.milestone_record_file</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">type</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"file\"</span>\n<span class=\"token key property\">inputs</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"milestone_syslog_2\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">idle_timeout_secs</span> <span class=\"token punctuation\">=</span> <span class=\"token number\">30</span>\n<span class=\"token key property\">encoding.codec</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"text\"</span>\n<span class=\"token key property\">path</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"/tmp/vector-%Y-%m-%d.log\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>sudo vector --config xxx.toml</code>就可以进行采集了。</p>\n<hr />\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\"></a> 总结</h2>\n<p>如果你对lua有一定了解，那么这篇文章就够了，你可以在转换层做全部事情。BTW，官网文档对各种API写的相当全，比较不错的参看。本文对快速开始使用vector来说已经足够了，如果你的日志是标准内容，请首选remap，快是真的快。</p>\n",
            "tags": [
                "vector日志采集"
            ]
        }
    ]
}