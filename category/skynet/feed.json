{
    "version": "https://jsonfeed.org/version/1",
    "title": "ohayo's blog • All posts by \"skynet\" category",
    "description": null,
    "home_page_url": "https://blog.bysegfault.com",
    "items": [
        {
            "id": "https://blog.bysegfault.com/learning/openProject/skynet/skynet-02/",
            "url": "https://blog.bysegfault.com/learning/openProject/skynet/skynet-02/",
            "title": "skynet源码学习（粗略版）",
            "date_published": "2023-06-04T04:46:57.000Z",
            "content_html": "<p>本文从skynet的main入口开始，梳理skynet运行流程，中间很多东西不会解释，必要的一些细节还是会解释滴，旨在梳理清楚skynet如何工作、启动skynet项目，发生了什么？后续将带着以下问题开始。</p>\n<ul>\n<li>skynet服务如何工作？skynet服务是什么？</li>\n<li>服务之间如何传递信息？</li>\n<li>一个服务如何启动？</li>\n</ul>\n<p>btw，本文需要有一定的c语言基础、lua基础以及较为重要的lua与c交互的相关知识。</p>\n<h2 id=\"main入口\"><a class=\"markdownIt-Anchor\" href=\"#main入口\"></a> main入口</h2>\n<p>main函数首先，检测了配置文件，配置节点，TSD，初始化skynet环境，设置信号量。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">lua_State</span> <span class=\"token operator\">*</span>L <span class=\"token operator\">=</span> <span class=\"token function\">luaL_newstate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">luaL_openlibs</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// link lua lib</span>\n<span class=\"token keyword\">int</span> err <span class=\"token operator\">=</span>  <span class=\"token function\">luaL_loadbufferx</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> load_config<span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>load_config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"=[skynet config]\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"t\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>err <span class=\"token operator\">==</span> LUA_OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">lua_pushstring</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> config_file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nerr <span class=\"token operator\">=</span> <span class=\"token function\">lua_pcall</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">lua_tostring</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lua_close</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">_init_env</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconfig<span class=\"token punctuation\">.</span>thread <span class=\"token operator\">=</span>  <span class=\"token function\">optint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"thread\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconfig<span class=\"token punctuation\">.</span>module_path <span class=\"token operator\">=</span> <span class=\"token function\">optstring</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cpath\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"./cservice/?.so\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconfig<span class=\"token punctuation\">.</span>harbor <span class=\"token operator\">=</span> <span class=\"token function\">optint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"harbor\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconfig<span class=\"token punctuation\">.</span>bootstrap <span class=\"token operator\">=</span> <span class=\"token function\">optstring</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bootstrap\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"snlua bootstrap\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconfig<span class=\"token punctuation\">.</span>daemon <span class=\"token operator\">=</span> <span class=\"token function\">optstring</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"daemon\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconfig<span class=\"token punctuation\">.</span>logger <span class=\"token operator\">=</span> <span class=\"token function\">optstring</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"logger\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconfig<span class=\"token punctuation\">.</span>logservice <span class=\"token operator\">=</span> <span class=\"token function\">optstring</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"logservice\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"logger\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconfig<span class=\"token punctuation\">.</span>profile <span class=\"token operator\">=</span> <span class=\"token function\">optboolean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"profile\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">lua_close</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>main中创建了一个lua栈，把配置文件的内容压入栈里，通过lua脚本，设置到skynet环境中。</p>\n <pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#加载config的lua脚本\n <span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> load_config <span class=\"token operator\">=</span> <span class=\"token string\">\"\\\n\tlocal result = &#123;&#125;\\n\\\n\tlocal function getenv(name) return assert(os.getenv(name), [[os.getenv() failed: ]] .. name) end\\n\\\n\tlocal sep = package.config:sub(1,1)\\n\\\n\tlocal current_path = [[.]]..sep\\n\\\n\tlocal function include(filename)\\n\\\n\t\tlocal last_path = current_path\\n\\\n\t\tlocal path, name = filename:match([[(.*]]..sep..[[)(.*)$]])\\n\\\n\t\tif path then\\n\\\n\t\t\tif path:sub(1,1) == sep then\t-- root\\n\\\n\t\t\t\tcurrent_path = path\\n\\\n\t\t\telse\\n\\\n\t\t\t\tcurrent_path = current_path .. path\\n\\\n\t\t\tend\\n\\\n\t\telse\\n\\\n\t\t\tname = filename\\n\\\n\t\tend\\n\\\n\t\tlocal f = assert(io.open(current_path .. name))\\n\\\n\t\tlocal code = assert(f:read [[*a]])\\n\\\n\t\tcode = string.gsub(code, [[%$([%w_%d]+)]], getenv)\\n\\\n\t\tf:close()\\n\\\n\t\tassert(load(code,[[@]]..filename,[[t]],result))()\\n\\\n\t\tcurrent_path = last_path\\n\\\n\tend\\n\\\n\tsetmetatable(result, &#123; __index = &#123; include = include &#125; &#125;)\\n\\\n\tlocal config_name = ...\\n\\\n\tinclude(config_name)\\n\\\n\tsetmetatable(result, nil)\\n\\\n\treturn result\\n\\\n\"</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>后续就可以通过skynet环境读取到配置文件的信息啦。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">config<span class=\"token punctuation\">.</span>thread <span class=\"token operator\">=</span>  <span class=\"token function\">optint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"thread\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconfig<span class=\"token punctuation\">.</span>module_path <span class=\"token operator\">=</span> <span class=\"token function\">optstring</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cpath\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"./cservice/?.so\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconfig<span class=\"token punctuation\">.</span>harbor <span class=\"token operator\">=</span> <span class=\"token function\">optint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"harbor\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconfig<span class=\"token punctuation\">.</span>bootstrap <span class=\"token operator\">=</span> <span class=\"token function\">optstring</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bootstrap\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"snlua bootstrap\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconfig<span class=\"token punctuation\">.</span>daemon <span class=\"token operator\">=</span> <span class=\"token function\">optstring</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"daemon\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconfig<span class=\"token punctuation\">.</span>logger <span class=\"token operator\">=</span> <span class=\"token function\">optstring</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"logger\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconfig<span class=\"token punctuation\">.</span>logservice <span class=\"token operator\">=</span> <span class=\"token function\">optstring</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"logservice\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"logger\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconfig<span class=\"token punctuation\">.</span>profile <span class=\"token operator\">=</span> <span class=\"token function\">optboolean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"profile\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我们拿<code>config.thread =  optint(&quot;thread&quot;,8);</code>举例，后面optstring都是类似的。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span>\n<span class=\"token function\">optint</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> opt<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> str <span class=\"token operator\">=</span> <span class=\"token function\">skynet_getenv</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//如果配置文件没有配置这个key，就用默认的参数，在optint(\"thread\",8)中就是8.</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>str <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">char</span> tmp<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">,</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span>opt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">skynet_setenv</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//把默认的参数写入skynet环境中。</span>\n\t\t<span class=\"token keyword\">return</span> opt<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">strtol</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//配置文件中有key的配置，把字符串转int值返回。</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>加载完配置文件后，会关闭临时用的lua栈，然后来到最重要的环节----根据配置，启动skynet。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">skynet_start</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// &lt;==我们主要通过这个，就可以知道skynet的启动流程了</span>\n<span class=\"token function\">skynet_globalexit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"启动流程\"><a class=\"markdownIt-Anchor\" href=\"#启动流程\"></a> 启动流程</h2>\n<p><code>skynet_start</code>中，首先也注册了信号量，紧接着检测是否设置为守护进程。</p>\n<p>后面的部分，才是我们主要分析的地方。<br />\n这个函数首先进行了节点、handle、消息队列、模块、定时器、socket的初始化以及开启性能分析。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">skynet_harbor_init</span><span class=\"token punctuation\">(</span>config<span class=\"token operator\">-></span>harbor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">skynet_handle_init</span><span class=\"token punctuation\">(</span>config<span class=\"token operator\">-></span>harbor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">skynet_mq_init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">skynet_module_init</span><span class=\"token punctuation\">(</span>config<span class=\"token operator\">-></span>module_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">skynet_timer_init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">skynet_socket_init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">skynet_profile_enable</span><span class=\"token punctuation\">(</span>config<span class=\"token operator\">-></span>profile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我们知道skynet中服务地址的构成。高八位是节点地址，低24位是服务地址。<br />\n<img data-src=\"https://static.bysegfault.com/old_img/Pasted%20image%2020230604183714.png\" alt=\"Pasted image 20230604183714\" /></p>\n<p>而<code>skynet_harbor_init</code>仅仅只做了一件事，把高8位设置为配置文件的节点号。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span>\n<span class=\"token function\">skynet_harbor_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> harbor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tHARBOR <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>harbor <span class=\"token operator\">&lt;&lt;</span> HANDLE_REMOTE_SHIFT<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在<code>skynet_handle_init</code>中主要为了，初始化一张全局handle操作的<code>地址表H</code>。<br />\n<code>skynet_mq_init</code>中创建一个全局队列。<br />\n<code>skynet_module_init</code>中创建了一个全局模块表，这样可以避免模块重复加载等等。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">modules</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> count<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">spinlock</span> lock<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> path<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_module</span> m<span class=\"token punctuation\">[</span>MAX_MODULE_TYPE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>skynet_timer_init</code>中创建了一个全局定时器，用于更新时间。<br />\n<code>skynet_socket_init</code>中根据定时器提供的当前时间创建了一个socket_server，用与管理socket相关操作。</p>\n<hr />\n<p>接下来skynet启动了第一个服务——日志服务。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_context</span> <span class=\"token operator\">*</span>ctx <span class=\"token operator\">=</span> <span class=\"token function\">skynet_context_new</span><span class=\"token punctuation\">(</span>config<span class=\"token operator\">-></span>logservice<span class=\"token punctuation\">,</span> config<span class=\"token operator\">-></span>logger<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ctx <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Can't launch %s service\\n\"</span><span class=\"token punctuation\">,</span> config<span class=\"token operator\">-></span>logservice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">skynet_handle_namehandle</span><span class=\"token punctuation\">(</span><span class=\"token function\">skynet_context_handle</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"logger\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我们主要分析skynet_context_new这个函数，而skynet_handle_namehandle函数非常简单，它的作用是给服务起个名字，并插入到handle全局表H中，这里不过多展开了。</p>\n<p>skynet_context_new函数首先会查询服务的模块名。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_module</span> <span class=\"token operator\">*</span> mod <span class=\"token operator\">=</span> <span class=\"token function\">skynet_module_query</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mod <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//skynet_module_query</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这里需要分析一下mod 查询函数</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_module</span> <span class=\"token operator\">*</span> \n<span class=\"token function\">skynet_module_query</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// _query会去全局模块表M中找，看之前是否打开过该模块。如果打开过直接返回。</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_module</span> <span class=\"token operator\">*</span> result <span class=\"token operator\">=</span> <span class=\"token function\">_query</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">SPIN_LOCK</span><span class=\"token punctuation\">(</span>M<span class=\"token punctuation\">)</span>\n\n\tresult <span class=\"token operator\">=</span> <span class=\"token function\">_query</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// double check</span>\n\t<span class=\"token comment\">//如果之前没有打开过，会去设置的模块路径中查找对应的模块，进行打开。</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">&amp;&amp;</span> M<span class=\"token operator\">-></span>count <span class=\"token operator\">&lt;</span> MAX_MODULE_TYPE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> M<span class=\"token operator\">-></span>count<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> dl <span class=\"token operator\">=</span> <span class=\"token function\">_try_open</span><span class=\"token punctuation\">(</span>M<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dl<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tM<span class=\"token operator\">-></span>m<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n\t\t\tM<span class=\"token operator\">-></span>m<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>module <span class=\"token operator\">=</span> dl<span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">open_sym</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>M<span class=\"token operator\">-></span>m<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\tM<span class=\"token operator\">-></span>m<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token function\">skynet_strdup</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tM<span class=\"token operator\">-></span>count <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t\tresult <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>M<span class=\"token operator\">-></span>m<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token function\">SPIN_UNLOCK</span><span class=\"token punctuation\">(</span>M<span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">//打开成功返回skynet_module*，否则是NULL</span>\n\t<span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>模块打开后，会对模块实例化。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>inst <span class=\"token operator\">=</span> <span class=\"token function\">skynet_module_instance_create</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>inst <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_context</span> <span class=\"token operator\">*</span> ctx <span class=\"token operator\">=</span> <span class=\"token function\">skynet_malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>实例化会调用模块中的回调函数。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> \n<span class=\"token function\">skynet_module_instance_create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_module</span> <span class=\"token operator\">*</span>m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m<span class=\"token operator\">-></span>create<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> m<span class=\"token operator\">-></span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">intptr_t</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">~</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这里有一个问题，这个回调函数<code>m-&gt;create()</code>怎么来的。<br />\n这个回调函数的绑定是在查询阶段调用<code>open_sym</code>函数实现的。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>\n<span class=\"token function\">get_api</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_module</span> <span class=\"token operator\">*</span>mod<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>api_name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token class-name\">size_t</span> name_size <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>mod<span class=\"token operator\">-></span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">size_t</span> api_size <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>api_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> tmp<span class=\"token punctuation\">[</span>name_size <span class=\"token operator\">+</span> api_size <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">,</span> mod<span class=\"token operator\">-></span>name<span class=\"token punctuation\">,</span> name_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>tmp<span class=\"token operator\">+</span>name_size<span class=\"token punctuation\">,</span> api_name<span class=\"token punctuation\">,</span> api_size<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>ptr <span class=\"token operator\">=</span> <span class=\"token function\">strrchr</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">,</span> <span class=\"token char\">'.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ptr <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tptr <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\tptr <span class=\"token operator\">=</span> ptr <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">dlsym</span><span class=\"token punctuation\">(</span>mod<span class=\"token operator\">-></span>module<span class=\"token punctuation\">,</span> ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span>\n<span class=\"token function\">open_sym</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_module</span> <span class=\"token operator\">*</span>mod<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tmod<span class=\"token operator\">-></span>create <span class=\"token operator\">=</span> <span class=\"token function\">get_api</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">,</span> <span class=\"token string\">\"_create\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tmod<span class=\"token operator\">-></span>init <span class=\"token operator\">=</span> <span class=\"token function\">get_api</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">,</span> <span class=\"token string\">\"_init\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tmod<span class=\"token operator\">-></span>release <span class=\"token operator\">=</span> <span class=\"token function\">get_api</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">,</span> <span class=\"token string\">\"_release\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tmod<span class=\"token operator\">-></span>signal <span class=\"token operator\">=</span> <span class=\"token function\">get_api</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">,</span> <span class=\"token string\">\"_signal\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> mod<span class=\"token operator\">-></span>init <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>接着回到服务的创建函数，下面都是对服务的初始化。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">ctx<span class=\"token operator\">-></span>mod <span class=\"token operator\">=</span> mod<span class=\"token punctuation\">;</span>\nctx<span class=\"token operator\">-></span>instance <span class=\"token operator\">=</span> inst<span class=\"token punctuation\">;</span>\n<span class=\"token function\">ATOM_INIT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ctx<span class=\"token operator\">-></span>ref <span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token operator\">-></span>cb <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token operator\">-></span>cb_ud <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token operator\">-></span>session_id <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ATOM_INIT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ctx<span class=\"token operator\">-></span>logfile<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">uintptr_t</span><span class=\"token punctuation\">)</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nctx<span class=\"token operator\">-></span>init <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span>\nctx<span class=\"token operator\">-></span>endless <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span>\n\nctx<span class=\"token operator\">-></span>cpu_cost <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token operator\">-></span>cpu_start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token operator\">-></span>message_count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token operator\">-></span>profile <span class=\"token operator\">=</span> G_NODE<span class=\"token punctuation\">.</span>profile<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Should set to 0 first to avoid skynet_handle_retireall get an uninitialized handle</span>\nctx<span class=\"token operator\">-></span>handle <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\t\nctx<span class=\"token operator\">-></span>handle <span class=\"token operator\">=</span> <span class=\"token function\">skynet_handle_register</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//注册一个handle地址</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>紧接着重点来了，服务创建了一个消息队列，并调用模块的初始化函数，对其进行初始化，如果初始化成功，就把这个服务的消息队列推入skynet的全局中并返回ctx，否则创建服务失败，释放相关资源。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">message_queue</span> <span class=\"token operator\">*</span> queue <span class=\"token operator\">=</span> ctx<span class=\"token operator\">-></span>queue <span class=\"token operator\">=</span> <span class=\"token function\">skynet_mq_create</span><span class=\"token punctuation\">(</span>ctx<span class=\"token operator\">-></span>handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// init function maybe use ctx->handle, so it must init at last</span>\n<span class=\"token function\">context_inc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">CHECKCALLING_BEGIN</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> <span class=\"token function\">skynet_module_instance_init</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">,</span> inst<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">,</span> param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">CHECKCALLING_END</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_context</span> <span class=\"token operator\">*</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">skynet_context_release</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tctx<span class=\"token operator\">-></span>init <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">skynet_globalmq_push</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">skynet_error</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">,</span> <span class=\"token string\">\"LAUNCH %s %s\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> param <span class=\"token operator\">?</span> param <span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">skynet_error</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token string\">\"FAILED launch %s\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">uint32_t</span> handle <span class=\"token operator\">=</span> ctx<span class=\"token operator\">-></span>handle<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">skynet_context_release</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">skynet_handle_retire</span><span class=\"token punctuation\">(</span>handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">drop_t</span> d <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> handle <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">skynet_mq_release</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span> drop_message<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这里的函数都不难理解，就不做展开了。</p>\n<p>到这里一个服务就创建好了，可以得到结论，服务其实就是一个<code>skynet_context</code>结构体。</p>\n<hr />\n<p>接下来到了<code>bootstrap(ctx, config-&gt;bootstrap);</code>这步，这步的作用是启动的服务，这行代码，连接lua层，比较难，放到最后再说，不妨先理解为启动其他服务。</p>\n<h2 id=\"线程创建\"><a class=\"markdownIt-Anchor\" href=\"#线程创建\"></a> 线程创建</h2>\n<p>在各个服务都创建好后，到了<code>start(config-&gt;thread);</code>，就开始创建服务的处理线程了。<br />\n这里要先用几个图解释一下。<br />\n当服务创建好后，它的消息队列会push到skynet全局队列GQ中。<br />\n而服务本身有一个skynet_message队列，这个队列是存放其他服务发的消息的。<br />\n<img data-src=\"https://static.bysegfault.com/old_img/Pasted%20image%2020230604194028.png\" alt=\"Pasted image 20230604194028\" /><br />\n全局队列中的每个消息队列对应一个服务，而其他服务发送需要处理的消息在消息队列中的skynet_message队列中。需要注意的是，全局队列是链表的形式，而skynet_message队列是数组循环队列。</p>\n<p><code>start(config-&gt;thread);</code>会创建很多工作线程，这些工作线程从GQ中，抢消息队列，如果消息队列中有消息，就用消息队列对应服务的回调函数处理这条消息。</p>\n<p><img data-src=\"https://static.bysegfault.com/old_img/Pasted%20image%2020230604194804.png\" alt=\"Pasted image 20230604194804\" /></p>\n<p>下面开始从源码分析这些线程是怎么创建与工作的。<br />\n在创建这些工作线程之前，先创建了监视器、定时器、socket三个线程，而监视器线程中有与工作线程数量对应的skynet_monitor监视器。<br />\n这里的在创建定时器和socket线程时也传入了监视器实例，主要目的是为了通过监视器实例来控制工作线程。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token class-name\">pthread_t</span> pid<span class=\"token punctuation\">[</span>thread<span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">monitor</span> <span class=\"token operator\">*</span>m <span class=\"token operator\">=</span> <span class=\"token function\">skynet_malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nm<span class=\"token operator\">-></span>count <span class=\"token operator\">=</span> thread<span class=\"token punctuation\">;</span>\nm<span class=\"token operator\">-></span>sleep <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\nm<span class=\"token operator\">-></span>m <span class=\"token operator\">=</span> <span class=\"token function\">skynet_malloc</span><span class=\"token punctuation\">(</span>thread <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_monitor</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>thread<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tm<span class=\"token operator\">-></span>m<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">skynet_monitor_new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">pthread_mutex_init</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>m<span class=\"token operator\">-></span>mutex<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Init mutex error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">pthread_cond_init</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>m<span class=\"token operator\">-></span>cond<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Init cond error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">create_thread</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pid<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> thread_monitor<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">create_thread</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pid<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> thread_timer<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">create_thread</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pid<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> thread_socket<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>而后才创建了工作线程，在创建工作线程时，对每个线程附加了权重还传入了对应的skynet_monitor监视器。这个权重稍后解释。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> weight<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> \n\t<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> \n\t<span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> \n\t<span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">worker_parm</span> wp<span class=\"token punctuation\">[</span>thread<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>thread<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\twp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>m <span class=\"token operator\">=</span> m<span class=\"token punctuation\">;</span>\n\twp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>weight<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>weight<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\twp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>weight<span class=\"token operator\">=</span> weight<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\twp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>weight <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">create_thread</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pid<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> thread_worker<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>wp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>thread<span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">pthread_join</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">&#125;</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>不妨看看<code>thread_worker</code>做了什么。</p>\n<p>首先通过获取权重，并通过全局监视器获取skynet_monitor监视器。当监视器没有离开时，重复循环。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>\n<span class=\"token function\">thread_worker</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">worker_parm</span> <span class=\"token operator\">*</span>wp <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> id <span class=\"token operator\">=</span> wp<span class=\"token operator\">-></span>id<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> weight <span class=\"token operator\">=</span> wp<span class=\"token operator\">-></span>weight<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">monitor</span> <span class=\"token operator\">*</span>m <span class=\"token operator\">=</span> wp<span class=\"token operator\">-></span>m<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_monitor</span> <span class=\"token operator\">*</span>sm <span class=\"token operator\">=</span> m<span class=\"token operator\">-></span>m<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">skynet_initthread</span><span class=\"token punctuation\">(</span>THREAD_WORKER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">message_queue</span> <span class=\"token operator\">*</span> q <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>m<span class=\"token operator\">-></span>quit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tq <span class=\"token operator\">=</span> <span class=\"token function\">skynet_context_message_dispatch</span><span class=\"token punctuation\">(</span>sm<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">,</span> weight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>q <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">pthread_mutex_lock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>m<span class=\"token operator\">-></span>mutex<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token operator\">++</span> m<span class=\"token operator\">-></span>sleep<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token comment\">// \"spurious wakeup\" is harmless,</span>\n\t\t\t\t<span class=\"token comment\">// because skynet_context_message_dispatch() can be call at any time.</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>m<span class=\"token operator\">-></span>quit<span class=\"token punctuation\">)</span>\n\t\t\t\t\t<span class=\"token function\">pthread_cond_wait</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>m<span class=\"token operator\">-></span>cond<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>m<span class=\"token operator\">-></span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token operator\">--</span> m<span class=\"token operator\">-></span>sleep<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">pthread_mutex_unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>m<span class=\"token operator\">-></span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"unlock mutex error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>其中<code>skynet_context_message_dispatch</code>函数是关键。</p>\n<p>这个函数首先从全局队列GQ中获取消息队列。然后从消息队列中获取handle，再从handle中获取到服务上下文。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>q <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tq <span class=\"token operator\">=</span> <span class=\"token function\">skynet_globalmq_pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>q<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token class-name\">uint32_t</span> handle <span class=\"token operator\">=</span> <span class=\"token function\">skynet_mq_handle</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_context</span> <span class=\"token operator\">*</span> ctx <span class=\"token operator\">=</span> <span class=\"token function\">skynet_handle_grab</span><span class=\"token punctuation\">(</span>handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ctx <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">drop_t</span> d <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> handle <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">skynet_mq_release</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">,</span> drop_message<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">skynet_globalmq_pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>之后就是对消息队列中skynet_message队列进行处理，这里可以知道，权重的作用。</p>\n<table>\n<thead>\n<tr>\n<th>权重</th>\n<th>消息处理数量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-1</td>\n<td>1条</td>\n</tr>\n<tr>\n<td>0</td>\n<td>全部消息</td>\n</tr>\n<tr>\n<td>1</td>\n<td>一半消息</td>\n</tr>\n<tr>\n<td>2</td>\n<td>1/4消息</td>\n</tr>\n<tr>\n<td>3</td>\n<td>1/8消息</td>\n</tr>\n</tbody>\n</table>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>n<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_message</span> msg<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">skynet_mq_pop</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">skynet_context_release</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">skynet_globalmq_pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">==</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> weight <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tn <span class=\"token operator\">=</span> <span class=\"token function\">skynet_mq_length</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tn <span class=\"token operator\">>>=</span> weight<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">int</span> overload <span class=\"token operator\">=</span> <span class=\"token function\">skynet_mq_overload</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>overload<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">skynet_error</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token string\">\"May overload, message queue length = %d\"</span><span class=\"token punctuation\">,</span> overload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token function\">skynet_monitor_trigger</span><span class=\"token punctuation\">(</span>sm<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">.</span>source <span class=\"token punctuation\">,</span> handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ctx<span class=\"token operator\">-></span>cb <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">skynet_free</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">dispatch_message</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token function\">skynet_monitor_trigger</span><span class=\"token punctuation\">(</span>sm<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这里的监视器触发函数<code>skynet_monitor_trigger</code>，主要是为了防止服务死循环。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> \n<span class=\"token function\">skynet_monitor_trigger</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_monitor</span> <span class=\"token operator\">*</span>sm<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> source<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> destination<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tsm<span class=\"token operator\">-></span>source <span class=\"token operator\">=</span> source<span class=\"token punctuation\">;</span>\n\tsm<span class=\"token operator\">-></span>destination <span class=\"token operator\">=</span> destination<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ATOM_FINC</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>sm<span class=\"token operator\">-></span>version<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> \n<span class=\"token function\">skynet_monitor_check</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_monitor</span> <span class=\"token operator\">*</span>sm<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sm<span class=\"token operator\">-></span>version <span class=\"token operator\">==</span> sm<span class=\"token operator\">-></span>check_version<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sm<span class=\"token operator\">-></span>destination<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">skynet_context_endless</span><span class=\"token punctuation\">(</span>sm<span class=\"token operator\">-></span>destination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">skynet_error</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"A message from [ :%08x ] to [ :%08x ] maybe in an endless loop (version = %d)\"</span><span class=\"token punctuation\">,</span> sm<span class=\"token operator\">-></span>source <span class=\"token punctuation\">,</span> sm<span class=\"token operator\">-></span>destination<span class=\"token punctuation\">,</span> sm<span class=\"token operator\">-></span>version<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\tsm<span class=\"token operator\">-></span>check_version <span class=\"token operator\">=</span> sm<span class=\"token operator\">-></span>version<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在监视器线程中，会不断检查工作线程的<code>skynet_monitor</code>。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>\n<span class=\"token function\">thread_monitor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">monitor</span> <span class=\"token operator\">*</span> m <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> m<span class=\"token operator\">-></span>count<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">skynet_initthread</span><span class=\"token punctuation\">(</span>THREAD_MONITOR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tCHECK_ABORT\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">skynet_monitor_check</span><span class=\"token punctuation\">(</span>m<span class=\"token operator\">-></span>m<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tCHECK_ABORT\n\t\t\t<span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>再次回到工作线程中的<code>skynet_context_message_dispatch</code>函数，在服务有注册回调函数时，会调用<code>dispatch_message</code>进行处理，而这个函数会调用服务的回调进行消息处理。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span>\n<span class=\"token function\">dispatch_message</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_context</span> <span class=\"token operator\">*</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_message</span> <span class=\"token operator\">*</span>msg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ctx<span class=\"token operator\">-></span>init<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">CHECKCALLING_BEGIN</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">pthread_setspecific</span><span class=\"token punctuation\">(</span>G_NODE<span class=\"token punctuation\">.</span>handle_key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uintptr_t</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>ctx<span class=\"token operator\">-></span>handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> type <span class=\"token operator\">=</span> msg<span class=\"token operator\">-></span>sz <span class=\"token operator\">>></span> MESSAGE_TYPE_SHIFT<span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">size_t</span> sz <span class=\"token operator\">=</span> msg<span class=\"token operator\">-></span>sz <span class=\"token operator\">&amp;</span> MESSAGE_TYPE_MASK<span class=\"token punctuation\">;</span>\n\tFILE <span class=\"token operator\">*</span>f <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>FILE <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">ATOM_LOAD</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ctx<span class=\"token operator\">-></span>logfile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">skynet_log_output</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> msg<span class=\"token operator\">-></span>source<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span> msg<span class=\"token operator\">-></span>session<span class=\"token punctuation\">,</span> msg<span class=\"token operator\">-></span>data<span class=\"token punctuation\">,</span> sz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token operator\">++</span>ctx<span class=\"token operator\">-></span>message_count<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> reserve_msg<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ctx<span class=\"token operator\">-></span>profile<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tctx<span class=\"token operator\">-></span>cpu_start <span class=\"token operator\">=</span> <span class=\"token function\">skynet_thread_time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\treserve_msg <span class=\"token operator\">=</span> ctx<span class=\"token operator\">-></span><span class=\"token function\">cb</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> ctx<span class=\"token operator\">-></span>cb_ud<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span> msg<span class=\"token operator\">-></span>session<span class=\"token punctuation\">,</span> msg<span class=\"token operator\">-></span>source<span class=\"token punctuation\">,</span> msg<span class=\"token operator\">-></span>data<span class=\"token punctuation\">,</span> sz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">uint64_t</span> cost_time <span class=\"token operator\">=</span> <span class=\"token function\">skynet_thread_time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> ctx<span class=\"token operator\">-></span>cpu_start<span class=\"token punctuation\">;</span>\n\t\tctx<span class=\"token operator\">-></span>cpu_cost <span class=\"token operator\">+=</span> cost_time<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\treserve_msg <span class=\"token operator\">=</span> ctx<span class=\"token operator\">-></span><span class=\"token function\">cb</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> ctx<span class=\"token operator\">-></span>cb_ud<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span> msg<span class=\"token operator\">-></span>session<span class=\"token punctuation\">,</span> msg<span class=\"token operator\">-></span>source<span class=\"token punctuation\">,</span> msg<span class=\"token operator\">-></span>data<span class=\"token punctuation\">,</span> sz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>reserve_msg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">skynet_free</span><span class=\"token punctuation\">(</span>msg<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">CHECKCALLING_END</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>如此，服务如何运行的问题就基本解决了。就是通过这些工作线程不断从GQ中获取服务的消息队列，再调用服务注册的回调函数处理消息。</p>\n<hr />\n<p>让我们回到<code>bootstrap(ctx, config-&gt;bootstrap);</code>服务启动这部分。</p>\n<h2 id=\"服务启动\"><a class=\"markdownIt-Anchor\" href=\"#服务启动\"></a> 服务启动</h2>\n<p>bootstrap函数如下，举个例子，传入的是默认参数日志服务和<code>snlua bootstrap</code></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span>\n<span class=\"token function\">bootstrap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_context</span> <span class=\"token operator\">*</span> logger<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> cmdline<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> sz <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>cmdline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span>sz<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> args<span class=\"token punctuation\">[</span>sz<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> arg_pos<span class=\"token punctuation\">;</span> \n\t<span class=\"token function\">sscanf</span><span class=\"token punctuation\">(</span>cmdline<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\targ_pos <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arg_pos <span class=\"token operator\">&lt;</span> sz<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cmdline<span class=\"token punctuation\">[</span>arg_pos<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">' '</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\targ_pos<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token function\">strncpy</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">,</span> cmdline <span class=\"token operator\">+</span> arg_pos<span class=\"token punctuation\">,</span> sz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\targs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_context</span> <span class=\"token operator\">*</span>ctx <span class=\"token operator\">=</span> <span class=\"token function\">skynet_context_new</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ctx <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">skynet_error</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Bootstrap error : %s\\n\"</span><span class=\"token punctuation\">,</span> cmdline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">skynet_context_dispatchall</span><span class=\"token punctuation\">(</span>logger<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这个函数会执行<code>struct skynet_context *ctx = skynet_context_new(&quot;snlua&quot;, &quot;bootstrap&quot;);</code>创建一个snlua服务。<br />\nsnlua全名是skynet lua，它是作者自定义的lua虚拟机。<br />\n创建时，会建一个lua栈，并初始化变量。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">snlua</span> <span class=\"token punctuation\">&#123;</span>\n\tlua_State <span class=\"token operator\">*</span> L<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_context</span> <span class=\"token operator\">*</span> ctx<span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">size_t</span> mem<span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">size_t</span> mem_report<span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">size_t</span> mem_limit<span class=\"token punctuation\">;</span>\n\tlua_State <span class=\"token operator\">*</span> activeL<span class=\"token punctuation\">;</span>\n\tATOM_INT trap<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">snlua</span> <span class=\"token operator\">*</span>\n<span class=\"token function\">snlua_create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">snlua</span> <span class=\"token operator\">*</span> l <span class=\"token operator\">=</span> <span class=\"token function\">skynet_malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tl<span class=\"token operator\">-></span>mem_report <span class=\"token operator\">=</span> MEMORY_WARNING_REPORT<span class=\"token punctuation\">;</span>\n\tl<span class=\"token operator\">-></span>mem_limit <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tl<span class=\"token operator\">-></span>L <span class=\"token operator\">=</span> <span class=\"token function\">lua_newstate</span><span class=\"token punctuation\">(</span>lalloc<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tl<span class=\"token operator\">-></span>activeL <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ATOM_INIT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>l<span class=\"token operator\">-></span>trap <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> l<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span>\n\n<span class=\"token function\">snlua_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">snlua</span> <span class=\"token operator\">*</span>l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_context</span> <span class=\"token operator\">*</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> sz <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> tmp <span class=\"token operator\">=</span> <span class=\"token function\">skynet_malloc</span><span class=\"token punctuation\">(</span>sz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> sz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">skynet_callback</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> l <span class=\"token punctuation\">,</span> launch_cb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> self <span class=\"token operator\">=</span> <span class=\"token function\">skynet_command</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token string\">\"REG\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">uint32_t</span> handle_id <span class=\"token operator\">=</span> <span class=\"token function\">strtoul</span><span class=\"token punctuation\">(</span>self<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// it must be first message</span>\n\t<span class=\"token function\">skynet_send</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> handle_id<span class=\"token punctuation\">,</span> PTYPE_TAG_DONTCOPY<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> tmp<span class=\"token punctuation\">,</span> sz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这个服务的重点在于初始化操作，它首先通过<code>skynet_callback</code>函数设置了自己的回调函数为<code>launch_cb</code>，还拿具体例子，这个参数是默认参数&quot;bootstrap&quot;。<br />\n<code>const char * self = skynet_command(ctx, &quot;REG&quot;, NULL);</code>这段代码如果最后的参数会NULL或<code>\\0</code>返回服务的handle，如果<code>.name</code>则给服务注册名字。<br />\n而<code>uint32_t handle_id = strtoul(self+1, NULL, 16);</code>这里的<code>self+1</code>是因为self是16进制字符串，第一位是<code>:</code>。<br />\n最后向自己发一条消息，让工作线程去处理它。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">command_func</span> cmd_funcs<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"TIMEOUT\"</span><span class=\"token punctuation\">,</span> cmd_timeout <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"REG\"</span><span class=\"token punctuation\">,</span> cmd_reg <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"QUERY\"</span><span class=\"token punctuation\">,</span> cmd_query <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"NAME\"</span><span class=\"token punctuation\">,</span> cmd_name <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"EXIT\"</span><span class=\"token punctuation\">,</span> cmd_exit <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"KILL\"</span><span class=\"token punctuation\">,</span> cmd_kill <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"LAUNCH\"</span><span class=\"token punctuation\">,</span> cmd_launch <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"GETENV\"</span><span class=\"token punctuation\">,</span> cmd_getenv <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"SETENV\"</span><span class=\"token punctuation\">,</span> cmd_setenv <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"STARTTIME\"</span><span class=\"token punctuation\">,</span> cmd_starttime <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"ABORT\"</span><span class=\"token punctuation\">,</span> cmd_abort <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"MONITOR\"</span><span class=\"token punctuation\">,</span> cmd_monitor <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"STAT\"</span><span class=\"token punctuation\">,</span> cmd_stat <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"LOGON\"</span><span class=\"token punctuation\">,</span> cmd_logon <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"LOGOFF\"</span><span class=\"token punctuation\">,</span> cmd_logoff <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"SIGNAL\"</span><span class=\"token punctuation\">,</span> cmd_signal <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> \n<span class=\"token function\">skynet_command</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_context</span> <span class=\"token operator\">*</span> context<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> cmd <span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> param<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">command_func</span> <span class=\"token operator\">*</span> method <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>cmd_funcs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>method<span class=\"token operator\">-></span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">,</span> method<span class=\"token operator\">-></span>name<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">return</span> method<span class=\"token operator\">-></span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token operator\">++</span>method<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>\n<span class=\"token function\">cmd_reg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_context</span> <span class=\"token operator\">*</span> context<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> param<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>param <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">||</span> param<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>context<span class=\"token operator\">-></span>result<span class=\"token punctuation\">,</span> <span class=\"token string\">\":%x\"</span><span class=\"token punctuation\">,</span> context<span class=\"token operator\">-></span>handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> context<span class=\"token operator\">-></span>result<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'.'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">skynet_handle_namehandle</span><span class=\"token punctuation\">(</span>context<span class=\"token operator\">-></span>handle<span class=\"token punctuation\">,</span> param <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">skynet_error</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Can't register global name %s in C\"</span><span class=\"token punctuation\">,</span> param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>当工作线程拿到这条信息时，就会回调<code>launch_cb</code>函数，这里有把snlua服务的回调函数设置为NULL了，这是因为snlua只进行一次运行初始化即可，这里设置为NULL，可以保护服务初始化，而后续会把回调设置成其他。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span>\n<span class=\"token function\">launch_cb</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_context</span> <span class=\"token operator\">*</span> context<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>ud<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> type<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> session<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> source <span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> msg<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> sz<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>type <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> session <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">snlua</span> <span class=\"token operator\">*</span>l <span class=\"token operator\">=</span> ud<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">skynet_callback</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> err <span class=\"token operator\">=</span> <span class=\"token function\">init_cb</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">,</span> sz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">skynet_command</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> <span class=\"token string\">\"EXIT\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>继续调用<code>init_cb</code>，这是snlua的核心，它通过lua与c的交互，设置了环境，为了统计时间，重置了协程函数，同时设置了lua寻找模块的路径。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span>\n<span class=\"token function\">init_cb</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">snlua</span> <span class=\"token operator\">*</span>l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_context</span> <span class=\"token operator\">*</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> args<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> sz<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tlua_State <span class=\"token operator\">*</span>L <span class=\"token operator\">=</span> l<span class=\"token operator\">-></span>L<span class=\"token punctuation\">;</span>\n\tl<span class=\"token operator\">-></span>ctx <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lua_gc</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> LUA_GCSTOP<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lua_pushboolean</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">/* signal for libraries to ignore env. vars. */</span>\n\t<span class=\"token function\">lua_setfield</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> LUA_REGISTRYINDEX<span class=\"token punctuation\">,</span> <span class=\"token string\">\"LUA_NOENV\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">luaL_openlibs</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">luaL_requiref</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token string\">\"skynet.profile\"</span><span class=\"token punctuation\">,</span> init_profile<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">int</span> profile_lib <span class=\"token operator\">=</span> <span class=\"token function\">lua_gettop</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// replace coroutine.resume / coroutine.wrap</span>\n\t<span class=\"token function\">lua_getglobal</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token string\">\"coroutine\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lua_getfield</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> profile_lib<span class=\"token punctuation\">,</span> <span class=\"token string\">\"resume\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lua_setfield</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"resume\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lua_getfield</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> profile_lib<span class=\"token punctuation\">,</span> <span class=\"token string\">\"wrap\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lua_setfield</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"wrap\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">lua_settop</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> profile_lib<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">lua_pushlightuserdata</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lua_setfield</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> LUA_REGISTRYINDEX<span class=\"token punctuation\">,</span> <span class=\"token string\">\"skynet_context\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">luaL_requiref</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token string\">\"skynet.codecache\"</span><span class=\"token punctuation\">,</span> codecache <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lua_pop</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">lua_gc</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> LUA_GCGEN<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>path <span class=\"token operator\">=</span> <span class=\"token function\">optstring</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token string\">\"lua_path\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"./lualib/?.lua;./lualib/?/init.lua\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lua_pushstring</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lua_setglobal</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token string\">\"LUA_PATH\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>cpath <span class=\"token operator\">=</span> <span class=\"token function\">optstring</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token string\">\"lua_cpath\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"./luaclib/?.so\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lua_pushstring</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> cpath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lua_setglobal</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token string\">\"LUA_CPATH\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>service <span class=\"token operator\">=</span> <span class=\"token function\">optstring</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token string\">\"luaservice\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"./service/?.lua\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lua_pushstring</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> service<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lua_setglobal</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token string\">\"LUA_SERVICE\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>preload <span class=\"token operator\">=</span> <span class=\"token function\">skynet_command</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token string\">\"GETENV\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"preload\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lua_pushstring</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> preload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lua_setglobal</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token string\">\"LUA_PRELOAD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">lua_pushcfunction</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> traceback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token function\">lua_gettop</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> loader <span class=\"token operator\">=</span> <span class=\"token function\">optstring</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token string\">\"lualoader\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"./lualib/loader.lua\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> <span class=\"token function\">luaL_loadfile</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span>loader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">!=</span> LUA_OK<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">skynet_error</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Can't load %s : %s\"</span><span class=\"token punctuation\">,</span> loader<span class=\"token punctuation\">,</span> <span class=\"token function\">lua_tostring</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">report_launcher_error</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">lua_pushlstring</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> sz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tr <span class=\"token operator\">=</span> <span class=\"token function\">lua_pcall</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">!=</span> LUA_OK<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">skynet_error</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token string\">\"lua loader error : %s\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">lua_tostring</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">report_launcher_error</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">lua_settop</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">lua_getfield</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> LUA_REGISTRYINDEX<span class=\"token punctuation\">,</span> <span class=\"token string\">\"memlimit\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> LUA_TNUMBER<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">size_t</span> limit <span class=\"token operator\">=</span> <span class=\"token function\">lua_tointeger</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tl<span class=\"token operator\">-></span>mem_limit <span class=\"token operator\">=</span> limit<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">skynet_error</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Set memory limit to %.2f M\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span>limit <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1024</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">lua_pushnil</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">lua_setfield</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> LUA_REGISTRYINDEX<span class=\"token punctuation\">,</span> <span class=\"token string\">\"memlimit\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">lua_pop</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">lua_gc</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> LUA_GCRESTART<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这其中最重要是下面段代码。这段代码首先加载了loader.lua这个lua服务加载器，利用这个加载器去加载lua服务。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">//获取loader.lua的路径</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> loader <span class=\"token operator\">=</span> <span class=\"token function\">optstring</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token string\">\"lualoader\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"./lualib/loader.lua\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//加载loader.lua,r是加载结果</span>\n<span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> <span class=\"token function\">luaL_loadfile</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span>loader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">!=</span> LUA_OK<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">skynet_error</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Can't load %s : %s\"</span><span class=\"token punctuation\">,</span> loader<span class=\"token punctuation\">,</span> <span class=\"token function\">lua_tostring</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">report_launcher_error</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//把参数bootstrap压入栈中，准备传入loader中</span>\n<span class=\"token function\">lua_pushlstring</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> sz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//加载bootstrap服务。</span>\nr <span class=\"token operator\">=</span> <span class=\"token function\">lua_pcall</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">!=</span> LUA_OK<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">skynet_error</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token string\">\"lua loader error : %s\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">lua_tostring</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">report_launcher_error</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>如下是<code>loader.lua</code>的代码，第一部分，是找到对应服务文件，并加载它。第二部分是设置lua的包寻找路径，最后调用main函数启动这个服务。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> args <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">for</span> word <span class=\"token keyword\">in</span> string<span class=\"token punctuation\">.</span><span class=\"token function\">gmatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">...</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"%S+\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n\ttable<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">,</span> word<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\nSERVICE_NAME <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">local</span> main<span class=\"token punctuation\">,</span> pattern\n\n<span class=\"token keyword\">local</span> err <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">for</span> pat <span class=\"token keyword\">in</span> string<span class=\"token punctuation\">.</span><span class=\"token function\">gmatch</span><span class=\"token punctuation\">(</span>LUA_SERVICE<span class=\"token punctuation\">,</span> <span class=\"token string\">\"([^;]+);*\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n\t<span class=\"token keyword\">local</span> filename <span class=\"token operator\">=</span> string<span class=\"token punctuation\">.</span><span class=\"token function\">gsub</span><span class=\"token punctuation\">(</span>pat<span class=\"token punctuation\">,</span> <span class=\"token string\">\"?\"</span><span class=\"token punctuation\">,</span> SERVICE_NAME<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">local</span> f<span class=\"token punctuation\">,</span> msg <span class=\"token operator\">=</span> <span class=\"token function\">loadfile</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> f <span class=\"token keyword\">then</span>\n\t\ttable<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">else</span>\n\t\tpattern <span class=\"token operator\">=</span> pat\n\t\tmain <span class=\"token operator\">=</span> f\n\t\t<span class=\"token keyword\">break</span>\n\t<span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> main <span class=\"token keyword\">then</span>\n\t<span class=\"token function\">error</span><span class=\"token punctuation\">(</span>table<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\nLUA_SERVICE <span class=\"token operator\">=</span> <span class=\"token keyword\">nil</span>\npackage<span class=\"token punctuation\">.</span>path <span class=\"token punctuation\">,</span> LUA_PATH <span class=\"token operator\">=</span> LUA_PATH\npackage<span class=\"token punctuation\">.</span>cpath <span class=\"token punctuation\">,</span> LUA_CPATH <span class=\"token operator\">=</span> LUA_CPATH\n\n<span class=\"token keyword\">local</span> service_path <span class=\"token operator\">=</span> string<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">,</span> <span class=\"token string\">\"(.*/)[^/?]+$\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> service_path <span class=\"token keyword\">then</span>\n\tservice_path <span class=\"token operator\">=</span> string<span class=\"token punctuation\">.</span><span class=\"token function\">gsub</span><span class=\"token punctuation\">(</span>service_path<span class=\"token punctuation\">,</span> <span class=\"token string\">\"?\"</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\tpackage<span class=\"token punctuation\">.</span>path <span class=\"token operator\">=</span> service_path <span class=\"token operator\">..</span> <span class=\"token string\">\"?.lua;\"</span> <span class=\"token operator\">..</span> package<span class=\"token punctuation\">.</span>path\n\tSERVICE_PATH <span class=\"token operator\">=</span> service_path\n<span class=\"token keyword\">else</span>\n\t<span class=\"token keyword\">local</span> p <span class=\"token operator\">=</span> string<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">,</span> <span class=\"token string\">\"(.*/).+$\"</span><span class=\"token punctuation\">)</span>\n\tSERVICE_PATH <span class=\"token operator\">=</span> p\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">if</span> LUA_PRELOAD <span class=\"token keyword\">then</span>\n\t<span class=\"token keyword\">local</span> f <span class=\"token operator\">=</span> <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token function\">loadfile</span><span class=\"token punctuation\">(</span>LUA_PRELOAD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">f</span><span class=\"token punctuation\">(</span>table<span class=\"token punctuation\">.</span><span class=\"token function\">unpack</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\tLUA_PRELOAD <span class=\"token operator\">=</span> <span class=\"token keyword\">nil</span>\n<span class=\"token keyword\">end</span>\n\n_G<span class=\"token punctuation\">.</span>require <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>require <span class=\"token string\">\"skynet.require\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>require\n\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> table<span class=\"token punctuation\">.</span><span class=\"token function\">unpack</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>然后我们从lua层反过来看，还用上例bootstrap这个服务，服务代码如下。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> skynet <span class=\"token operator\">=</span> require <span class=\"token string\">\"skynet\"</span>\n<span class=\"token keyword\">local</span> harbor <span class=\"token operator\">=</span> require <span class=\"token string\">\"skynet.harbor\"</span>\n<span class=\"token keyword\">local</span> service <span class=\"token operator\">=</span> require <span class=\"token string\">\"skynet.service\"</span>\nrequire <span class=\"token string\">\"skynet.manager\"</span>\t<span class=\"token comment\">-- import skynet.launch, ...</span>\n\nskynet<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">local</span> standalone <span class=\"token operator\">=</span> skynet<span class=\"token punctuation\">.</span>getenv <span class=\"token string\">\"standalone\"</span>\n\n\t<span class=\"token keyword\">local</span> launcher <span class=\"token operator\">=</span> <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>skynet<span class=\"token punctuation\">.</span><span class=\"token function\">launch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"snlua\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"launcher\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\tskynet<span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".launcher\"</span><span class=\"token punctuation\">,</span> launcher<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">local</span> harbor_id <span class=\"token operator\">=</span> <span class=\"token function\">tonumber</span><span class=\"token punctuation\">(</span>skynet<span class=\"token punctuation\">.</span>getenv <span class=\"token string\">\"harbor\"</span> <span class=\"token keyword\">or</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> harbor_id <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">then</span>\n\t\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>standalone <span class=\"token operator\">==</span>  <span class=\"token keyword\">nil</span><span class=\"token punctuation\">)</span>\n\t\tstandalone <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span>\n\t\tskynet<span class=\"token punctuation\">.</span><span class=\"token function\">setenv</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"standalone\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">)</span>\n\n\t\t<span class=\"token keyword\">local</span> ok<span class=\"token punctuation\">,</span> slave <span class=\"token operator\">=</span> <span class=\"token function\">pcall</span><span class=\"token punctuation\">(</span>skynet<span class=\"token punctuation\">.</span>newservice<span class=\"token punctuation\">,</span> <span class=\"token string\">\"cdummy\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> ok <span class=\"token keyword\">then</span>\n\t\t\tskynet<span class=\"token punctuation\">.</span><span class=\"token function\">abort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">end</span>\n\t\tskynet<span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".cslave\"</span><span class=\"token punctuation\">,</span> slave<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token keyword\">if</span> standalone <span class=\"token keyword\">then</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token function\">pcall</span><span class=\"token punctuation\">(</span>skynet<span class=\"token punctuation\">.</span>newservice<span class=\"token punctuation\">,</span><span class=\"token string\">\"cmaster\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">then</span>\n\t\t\t\tskynet<span class=\"token punctuation\">.</span><span class=\"token function\">abort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">end</span>\n\t\t<span class=\"token keyword\">end</span>\n\n\t\t<span class=\"token keyword\">local</span> ok<span class=\"token punctuation\">,</span> slave <span class=\"token operator\">=</span> <span class=\"token function\">pcall</span><span class=\"token punctuation\">(</span>skynet<span class=\"token punctuation\">.</span>newservice<span class=\"token punctuation\">,</span> <span class=\"token string\">\"cslave\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> ok <span class=\"token keyword\">then</span>\n\t\t\tskynet<span class=\"token punctuation\">.</span><span class=\"token function\">abort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">end</span>\n\t\tskynet<span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".cslave\"</span><span class=\"token punctuation\">,</span> slave<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">end</span>\n\n\t<span class=\"token keyword\">if</span> standalone <span class=\"token keyword\">then</span>\n\t\t<span class=\"token keyword\">local</span> datacenter <span class=\"token operator\">=</span> skynet<span class=\"token punctuation\">.</span>newservice <span class=\"token string\">\"datacenterd\"</span>\n\t\tskynet<span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DATACENTER\"</span><span class=\"token punctuation\">,</span> datacenter<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">end</span>\n\tskynet<span class=\"token punctuation\">.</span>newservice <span class=\"token string\">\"service_mgr\"</span>\n\n\t<span class=\"token keyword\">local</span> enablessl <span class=\"token operator\">=</span> skynet<span class=\"token punctuation\">.</span>getenv <span class=\"token string\">\"enablessl\"</span>\n\t<span class=\"token keyword\">if</span> enablessl <span class=\"token keyword\">then</span>\n\t\tservice<span class=\"token punctuation\">.</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ltls_holder\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">local</span> c <span class=\"token operator\">=</span> require <span class=\"token string\">\"ltls.init.c\"</span>\n\t\t\tc<span class=\"token punctuation\">.</span><span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">end</span>\n\n\t<span class=\"token function\">pcall</span><span class=\"token punctuation\">(</span>skynet<span class=\"token punctuation\">.</span>newservice<span class=\"token punctuation\">,</span>skynet<span class=\"token punctuation\">.</span>getenv <span class=\"token string\">\"start\"</span> <span class=\"token keyword\">or</span> <span class=\"token string\">\"main\"</span><span class=\"token punctuation\">)</span>\n\tskynet<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>其中很重要的就是这个<code>local launcher = assert(skynet.launch(&quot;snlua&quot;,&quot;launcher&quot;))</code>。<br />\n当我们去创建新服务，或者是初始化lua服务，都会给launcher这个服务发消息，它不仅仅充当着启动器的角色。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">function</span> skynet<span class=\"token punctuation\">.</span><span class=\"token function\">init_service</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\tskynet_require<span class=\"token punctuation\">.</span><span class=\"token function\">init_all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">end</span>\n\t<span class=\"token keyword\">local</span> ok<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> <span class=\"token function\">xpcall</span><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">,</span> traceback<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> ok <span class=\"token keyword\">then</span>\n\t\tskynet<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"init service failed: \"</span> <span class=\"token operator\">..</span> <span class=\"token function\">tostring</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\tskynet<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".launcher\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"lua\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ERROR\"</span><span class=\"token punctuation\">)</span>\n\t\tskynet<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">else</span>\n\t\tskynet<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".launcher\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"lua\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"LAUNCHOK\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\n\n<span class=\"token keyword\">function</span> skynet<span class=\"token punctuation\">.</span><span class=\"token function\">newservice</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">...</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> skynet<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".launcher\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"lua\"</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">\"LAUNCH\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"snlua\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">...</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>而当创建新服务时，launcher服务会调用LAUNCH函数，然后再调用launch_service，而后又调用skynet.launch。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">function</span> command<span class=\"token punctuation\">.</span><span class=\"token function\">LAUNCH</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> service<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">...</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">launch_service</span><span class=\"token punctuation\">(</span>service<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">...</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> NORET\n\n<span class=\"token keyword\">end</span>\n<span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">launch_service</span><span class=\"token punctuation\">(</span>service<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">...</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">local</span> param <span class=\"token operator\">=</span> table<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">...</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">local</span> inst <span class=\"token operator\">=</span> skynet<span class=\"token punctuation\">.</span><span class=\"token function\">launch</span><span class=\"token punctuation\">(</span>service<span class=\"token punctuation\">,</span> param<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">local</span> session <span class=\"token operator\">=</span> skynet<span class=\"token punctuation\">.</span><span class=\"token function\">context</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">local</span> response <span class=\"token operator\">=</span> skynet<span class=\"token punctuation\">.</span><span class=\"token function\">response</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> inst <span class=\"token keyword\">then</span>\n\t\tservices<span class=\"token punctuation\">[</span>inst<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> service <span class=\"token operator\">..</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">..</span> param\n\t\tinstance<span class=\"token punctuation\">[</span>inst<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> response\n\t\tlaunch_session<span class=\"token punctuation\">[</span>inst<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> session\n\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token function\">response</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">false</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token keyword\">end</span>\n\t<span class=\"token keyword\">return</span> inst\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">function</span> skynet<span class=\"token punctuation\">.</span><span class=\"token function\">launch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">...</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">local</span> addr <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">command</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LAUNCH\"</span><span class=\"token punctuation\">,</span> table<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">...</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> addr <span class=\"token keyword\">then</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">tonumber</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">.</span><span class=\"token function\">sub</span><span class=\"token punctuation\">(</span>addr <span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>而skynet.launch会调用skynet.core中的command，执行LAUNCH。会在<code>cmd_launch</code>函数中创建snlua加载类似于bootsrtap等lua服务。每个lua服务都会创建一个snlua虚拟机，lua服务之间形成沙盒，通过工作线程进行交互信息，信息在每个服务的结构体中，传递消息也仅仅是指针，这样的效率十分的高。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">command_func</span> cmd_funcs<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"TIMEOUT\"</span><span class=\"token punctuation\">,</span> cmd_timeout <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"REG\"</span><span class=\"token punctuation\">,</span> cmd_reg <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"QUERY\"</span><span class=\"token punctuation\">,</span> cmd_query <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"NAME\"</span><span class=\"token punctuation\">,</span> cmd_name <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"EXIT\"</span><span class=\"token punctuation\">,</span> cmd_exit <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"KILL\"</span><span class=\"token punctuation\">,</span> cmd_kill <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"LAUNCH\"</span><span class=\"token punctuation\">,</span> cmd_launch <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"GETENV\"</span><span class=\"token punctuation\">,</span> cmd_getenv <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"SETENV\"</span><span class=\"token punctuation\">,</span> cmd_setenv <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"STARTTIME\"</span><span class=\"token punctuation\">,</span> cmd_starttime <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"ABORT\"</span><span class=\"token punctuation\">,</span> cmd_abort <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"MONITOR\"</span><span class=\"token punctuation\">,</span> cmd_monitor <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"STAT\"</span><span class=\"token punctuation\">,</span> cmd_stat <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"LOGON\"</span><span class=\"token punctuation\">,</span> cmd_logon <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"LOGOFF\"</span><span class=\"token punctuation\">,</span> cmd_logoff <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"SIGNAL\"</span><span class=\"token punctuation\">,</span> cmd_signal <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#123;</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> \n<span class=\"token function\">skynet_command</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_context</span> <span class=\"token operator\">*</span> context<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> cmd <span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> param<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">command_func</span> <span class=\"token operator\">*</span> method <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>cmd_funcs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>method<span class=\"token operator\">-></span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">,</span> method<span class=\"token operator\">-></span>name<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">return</span> method<span class=\"token operator\">-></span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token operator\">++</span>method<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>\n<span class=\"token function\">cmd_launch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_context</span> <span class=\"token operator\">*</span> context<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> param<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token class-name\">size_t</span> sz <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> tmp<span class=\"token punctuation\">[</span>sz<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">,</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> args <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> mod <span class=\"token operator\">=</span> <span class=\"token function\">strsep</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>args<span class=\"token punctuation\">,</span> <span class=\"token string\">\" \\t\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\targs <span class=\"token operator\">=</span> <span class=\"token function\">strsep</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>args<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_context</span> <span class=\"token operator\">*</span> inst <span class=\"token operator\">=</span> <span class=\"token function\">skynet_context_new</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">,</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>inst <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">id_to_hex</span><span class=\"token punctuation\">(</span>context<span class=\"token operator\">-></span>result<span class=\"token punctuation\">,</span> inst<span class=\"token operator\">-></span>handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> context<span class=\"token operator\">-></span>result<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这就是lua服务的创建过程。</p>\n<p>但是回到skynet.start这个函数中，服务启动时会先调用skynet.core中的callback函数。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">function</span> skynet<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span>start_func<span class=\"token punctuation\">)</span>\n\tc<span class=\"token punctuation\">.</span><span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>skynet<span class=\"token punctuation\">.</span>dispatch_message<span class=\"token punctuation\">)</span>\n\tinit_thread <span class=\"token operator\">=</span> skynet<span class=\"token punctuation\">.</span><span class=\"token function\">timeout</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\tskynet<span class=\"token punctuation\">.</span><span class=\"token function\">init_service</span><span class=\"token punctuation\">(</span>start_func<span class=\"token punctuation\">)</span>\n\t\tinit_thread <span class=\"token operator\">=</span> <span class=\"token keyword\">nil</span>\n\t<span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>callback函数对应lcommand函数，函数首先从 Lua 堆栈中获取服务上下文和一个布尔值 <code>forward</code>。然后，检查堆栈上的第一个参数是否是一个函数，这个函数就是要设置为回调函数的 Lua 函数。从结果上，lcommand最后一定会把之前设置为NULL的回调，设回成_cb。而这个函数的作用就是设置lua服务的回调函数。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">\tluaL_Reg l<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"send\"</span> <span class=\"token punctuation\">,</span> lsend <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"genid\"</span><span class=\"token punctuation\">,</span> lgenid <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"redirect\"</span><span class=\"token punctuation\">,</span> lredirect <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"command\"</span> <span class=\"token punctuation\">,</span> lcommand <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"intcommand\"</span><span class=\"token punctuation\">,</span> lintcommand <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"addresscommand\"</span><span class=\"token punctuation\">,</span> laddresscommand <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> lerror <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"harbor\"</span><span class=\"token punctuation\">,</span> lharbor <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"callback\"</span><span class=\"token punctuation\">,</span> lcallback <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"trace\"</span><span class=\"token punctuation\">,</span> ltrace <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#123;</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\t\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span>\n<span class=\"token function\">lcallback</span><span class=\"token punctuation\">(</span>lua_State <span class=\"token operator\">*</span>L<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_context</span> <span class=\"token operator\">*</span> context <span class=\"token operator\">=</span> <span class=\"token function\">lua_touserdata</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token function\">lua_upvalueindex</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> forward <span class=\"token operator\">=</span> <span class=\"token function\">lua_toboolean</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">luaL_checktype</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>LUA_TFUNCTION<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lua_settop</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">callback_context</span> <span class=\"token operator\">*</span> cb_ctx <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">callback_context</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">lua_newuserdatauv</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>cb_ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcb_ctx<span class=\"token operator\">-></span>L <span class=\"token operator\">=</span> <span class=\"token function\">lua_newthread</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lua_pushcfunction</span><span class=\"token punctuation\">(</span>cb_ctx<span class=\"token operator\">-></span>L<span class=\"token punctuation\">,</span> traceback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lua_setiuservalue</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lua_getfield</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> LUA_REGISTRYINDEX<span class=\"token punctuation\">,</span> <span class=\"token string\">\"callback_context\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lua_setiuservalue</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lua_setfield</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> LUA_REGISTRYINDEX<span class=\"token punctuation\">,</span> <span class=\"token string\">\"callback_context\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lua_xmove</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> cb_ctx<span class=\"token operator\">-></span>L<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">skynet_callback</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> cb_ctx<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>forward<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>_forward_pre<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token punctuation\">(</span>_cb_pre<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span>\n<span class=\"token function\">_cb_pre</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_context</span> <span class=\"token operator\">*</span> context<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> ud<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> type<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> session<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> source<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> msg<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> sz<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">callback_context</span> <span class=\"token operator\">*</span>cb_ctx <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">callback_context</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>ud<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">clear_last_context</span><span class=\"token punctuation\">(</span>cb_ctx<span class=\"token operator\">-></span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">skynet_callback</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> ud<span class=\"token punctuation\">,</span> _cb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">_cb</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> cb_ctx<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span> session<span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">,</span> sz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span>\n<span class=\"token function\">_forward_pre</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_context</span> <span class=\"token operator\">*</span>context<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>ud<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> type<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> session<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> source<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>msg<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> sz<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">callback_context</span> <span class=\"token operator\">*</span>cb_ctx <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">callback_context</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>ud<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">clear_last_context</span><span class=\"token punctuation\">(</span>cb_ctx<span class=\"token operator\">-></span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">skynet_callback</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> ud<span class=\"token punctuation\">,</span> forward_cb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">forward_cb</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> cb_ctx<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span> session<span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">,</span> sz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span>\n<span class=\"token function\">forward_cb</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_context</span> <span class=\"token operator\">*</span> context<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> ud<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> type<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> session<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> source<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> msg<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> sz<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">_cb</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> ud<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span> session<span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">,</span> sz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// don't delete msg in forward mode.</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在_cb中处理lua服务的数据。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span>\n<span class=\"token function\">_cb</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">skynet_context</span> <span class=\"token operator\">*</span> context<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> ud<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> type<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> session<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> source<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> msg<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> sz<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">callback_context</span> <span class=\"token operator\">*</span>cb_ctx <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">callback_context</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>ud<span class=\"token punctuation\">;</span>\n\tlua_State <span class=\"token operator\">*</span>L <span class=\"token operator\">=</span> cb_ctx<span class=\"token operator\">-></span>L<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> trace <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> r<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lua_pushvalue</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">lua_pushinteger</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lua_pushlightuserdata</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lua_pushinteger</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span>sz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lua_pushinteger</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> session<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lua_pushinteger</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tr <span class=\"token operator\">=</span> <span class=\"token function\">lua_pcall</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> trace<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">==</span> LUA_OK<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> self <span class=\"token operator\">=</span> <span class=\"token function\">skynet_command</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> <span class=\"token string\">\"REG\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">case</span> LUA_ERRRUN<span class=\"token operator\">:</span>\n\t\t<span class=\"token function\">skynet_error</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> <span class=\"token string\">\"lua call [%x to %s : %d msgsz = %d] error : \"</span> KRED <span class=\"token string\">\"%s\"</span> KNRM<span class=\"token punctuation\">,</span> source <span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">,</span> session<span class=\"token punctuation\">,</span> sz<span class=\"token punctuation\">,</span> <span class=\"token function\">lua_tostring</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">case</span> LUA_ERRMEM<span class=\"token operator\">:</span>\n\t\t<span class=\"token function\">skynet_error</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> <span class=\"token string\">\"lua memory error : [%x to %s : %d]\"</span><span class=\"token punctuation\">,</span> source <span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">,</span> session<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">case</span> LUA_ERRERR<span class=\"token operator\">:</span>\n\t\t<span class=\"token function\">skynet_error</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> <span class=\"token string\">\"lua error in error : [%x to %s : %d]\"</span><span class=\"token punctuation\">,</span> source <span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">,</span> session<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">lua_pop</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<hr />\n<p>目前就看到这里，在分析过程中，存在很多值得深入的细节，好在网上已经有很多资料，可以找到。再遇感兴趣点的时候，会再次更新。</p>\n",
            "tags": [
                "openProject"
            ]
        }
    ]
}